{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/classes/theme-utils/theme-utils.ts","mappings":";;;AAAA,+CAA4C;AAE5C;;GAEG;AACH,MAAa,UAAU;IACrB,YAAY,CAAC,MAAc,EAAE,KAAa;QACxC,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,MAAM,GAAG,GAAG,IAAI,qBAAS,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QAE1C,iDAAiD;QACjD,MAAM,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9C,0DAA0D;QAC1D,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;YACpB,QAAQ,GAAG,SAAS,CAAC;QACvB,CAAC;aAAM,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;YAC3B,QAAQ,GAAG,SAAS,CAAC;QACvB,CAAC;aAAM,CAAC;YACN,yCAAyC;YACzC,+BAA+B;YAC/B,MAAM,aAAa,GAAG,IAAI,qBAAS,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YACnD,MAAM,KAAK,GAAG,CAAC,aAAa,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACxE,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;gBAChB,QAAQ,GAAG,SAAS,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACN,QAAQ,GAAG,SAAS,CAAC;YACvB,CAAC;QACH,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,SAAiB,CAAC;QACtB,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5B,SAAS,GAAG,QAAQ,CAAC;QACvB,CAAC;aAAM,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YACjC,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC;aAAM,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;YACpC,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC;aAAM,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YACrC,SAAS,GAAG,MAAM,CAAC;QACrB,CAAC;aAAM,CAAC;YACN,SAAS,GAAG,SAAS,CAAC;QACxB,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7C,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACpC,CAAC;CACF;AAhDD,gCAgDC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/core/classes/theme-utils/theme-utils.ts"],"sourcesContent":["import { TinyColor } from '@ctrl/tinycolor';\n\n/**\n * @deprecated Just use TinyColor https://www.npmjs.com/package/@ctrl/tinycolor\n */\nexport class ThemeUtils {\n  textContrast(cssVar: string, bgVar: string): string {\n    let txtColor = '';\n    const rgb = new TinyColor(cssVar).toRgb();\n\n    // Find the average value to determine brightness\n    const brightest = (rgb.r + rgb.b + rgb.g) / 3;\n    // Find a good threshold for when to have light text color\n    if (brightest < 144) {\n      txtColor = '#ffffff';\n    } else if (brightest > 191) {\n      txtColor = '#333333';\n    } else {\n      // RGB averages between 144-197 are to be\n      // matched to bg2 css variable.\n      const backgroundRgb = new TinyColor(bgVar).toRgb();\n      const bgAvg = (backgroundRgb.r + backgroundRgb.g + backgroundRgb.b) / 3;\n      if (bgAvg < 127) {\n        txtColor = '#333333';\n      } else {\n        txtColor = '#ffffff';\n      }\n    }\n\n    return txtColor;\n  }\n\n  getValueType(value: string): string {\n    let valueType: string;\n    if (value.startsWith('var')) {\n      valueType = 'cssVar';\n    } else if (value.startsWith('#')) {\n      valueType = 'hex';\n    } else if (value.startsWith('rgb(')) {\n      valueType = 'rgb';\n    } else if (value.startsWith('rgba(')) {\n      valueType = 'rgba';\n    } else {\n      valueType = 'unknown';\n    }\n\n    return valueType;\n  }\n\n  colorFromMeta(meta: string): string {\n    const trimFront = meta.replace('var(--', '');\n    return trimFront.replace(')', '');\n  }\n}\n"],"version":3}