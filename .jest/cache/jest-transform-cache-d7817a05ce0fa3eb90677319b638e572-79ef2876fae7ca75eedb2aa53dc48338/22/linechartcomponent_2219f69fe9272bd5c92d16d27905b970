9101770585eb62f93f122f2d895c39df
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineChartComponent = void 0;
const core_1 = require("@angular/core");
const tinycolor_1 = require("@ctrl/tinycolor");
const angular2_uuid_1 = require("angular2-uuid");
const date_fns_tz_1 = require("date-fns-tz");
const dygraphs_1 = __importDefault(require("dygraphs"));
const bits_constant_1 = require("app/constants/bits.constant");
const bytes_constant_1 = require("app/constants/bytes.constant");
const reporting_enum_1 = require("app/enums/reporting.enum");
const file_size_utils_1 = require("app/helpers/file-size.utils");
const reports_service_1 = require("app/pages/reports-dashboard/reports.service");
const plotter_service_1 = require("app/pages/reports-dashboard/services/plotter.service");
const theme_service_1 = require("app/services/theme/theme.service");
const i0 = __importStar(require("@angular/core"));
// TODO: Untie from reporting and move to a separate module.
let LineChartComponent = class LineChartComponent {
    constructor(themeService, reportsService, plotterService) {
        this.themeService = themeService;
        this.reportsService = reportsService;
        this.plotterService = plotterService;
        this.stacked = false;
        this.type = 'line';
        this.labelY = 'Label Y';
        this.units = '';
        this.timeFormat = '%H:%M';
        this.controlUid = `chart_${angular2_uuid_1.UUID.UUID()}`;
        this.zoomChange = (0, core_1.output)();
        this.axisLabelFormatter = (numero) => {
            var _a;
            if (((_a = this.report) === null || _a === void 0 ? void 0 : _a.name) === reporting_enum_1.ReportingGraphName.NetworkInterface) {
                if (numero < bits_constant_1.Mb) {
                    if (this.yLabelPrefix === 'Gb') {
                        numero /= bits_constant_1.Gb;
                    }
                    if (this.yLabelPrefix === 'Mb') {
                        numero /= bits_constant_1.Mb;
                    }
                    if (this.yLabelPrefix === 'kb') {
                        numero /= bits_constant_1.kb;
                    }
                }
                const [formatted] = (0, file_size_utils_1.normalizeFileSize)(numero * 1000, 'b', 10);
                return formatted.toString();
            }
            const converted = this.formatLabelValue(numero, this.inferUnits(this.labelY), 1, true, true);
            const suffix = converted.suffix ? converted.suffix : '';
            return `${this.limitDecimals(converted.value)}${suffix}`;
        };
        this.series = () => {
            const series = {};
            this.data.legend.forEach((item) => {
                series[item] = { plotter: this.plotterService.getSmoothPlotter() };
            });
            return series;
        };
        this.getSuffix = (converted) => {
            if (converted.shortName !== undefined) {
                return converted.shortName;
            }
            return converted.suffix !== undefined ? converted.suffix : '';
        };
        this.legendFormatter = (legend) => {
            const clone = Object.assign(Object.assign({}, legend), { chartId: this.chartId });
            clone.series.forEach((item, index) => {
                if (!item.y) {
                    return;
                }
                if (this.report.name === reporting_enum_1.ReportingGraphName.NetworkInterface) {
                    clone.series[index].yHTML = (0, file_size_utils_1.buildNormalizedFileSize)(item.y * 1000, 'b', 10) + '/s';
                }
                else {
                    const yConverted = this.formatLabelValue(item.y, this.inferUnits(this.labelY), 1, true);
                    const ySuffix = this.getSuffix(yConverted);
                    clone.series[index].yHTML = `${this.limitDecimals(yConverted.value)} ${ySuffix}`;
                    if (this.labelY.endsWith('/s')) {
                        clone.series[index].yHTML += '/s';
                    }
                    if (!clone.stackedTotal) {
                        clone.stackedTotal = 0;
                    }
                    clone.stackedTotal += item.y;
                    if (clone.stackedTotal >= 0) {
                        const stackedTotalConverted = this.formatLabelValue(clone.stackedTotal, this.inferUnits(this.labelY), 1, true);
                        const stackedTotalSuffix = this.getSuffix(stackedTotalConverted);
                        clone.stackedTotalHTML = `${this.limitDecimals(stackedTotalConverted.value)} ${stackedTotalSuffix}`;
                    }
                }
            });
            this.reportsService.emitLegendEvent(clone);
            return '';
        };
        this.drawCallback = (dygraph) => {
            var _a;
            if (dygraph.axes_.length) {
                const numero = dygraph.axes_[0].maxyval;
                if (((_a = this.report) === null || _a === void 0 ? void 0 : _a.name) === reporting_enum_1.ReportingGraphName.NetworkInterface) {
                    const [, unit] = (0, file_size_utils_1.normalizeFileSize)(numero * 1000, 'b', 10);
                    this.yLabelPrefix = unit;
                    return;
                }
                const converted = this.formatLabelValue(numero, this.inferUnits(this.labelY));
                if (converted.prefix) {
                    this.yLabelPrefix = converted.prefix;
                }
                else {
                    this.yLabelPrefix = '';
                }
            }
            else {
                console.warn('axes not found');
            }
        };
        this.zoomCallback = (startDate, endDate) => {
            const maxZoomLevel = 5 * 60 * 1000;
            const zoomRange = endDate - startDate;
            if (zoomRange < maxZoomLevel) {
                this.chart.updateOptions({
                    dateWindow: [this.lastMinDate, this.lastMaxDate],
                    animatedZooms: false,
                });
                return;
            }
            this.lastMinDate = startDate;
            this.lastMaxDate = endDate;
            this.zoomChange.emit([startDate, endDate]);
        };
    }
    render(update) {
        this.renderGraph(update);
    }
    renderGraph(update) {
        var _a, _b;
        if (!((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.legend) === null || _b === void 0 ? void 0 : _b.length)) {
            return;
        }
        const data = this.makeTimeAxis(this.data);
        const labels = data.shift();
        const fg2 = this.themeService.currentTheme().fg2;
        const gridLineColor = new tinycolor_1.TinyColor(fg2).setAlpha(0.25).toRgbString();
        const options = {
            animatedZooms: true,
            drawPoints: false, // Must be disabled for smoothPlotter
            pointSize: 1,
            includeZero: true,
            highlightCircleSize: 4,
            strokeWidth: 1,
            colors: this.chartColors,
            labels, // time axis
            ylabel: this.formatAxisName(),
            gridLineColor,
            showLabelsOnHighlight: false,
            labelsSeparateLines: true,
            axes: {
                y: {
                    yRangePad: 24,
                    axisLabelFormatter: this.axisLabelFormatter.bind(this),
                },
            },
            legendFormatter: this.legendFormatter.bind(this),
            series: this.series.bind(this),
            drawCallback: this.drawCallback.bind(this),
            zoomCallback: this.zoomCallback.bind(this),
            stackedGraph: this.stacked,
        };
        if (update) {
            this.chart.updateOptions(options);
        }
        else {
            this.chart = new dygraphs_1.default(this.el.nativeElement, data, options);
        }
    }
    // TODO: Line chart should be dumber and should not care about timezones.
    makeTimeAxis(rd) {
        const rowData = rd.data;
        const newRows = rowData.map((row, index) => {
            // replace unix timestamp in first column with date
            const convertedDate = (0, date_fns_tz_1.utcToZonedTime)(row[0] * 1000, this.timezone);
            if (index === 0) {
                this.lastMinDate = convertedDate.getTime();
            }
            if (index === rowData.length - 1) {
                this.lastMaxDate = convertedDate.getTime();
            }
            return [convertedDate, ...row.slice(1)];
        });
        return [
            ['x', ...rd.legend],
            ...newRows,
        ];
    }
    inferUnits(label) {
        // Figures out from the label what the unit is
        let units = label;
        switch (true) {
            case label.toLowerCase().includes('percentage'):
            case label.includes('%'):
                units = '%';
                break;
            case label.toLowerCase().includes('celsius'):
            case label.includes('°'):
                units = '°';
                break;
            case label.toLowerCase().includes('mebibytes'):
                units = 'mebibytes';
                break;
            case label.toLowerCase().includes('kilobits'):
                units = 'kilobits';
                break;
            case label.toLowerCase().includes('kibibytes'):
                units = 'kibibytes';
                break;
            case label.toLowerCase().includes('bytes'):
                units = 'bytes';
                break;
            case label.toLowerCase().includes('bits'):
                units = 'bits';
                break;
        }
        if (typeof units === 'undefined') {
            console.warn('Could not infer units from ' + this.labelY);
        }
        return units;
    }
    formatAxisName() {
        if (this.report.name === reporting_enum_1.ReportingGraphName.NetworkInterface) {
            return this.yLabelPrefix + '/s';
        }
        switch (true) {
            case this.labelY.toLowerCase() === 'seconds':
                return 'Days';
            case this.labelY.toLowerCase().includes('bits/s'):
                return `${this.yLabelPrefix}bits/s`;
            case this.labelY.toLowerCase().includes('bytes/s'):
                return `${this.yLabelPrefix}bytes/s`;
            case this.labelY.toLowerCase().includes('bytes'):
                return `${this.yLabelPrefix}bytes`;
            case this.labelY.toLowerCase().includes('bits'):
                return `${this.yLabelPrefix}bits`;
            default:
                return this.labelY;
        }
    }
    formatLabelValue(value, units, fixed, prefixRules, axis = false) {
        const day = 60 * 60 * 24;
        let result = { value };
        if (!fixed) {
            fixed = -1;
        }
        if (typeof value !== 'number') {
            return value;
        }
        switch (units.toLowerCase()) {
            case 'seconds':
                result = { value: value / day, shortName: ' days' };
                break;
            case 'kilobits':
                result = this.convertKmgt(value * 1000, 'bits', fixed, prefixRules);
                if (axis) {
                    result.value = this.getValueForAxis(value * 1000, result.prefix);
                }
                break;
            case 'mebibytes':
                result = this.convertKmgt(value * bytes_constant_1.MiB, 'bytes', fixed, prefixRules);
                if (axis) {
                    result.value = this.getValueForAxis(value * 1000 * 1000, result.prefix);
                }
                break;
            case 'kibibytes':
                result = this.convertKmgt(value * bytes_constant_1.KiB, 'bytes', fixed, prefixRules);
                if (axis) {
                    result.value = this.getValueForAxis(value * 1000, result.prefix);
                }
                break;
            case 'bits':
            case 'bytes':
                result = this.convertKmgt(value, units.toLowerCase(), fixed, prefixRules);
                if (axis) {
                    result.value = this.getValueForAxis(value, result.prefix);
                }
                break;
            case '%':
            case '°':
            default:
                result = this.convertByKilo(value);
                break;
        }
        return result;
    }
    convertByKilo(value) {
        if (typeof value !== 'number') {
            return value;
        }
        let newValue = value;
        let suffix = '';
        if (value >= 1000000) {
            newValue = value / 1000000;
            suffix = 'm';
        }
        else if (value < 1000000 && value >= 1000) {
            newValue = value / 1000;
            suffix = 'k';
        }
        return { value: newValue, suffix };
    }
    limitDecimals(numero) {
        if (numero < 1024) {
            return Number(numero.toString().slice(0, 4));
        }
        return Math.round(numero);
    }
    getValueForAxis(value, prefix) {
        if (prefix === 'Tebi')
            return value / 1000 ** 4;
        if (prefix === 'Gibi')
            return value / 1000 ** 3;
        if (prefix === 'Mebi')
            return value / 1000 ** 2;
        if (prefix === 'Kibi')
            return value / 1000;
        return value;
    }
    convertKmgt(value, units, fixed, prefixRules) {
        let prefix = '';
        let newValue = value;
        let shortName = '';
        if (value > bytes_constant_1.TiB || (prefixRules && this.yLabelPrefix === 'Tebi')) {
            prefix = 'Tebi';
            shortName = 'TiB';
            newValue = value / bytes_constant_1.TiB;
        }
        else if ((value < bytes_constant_1.TiB && value > bytes_constant_1.GiB) || (prefixRules && this.yLabelPrefix === 'Gibi')) {
            prefix = 'Gibi';
            shortName = 'GiB';
            newValue = value / bytes_constant_1.GiB;
        }
        else if ((value < bytes_constant_1.GiB && value > bytes_constant_1.MiB) || (prefixRules && this.yLabelPrefix === 'Mebi')) {
            prefix = 'Mebi';
            shortName = 'MiB';
            newValue = value / bytes_constant_1.MiB;
        }
        else if ((value < bytes_constant_1.MiB && value > bytes_constant_1.KiB) || (prefixRules && this.yLabelPrefix === 'Kibi')) {
            prefix = 'Kibi';
            shortName = 'KiB';
            newValue = value / bytes_constant_1.KiB;
        }
        if (units === 'bits') {
            shortName = shortName.replace(/i/, '').trim();
            shortName = ` ${shortName.charAt(0).toUpperCase()}${shortName.substring(1).toLowerCase()}`; // Kb, Mb, Gb, Tb
        }
        return { value: newValue, prefix, shortName };
    }
    ngOnChanges(changes) {
        if (changes.data) {
            this.render();
            if (this.chart) {
                this.render(true);
            }
            else {
                this.render(); // make an update method?
            }
        }
    }
    ngAfterViewInit() {
        this.render();
    }
    ngOnDestroy() {
        var _a;
        (_a = this.chart) === null || _a === void 0 ? void 0 : _a.destroy();
    }
};
exports.LineChartComponent = LineChartComponent;
LineChartComponent.ctorParameters = () => [
    { type: theme_service_1.ThemeService },
    { type: reports_service_1.ReportsService },
    { type: plotter_service_1.PlotterService }
];
LineChartComponent.propDecorators = {
    el: [{ type: core_1.ViewChild, args: ['wrapper', { static: true },] }],
    chartId: [{ type: core_1.Input }],
    chartColors: [{ type: core_1.Input }],
    data: [{ type: core_1.Input }],
    report: [{ type: core_1.Input }],
    title: [{ type: core_1.Input }],
    timezone: [{ type: core_1.Input }],
    stacked: [{ type: core_1.Input }],
    legends: [{ type: core_1.Input }],
    type: [{ type: core_1.Input }],
    labelY: [{ type: core_1.Input }],
    zoomChange: [{ type: i0.Output, args: ["zoomChange",] }]
};
exports.LineChartComponent = LineChartComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-linechart',
        template: require("./line-chart.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], LineChartComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,