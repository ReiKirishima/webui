409ed8b65f07e7ed0c863177648529ac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maxDecimals = void 0;
exports.formatData = formatData;
exports.inferUnits = inferUnits;
exports.convertKmgt = convertKmgt;
exports.convertByKilobits = convertByKilobits;
exports.convertByThousands = convertByThousands;
exports.formatValue = formatValue;
exports.convertAggregations = convertAggregations;
exports.optimizeLegend = optimizeLegend;
const bytes_constant_1 = require("app/constants/bytes.constant");
const reporting_enum_1 = require("app/enums/reporting.enum");
const object_keys_to_human_readable_helper_1 = require("app/helpers/object-keys-to-human-readable.helper");
function formatData(data) {
    const formattedData = Object.assign({}, data);
    if (formattedData.name === reporting_enum_1.ReportingGraphName.NetworkInterface
        && formattedData.aggregations) {
        delete formattedData.aggregations.min;
    }
    if (formattedData.name === reporting_enum_1.ReportingGraphName.Cpu) {
        formattedData.legend = [...formattedData.legend].reverse();
        formattedData.data = formattedData.data.map((row) => [
            row[0],
            ...row.slice(1).reverse(),
        ]);
        if (formattedData.aggregations) {
            formattedData.aggregations.min = [...formattedData.aggregations.min].reverse();
            formattedData.aggregations.max = [...formattedData.aggregations.max].reverse();
            formattedData.aggregations.mean = [...formattedData.aggregations.mean].reverse();
        }
    }
    return formattedData;
}
const maxDecimals = (input, max = 2) => {
    const str = input.toString().split('.');
    if (!str[1]) {
        // Not a float
        return input;
    }
    const decimals = str[1].length;
    const output = decimals > max ? input.toFixed(max) : input;
    const prepareInput = parseFloat(output);
    return prepareInput < 1000 ? Number(prepareInput.toString().slice(0, 4)) : Math.round(prepareInput);
};
exports.maxDecimals = maxDecimals;
function inferUnits(label) {
    const lowerLabel = label.toLowerCase();
    if (label.includes('%') || lowerLabel.includes('percentage'))
        return '%';
    if (label.includes('°') || lowerLabel.includes('celsius'))
        return '°';
    if (lowerLabel.includes('mebibytes'))
        return 'mebibytes';
    if (lowerLabel.includes('kibibytes'))
        return 'kibibytes';
    if (lowerLabel.includes('kilobits'))
        return 'kilobits';
    if (lowerLabel.includes('bytes'))
        return 'bytes';
    if (lowerLabel.includes('bits'))
        return 'bits';
    console.warn('Could not infer units from ' + label);
    return label;
}
function convertKmgt(input, units) {
    const unitsMap = [
        { threshold: bytes_constant_1.TiB, prefix: 'Tebi', shortName: 'TiB' },
        { threshold: bytes_constant_1.GiB, prefix: 'Gibi', shortName: 'GiB' },
        { threshold: bytes_constant_1.MiB, prefix: 'Mebi', shortName: 'MiB' },
        { threshold: bytes_constant_1.KiB, prefix: 'Kibi', shortName: 'KiB' },
    ];
    for (const unit of unitsMap) {
        if (input >= unit.threshold) {
            const value = input / unit.threshold;
            let { shortName } = unit;
            if (units === 'bits') {
                shortName = shortName.replace('i', '');
            }
            return { value, prefix: unit.prefix, shortName };
        }
    }
    return { value: input, prefix: '', shortName: 'B' };
}
function convertByKilobits(input) {
    let value = input;
    let suffix = 'b';
    if (input >= 1000000) {
        value = input / 1000000;
        suffix = 'Mb';
    }
    else if (input >= 1000) {
        value = input / 1000;
        suffix = 'kb';
    }
    return { value, suffix };
}
function convertByThousands(input) {
    let value = input;
    let suffix = '';
    if (input >= 1000000) {
        value = input / 1000000;
        suffix = 'm';
    }
    else if (input >= 1000) {
        value = input / 1000;
        suffix = 'k';
    }
    return { value, suffix };
}
function formatValue(value, units) {
    const dayInSeconds = 60 * 60 * 24;
    const days = value / dayInSeconds;
    const mebibytes = convertKmgt(value * bytes_constant_1.MiB, 'bytes');
    const kibibytes = convertKmgt(value * bytes_constant_1.KiB, 'bytes');
    const kilobits = convertByKilobits(value * 1000);
    const bytes = convertKmgt(value, units);
    const thousands = convertByThousands(value);
    if (typeof value !== 'number')
        return String(value);
    switch (units.toLowerCase()) {
        case 'seconds':
            return `${(0, exports.maxDecimals)(days, 1)} days`;
        case 'mebibytes':
            return `${(0, exports.maxDecimals)(mebibytes.value)} ${mebibytes.shortName}`;
        case 'kibibytes':
            return `${(0, exports.maxDecimals)(kibibytes.value)} ${kibibytes.shortName}`;
        case 'kilobits':
            return `${(0, exports.maxDecimals)(kilobits.value)} ${kilobits.suffix}`;
        case 'bits':
        case 'bytes':
            return `${(0, exports.maxDecimals)(bytes.value)} ${bytes.shortName}`;
        default:
            return `${(0, exports.maxDecimals)(thousands.value)}${thousands.suffix}`;
    }
}
function convertAggregations(input, labelY) {
    const output = Object.assign({}, input);
    const units = inferUnits(labelY);
    const keys = Object.keys(output.aggregations);
    keys.forEach((key) => {
        const values = output.aggregations[key];
        if (Array.isArray(values)) {
            values.forEach((value, index) => {
                const formattedValue = formatValue(value, units);
                const suffix = labelY.endsWith('/s') && formattedValue !== '0' ? '/s' : '';
                output.aggregations[key][index] = formattedValue + suffix;
            });
        }
        else {
            output.aggregations[key] = Object.values(values).map((value) => {
                const formattedValue = formatValue(value, units);
                const suffix = labelY.endsWith('/s') && formattedValue !== '0' ? '/s' : '';
                return formattedValue + suffix;
            });
        }
    });
    return output;
}
function optimizeLegend(input) {
    const output = Object.assign(Object.assign({}, input), { legend: [...input.legend] });
    if (output.legend.includes('time')) {
        output.legend.shift();
    }
    const replacements = {
        upsbatterycharge: () => 'Percent Charge',
        upsremainingbattery: () => 'Time remaining (Minutes)',
        load: (label) => label.replace(/load_/, ''),
        disktemp: () => 'Temperature',
        memory: (label) => label.replace(/memory-|_value/g, ''),
        swap: (label) => label.replace(/swap-|_value/g, ''),
        interface: (label) => label.replace(/if_|octets_/g, (match) => (match === 'octets_' ? 'octets ' : '')),
        nfsstat: (label) => label.replace(/nfsstat-|_value/g, ''),
        nfsstatbytes: (label) => label.replace(/nfsstat-|_bytes_value/g, ''),
        df: (label) => label.replace(/df_complex-|_value/g, ''),
        processes: (label) => label.replace(/ps_state-|_value/g, ''),
        uptime: (label) => label.replace(/_value/g, ''),
        ctl: (label) => label.replace(/disk_octets_/, ''),
        disk: (label) => label.replace(/disk_octets_/, ''),
        diskgeombusy: () => 'Busy',
        diskgeomlatency: (label) => label.replace(/geom_latency-/, ''),
        diskgeomopsrwd: (label) => label.replace(/geom_ops_rwd-/, ''),
        diskgeomqueue: (label) => label.replace(/geom_queue-/, ''),
    };
    if (replacements[output.name]) {
        const replaceFn = replacements[output.name];
        output.legend = output.legend.map((value) => (0, object_keys_to_human_readable_helper_1.toHumanReadableKey)(replaceFn(value)));
    }
    return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,