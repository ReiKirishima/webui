{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/reports-dashboard/utils/report.utils.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/reports-dashboard/utils/report.utils.ts"],"sourcesContent":["import {\n  TiB, GiB, MiB, KiB,\n} from 'app/constants/bytes.constant';\nimport { ReportingGraphName } from 'app/enums/reporting.enum';\nimport { toHumanReadableKey } from 'app/helpers/object-keys-to-human-readable.helper';\nimport { ReportingAggregationKeys, ReportingData } from 'app/interfaces/reporting.interface';\n\nexport function formatData(data: ReportingData): ReportingData {\n  const formattedData: ReportingData = { ...data };\n\n  if (\n    formattedData.name as ReportingGraphName === ReportingGraphName.NetworkInterface\n    && formattedData.aggregations\n  ) {\n    delete formattedData.aggregations.min;\n  }\n\n  if (formattedData.name as ReportingGraphName === ReportingGraphName.Cpu) {\n    formattedData.legend = [...formattedData.legend].reverse();\n\n    formattedData.data = (formattedData.data as number[][]).map((row) => [\n      row[0],\n      ...row.slice(1).reverse(),\n    ]);\n\n    if (formattedData.aggregations) {\n      formattedData.aggregations.min = [...formattedData.aggregations.min].reverse();\n      formattedData.aggregations.max = [...formattedData.aggregations.max].reverse();\n      formattedData.aggregations.mean = [...formattedData.aggregations.mean].reverse();\n    }\n  }\n\n  return formattedData;\n}\n\nexport const maxDecimals = (input: number, max = 2): number => {\n  const str = input.toString().split('.');\n  if (!str[1]) {\n    // Not a float\n    return input;\n  }\n  const decimals = str[1].length;\n  const output = decimals > max ? input.toFixed(max) : input;\n  const prepareInput = parseFloat(output as string);\n  return prepareInput < 1000 ? Number(prepareInput.toString().slice(0, 4)) : Math.round(prepareInput);\n};\n\nexport function inferUnits(label: string): string | undefined {\n  const lowerLabel = label.toLowerCase();\n\n  if (label.includes('%') || lowerLabel.includes('percentage')) return '%';\n  if (label.includes('°') || lowerLabel.includes('celsius')) return '°';\n  if (lowerLabel.includes('mebibytes')) return 'mebibytes';\n  if (lowerLabel.includes('kibibytes')) return 'kibibytes';\n  if (lowerLabel.includes('kilobits')) return 'kilobits';\n  if (lowerLabel.includes('bytes')) return 'bytes';\n  if (lowerLabel.includes('bits')) return 'bits';\n\n  console.warn('Could not infer units from ' + label);\n  return label;\n}\n\nexport function convertKmgt(input: number, units: string): { value: number; prefix: string; shortName: string } {\n  const unitsMap = [\n    { threshold: TiB, prefix: 'Tebi', shortName: 'TiB' },\n    { threshold: GiB, prefix: 'Gibi', shortName: 'GiB' },\n    { threshold: MiB, prefix: 'Mebi', shortName: 'MiB' },\n    { threshold: KiB, prefix: 'Kibi', shortName: 'KiB' },\n  ];\n\n  for (const unit of unitsMap) {\n    if (input >= unit.threshold) {\n      const value = input / unit.threshold;\n      let { shortName } = unit;\n      if (units === 'bits') {\n        shortName = shortName.replace('i', '');\n      }\n      return { value, prefix: unit.prefix, shortName };\n    }\n  }\n\n  return { value: input, prefix: '', shortName: 'B' };\n}\n\nexport function convertByKilobits(input: number): { value: number; suffix: string } {\n  let value = input;\n  let suffix = 'b';\n\n  if (input >= 1_000_000) {\n    value = input / 1_000_000;\n    suffix = 'Mb';\n  } else if (input >= 1_000) {\n    value = input / 1_000;\n    suffix = 'kb';\n  }\n\n  return { value, suffix };\n}\n\nexport function convertByThousands(input: number): { value: number; suffix: string } {\n  let value = input;\n  let suffix = '';\n\n  if (input >= 1_000_000) {\n    value = input / 1_000_000;\n    suffix = 'm';\n  } else if (input >= 1_000) {\n    value = input / 1_000;\n    suffix = 'k';\n  }\n\n  return { value, suffix };\n}\n\nexport function formatValue(value: number, units: string): string {\n  const dayInSeconds = 60 * 60 * 24;\n  const days = value / dayInSeconds;\n  const mebibytes = convertKmgt(value * MiB, 'bytes');\n  const kibibytes = convertKmgt(value * KiB, 'bytes');\n  const kilobits = convertByKilobits(value * 1000);\n  const bytes = convertKmgt(value, units);\n  const thousands = convertByThousands(value);\n\n  if (typeof value !== 'number') return String(value);\n\n  switch (units.toLowerCase()) {\n    case 'seconds':\n      return `${maxDecimals(days, 1)} days`;\n    case 'mebibytes':\n      return `${maxDecimals(mebibytes.value)} ${mebibytes.shortName}`;\n    case 'kibibytes':\n      return `${maxDecimals(kibibytes.value)} ${kibibytes.shortName}`;\n    case 'kilobits':\n      return `${maxDecimals(kilobits.value)} ${kilobits.suffix}`;\n    case 'bits':\n    case 'bytes':\n      return `${maxDecimals(bytes.value)} ${bytes.shortName}`;\n    default:\n      return `${maxDecimals(thousands.value)}${thousands.suffix}`;\n  }\n}\n\nexport function convertAggregations(input: ReportingData, labelY?: string): ReportingData {\n  const output = { ...input };\n  const units = inferUnits(labelY);\n  const keys = Object.keys(output.aggregations);\n\n  keys.forEach((key: ReportingAggregationKeys) => {\n    const values = output.aggregations[key];\n\n    if (Array.isArray(values)) {\n      values.forEach((value, index) => {\n        const formattedValue = formatValue(value as number, units);\n        const suffix = labelY.endsWith('/s') && formattedValue !== '0' ? '/s' : '';\n        (output.aggregations[key] as (string | number)[])[index] = formattedValue + suffix;\n      });\n    } else {\n      output.aggregations[key] = Object.values(values).map((value) => {\n        const formattedValue = formatValue(value as number, units);\n        const suffix = labelY.endsWith('/s') && formattedValue !== '0' ? '/s' : '';\n        return formattedValue + suffix;\n      });\n    }\n  });\n  return output;\n}\n\nexport function optimizeLegend(input: ReportingData): ReportingData {\n  const output = { ...input, legend: [...input.legend] };\n\n  if (output.legend.includes('time')) {\n    output.legend.shift();\n  }\n\n  const replacements: Record<string, (label: string) => string> = {\n    upsbatterycharge: () => 'Percent Charge',\n    upsremainingbattery: () => 'Time remaining (Minutes)',\n    load: (label) => label.replace(/load_/, ''),\n    disktemp: () => 'Temperature',\n    memory: (label) => label.replace(/memory-|_value/g, ''),\n    swap: (label) => label.replace(/swap-|_value/g, ''),\n    interface: (label) => label.replace(/if_|octets_/g, (match) => (match === 'octets_' ? 'octets ' : '')),\n    nfsstat: (label) => label.replace(/nfsstat-|_value/g, ''),\n    nfsstatbytes: (label) => label.replace(/nfsstat-|_bytes_value/g, ''),\n    df: (label) => label.replace(/df_complex-|_value/g, ''),\n    processes: (label) => label.replace(/ps_state-|_value/g, ''),\n    uptime: (label) => label.replace(/_value/g, ''),\n    ctl: (label) => label.replace(/disk_octets_/, ''),\n    disk: (label) => label.replace(/disk_octets_/, ''),\n    diskgeombusy: () => 'Busy',\n    diskgeomlatency: (label) => label.replace(/geom_latency-/, ''),\n    diskgeomopsrwd: (label) => label.replace(/geom_ops_rwd-/, ''),\n    diskgeomqueue: (label) => label.replace(/geom_queue-/, ''),\n  };\n\n  if (replacements[output.name]) {\n    const replaceFn = replacements[output.name];\n    output.legend = output.legend.map((value) => toHumanReadableKey(replaceFn(value)));\n  }\n\n  return output;\n}\n"],"version":3}