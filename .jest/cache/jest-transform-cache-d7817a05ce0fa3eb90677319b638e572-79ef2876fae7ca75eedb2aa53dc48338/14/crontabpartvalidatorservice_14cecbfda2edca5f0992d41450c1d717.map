{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/services/crontab-part-validator.service.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wCAA2C;AAE3C,8CAAuD;AACvD,wDAA0C;AAC1C,qGAAgG;AAEhG,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,mDAAW,CAAA;IACX,+CAAS,CAAA;IACT,6CAAQ,CAAA;AACV,CAAC,EAJW,WAAW,2BAAX,WAAW,QAItB;AAED,2CAA2C;AAIpC,IAAM,2BAA2B,GAAjC,MAAM,2BAA2B;IACtC,YACU,iBAAsC,EACtC,SAA2B;QAD3B,sBAAiB,GAAjB,iBAAiB,CAAqB;QACtC,cAAS,GAAT,SAAS,CAAkB;IAClC,CAAC;IAEJ,oBAAoB,CAAC,IAAiB;QACpC,MAAM,SAAS,GAAG,CAAC,OAAgC,EAA2B,EAAE;YAC9E,MAAM,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,KAAK,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;YAE5B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChC,MAAM,aAAa,GAAG,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAEtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;gBAC9C,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO;gBACL,WAAW,EAAE,IAAI;aAClB,CAAC;QACJ,CAAC,CAAC;QAEF,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC;IAC3G,CAAC;;AAxBU,kEAA2B;;;;;sCAA3B,2BAA2B;IAHvC,IAAA,iBAAU,EAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,2BAA2B,CAyBvC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/services/crontab-part-validator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as cronParser from 'cron-parser';\nimport { IxValidatorsService } from 'app/modules/forms/ix-forms/services/ix-validators.service';\n\nexport enum CrontabPart {\n  Minutes = 0,\n  Hours = 1,\n  Days = 2,\n}\n\n// TODO: Figure out how to limit to module.\n@Injectable({\n  providedIn: 'root',\n})\nexport class CrontabPartValidatorService {\n  constructor(\n    private validatorsService: IxValidatorsService,\n    private translate: TranslateService,\n  ) {}\n\n  crontabPartValidator(part: CrontabPart): ValidatorFn {\n    const validator = (control: AbstractControl<string>): ValidationErrors | null => {\n      const parts = (new Array(5)).fill('*');\n      parts[part] = control.value;\n\n      const crontab = parts.join(' ');\n      const parsingResult = cronParser.parseString(crontab);\n\n      if (!Object.keys(parsingResult.errors).length) {\n        return {};\n      }\n\n      return {\n        crontabPart: true,\n      };\n    };\n\n    return this.validatorsService.withMessage(validator, this.translate.instant('Incorrect crontab value.'));\n  }\n}\n"],"version":3}