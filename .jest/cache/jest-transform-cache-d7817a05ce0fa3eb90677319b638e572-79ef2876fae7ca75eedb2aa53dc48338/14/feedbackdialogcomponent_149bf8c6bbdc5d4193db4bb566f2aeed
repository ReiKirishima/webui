8b727725f07e7e2dc23d1976b7bbf2bc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackDialogComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const options_helper_1 = require("app/helpers/options.helper");
const feedback_interface_1 = require("app/modules/feedback/interfaces/feedback.interface");
const feedback_service_1 = require("app/modules/feedback/services/feedback.service");
const system_general_service_1 = require("app/services/system-general.service");
let FeedbackDialogComponent = class FeedbackDialogComponent {
    get isReview() {
        return this.typeControl.value === feedback_interface_1.FeedbackType.Review;
    }
    constructor(feedbackService, translate, cdr, systemGeneralService, dialogRef, requestedType) {
        this.feedbackService = feedbackService;
        this.translate = translate;
        this.cdr = cdr;
        this.systemGeneralService = systemGeneralService;
        this.dialogRef = dialogRef;
        this.requestedType = requestedType;
        this.isLoading = false;
        this.isLoadingTypes = false;
        this.typeControl = new forms_1.FormControl(undefined);
        this.feedbackTypeOptions$ = (0, rxjs_1.of)((0, options_helper_1.mapToOptions)(feedback_interface_1.feedbackTypesLabels, this.translate));
        this.isEnterprise$ = this.systemGeneralService.isEnterprise$;
        this.allowedTypes = [];
    }
    ngOnInit() {
        this.loadFeedbackTypes();
    }
    onIsLoadingChange(isLoading) {
        this.isLoading = isLoading;
        if (isLoading) {
            this.typeControl.disable();
            this.dialogRef.disableClose = true;
        }
        else {
            this.typeControl.enable();
            this.dialogRef.disableClose = false;
        }
        this.cdr.markForCheck();
    }
    loadFeedbackTypes() {
        this.isLoading = true;
        this.isLoadingTypes = true;
        this.cdr.markForCheck();
        this.feedbackService.checkIfReviewAllowed()
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((isReviewAllowed) => {
            this.allowedTypes = [];
            if (isReviewAllowed) {
                this.allowedTypes.push(feedback_interface_1.FeedbackType.Review);
            }
            this.allowedTypes.push(feedback_interface_1.FeedbackType.Bug);
            const allowedOptions = this.allowedTypes.map((type) => ({
                label: this.translate.instant(feedback_interface_1.feedbackTypesLabels.get(type)),
                value: type,
            }));
            this.feedbackTypeOptions$ = (0, rxjs_1.of)(allowedOptions);
            this.pickType();
            this.isLoading = false;
            this.isLoadingTypes = false;
            this.cdr.markForCheck();
        });
    }
    pickType() {
        if (this.requestedType && this.allowedTypes.includes(this.requestedType)) {
            this.typeControl.setValue(this.requestedType);
        }
        else {
            this.typeControl.setValue(this.allowedTypes[0]);
        }
    }
};
exports.FeedbackDialogComponent = FeedbackDialogComponent;
FeedbackDialogComponent.ctorParameters = () => [
    { type: feedback_service_1.FeedbackService },
    { type: core_2.TranslateService },
    { type: core_1.ChangeDetectorRef },
    { type: system_general_service_1.SystemGeneralService },
    { type: dialog_1.MatDialogRef },
    { type: feedback_interface_1.FeedbackType, decorators: [{ type: core_1.Inject, args: [dialog_1.MAT_DIALOG_DATA,] }] }
];
exports.FeedbackDialogComponent = FeedbackDialogComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-feedback-dialog',
        template: require("./feedback-dialog.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], FeedbackDialogComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,