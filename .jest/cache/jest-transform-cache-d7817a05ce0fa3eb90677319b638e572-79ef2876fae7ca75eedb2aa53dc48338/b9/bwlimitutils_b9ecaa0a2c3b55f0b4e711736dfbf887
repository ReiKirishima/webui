d43ae67f6db49296829783804a5b4bd4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareBwlimit = prepareBwlimit;
const bytes_constant_1 = require("app/constants/bytes.constant");
const byteMap = {
    P: bytes_constant_1.PiB,
    T: bytes_constant_1.TiB,
    G: bytes_constant_1.GiB,
    M: bytes_constant_1.MiB,
    K: bytes_constant_1.KiB,
    B: 1,
};
function getByte(data) {
    let unit = 'B'; // default unit
    let index = -1;
    for (let i = 0; i < data.length; i++) {
        if (Object.keys(byteMap).includes(data[i].toUpperCase())) {
            unit = data[i].toUpperCase();
            index = i;
            break;
        }
    }
    const restUnit = data.slice(index + 1, data.length).toUpperCase();
    if (index === -1 && Number(data)) {
        return Number(data) * byteMap[unit];
    }
    if (restUnit === 'IB' || restUnit === 'B' || restUnit === '') {
        if (unit === 'B' && restUnit !== '') {
            return -1;
        }
        return Number(data.slice(0, index)) * byteMap[unit];
    }
    return -1;
}
function prepareBwlimit(bwlimit) {
    const bwlimtResult = [];
    if (!(bwlimit === null || bwlimit === void 0 ? void 0 : bwlimit.length)) {
        return bwlimtResult;
    }
    for (const limit of bwlimit) {
        const sublimitArr = limit.split(/\s*,\s*/);
        if (sublimitArr.length === 1 && bwlimit.length === 1 && !sublimitArr[0].includes(':')) {
            sublimitArr.unshift('00:00');
        }
        if (sublimitArr[1] && sublimitArr[1] !== 'off') {
            if (sublimitArr[1].toLowerCase().endsWith('/s')) {
                sublimitArr[1] = sublimitArr[1].substring(0, sublimitArr[1].length - 2);
            }
            if (getByte(sublimitArr[1]) !== -1) {
                sublimitArr[1] = getByte(sublimitArr[1]).toFixed(0);
            }
        }
        const subLimit = {
            time: sublimitArr[0],
            bandwidth: sublimitArr[1] === 'off' ? null : sublimitArr[1],
        };
        bwlimtResult.push(subLimit);
    }
    return bwlimtResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2hlbHBlcnMvYndsaW1pdC51dGlscy50cyIsIm1hcHBpbmdzIjoiOztBQXVDQSx3Q0E2QkM7QUFwRUQsaUVBR3NDO0FBR3RDLE1BQU0sT0FBTyxHQUFHO0lBQ2QsQ0FBQyxFQUFFLG9CQUFHO0lBQ04sQ0FBQyxFQUFFLG9CQUFHO0lBQ04sQ0FBQyxFQUFFLG9CQUFHO0lBQ04sQ0FBQyxFQUFFLG9CQUFHO0lBQ04sQ0FBQyxFQUFFLG9CQUFHO0lBQ04sQ0FBQyxFQUFFLENBQUM7Q0FDTCxDQUFDO0FBRUYsU0FBUyxPQUFPLENBQUMsSUFBWTtJQUMzQixJQUFJLElBQUksR0FBeUIsR0FBRyxDQUFDLENBQUMsZUFBZTtJQUNyRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3pELElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUEwQixDQUFDO1lBQ3JELEtBQUssR0FBRyxDQUFDLENBQUM7WUFDVixNQUFNO1FBQ1IsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xFLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxHQUFHLElBQUksUUFBUSxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQzdELElBQUksSUFBSSxLQUFLLEdBQUcsSUFBSSxRQUFRLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDcEMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNaLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLENBQUM7QUFFRCxTQUFnQixjQUFjLENBQUMsT0FBaUI7SUFDOUMsTUFBTSxZQUFZLEdBQW9CLEVBQUUsQ0FBQztJQUV6QyxJQUFJLENBQUMsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsTUFBTSxDQUFBLEVBQUUsQ0FBQztRQUNyQixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM1QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNDLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdEYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBQ0QsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQy9DLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUNoRCxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxRSxDQUFDO1lBQ0QsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDbkMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLFFBQVEsR0FBa0I7WUFDOUIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDcEIsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUM1RCxDQUFDO1FBRUYsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvaGVscGVycy9id2xpbWl0LnV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFRpQiwgR2lCLCBNaUIsIEtpQixcbiAgUGlCLFxufSBmcm9tICdhcHAvY29uc3RhbnRzL2J5dGVzLmNvbnN0YW50JztcbmltcG9ydCB7IEJ3TGltaXRVcGRhdGUgfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9jbG91ZC1zeW5jLXRhc2suaW50ZXJmYWNlJztcblxuY29uc3QgYnl0ZU1hcCA9IHtcbiAgUDogUGlCLFxuICBUOiBUaUIsXG4gIEc6IEdpQixcbiAgTTogTWlCLFxuICBLOiBLaUIsXG4gIEI6IDEsXG59O1xuXG5mdW5jdGlvbiBnZXRCeXRlKGRhdGE6IHN0cmluZyk6IG51bWJlciB7XG4gIGxldCB1bml0OiBrZXlvZiB0eXBlb2YgYnl0ZU1hcCA9ICdCJzsgLy8gZGVmYXVsdCB1bml0XG4gIGxldCBpbmRleCA9IC0xO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChPYmplY3Qua2V5cyhieXRlTWFwKS5pbmNsdWRlcyhkYXRhW2ldLnRvVXBwZXJDYXNlKCkpKSB7XG4gICAgICB1bml0ID0gZGF0YVtpXS50b1VwcGVyQ2FzZSgpIGFzIGtleW9mIHR5cGVvZiBieXRlTWFwO1xuICAgICAgaW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3RVbml0ID0gZGF0YS5zbGljZShpbmRleCArIDEsIGRhdGEubGVuZ3RoKS50b1VwcGVyQ2FzZSgpO1xuICBpZiAoaW5kZXggPT09IC0xICYmIE51bWJlcihkYXRhKSkge1xuICAgIHJldHVybiBOdW1iZXIoZGF0YSkgKiBieXRlTWFwW3VuaXRdO1xuICB9XG4gIGlmIChyZXN0VW5pdCA9PT0gJ0lCJyB8fCByZXN0VW5pdCA9PT0gJ0InIHx8IHJlc3RVbml0ID09PSAnJykge1xuICAgIGlmICh1bml0ID09PSAnQicgJiYgcmVzdFVuaXQgIT09ICcnKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHJldHVybiBOdW1iZXIoZGF0YS5zbGljZSgwLCBpbmRleCkpICogYnl0ZU1hcFt1bml0XTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQndsaW1pdChid2xpbWl0OiBzdHJpbmdbXSk6IEJ3TGltaXRVcGRhdGVbXSB7XG4gIGNvbnN0IGJ3bGltdFJlc3VsdDogQndMaW1pdFVwZGF0ZVtdID0gW107XG5cbiAgaWYgKCFid2xpbWl0Py5sZW5ndGgpIHtcbiAgICByZXR1cm4gYndsaW10UmVzdWx0O1xuICB9XG5cbiAgZm9yIChjb25zdCBsaW1pdCBvZiBid2xpbWl0KSB7XG4gICAgY29uc3Qgc3VibGltaXRBcnIgPSBsaW1pdC5zcGxpdCgvXFxzKixcXHMqLyk7XG4gICAgaWYgKHN1YmxpbWl0QXJyLmxlbmd0aCA9PT0gMSAmJiBid2xpbWl0Lmxlbmd0aCA9PT0gMSAmJiAhc3VibGltaXRBcnJbMF0uaW5jbHVkZXMoJzonKSkge1xuICAgICAgc3VibGltaXRBcnIudW5zaGlmdCgnMDA6MDAnKTtcbiAgICB9XG4gICAgaWYgKHN1YmxpbWl0QXJyWzFdICYmIHN1YmxpbWl0QXJyWzFdICE9PSAnb2ZmJykge1xuICAgICAgaWYgKHN1YmxpbWl0QXJyWzFdLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoJy9zJykpIHtcbiAgICAgICAgc3VibGltaXRBcnJbMV0gPSBzdWJsaW1pdEFyclsxXS5zdWJzdHJpbmcoMCwgc3VibGltaXRBcnJbMV0ubGVuZ3RoIC0gMik7XG4gICAgICB9XG4gICAgICBpZiAoZ2V0Qnl0ZShzdWJsaW1pdEFyclsxXSkgIT09IC0xKSB7XG4gICAgICAgIHN1YmxpbWl0QXJyWzFdID0gZ2V0Qnl0ZShzdWJsaW1pdEFyclsxXSkudG9GaXhlZCgwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3ViTGltaXQ6IEJ3TGltaXRVcGRhdGUgPSB7XG4gICAgICB0aW1lOiBzdWJsaW1pdEFyclswXSxcbiAgICAgIGJhbmR3aWR0aDogc3VibGltaXRBcnJbMV0gPT09ICdvZmYnID8gbnVsbCA6IHN1YmxpbWl0QXJyWzFdLFxuICAgIH07XG5cbiAgICBid2xpbXRSZXN1bHQucHVzaChzdWJMaW1pdCk7XG4gIH1cblxuICByZXR1cm4gYndsaW10UmVzdWx0O1xufVxuIl0sInZlcnNpb24iOjN9