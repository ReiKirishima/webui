c1dea8af38fe12655a96da68594416d5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageService = void 0;
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const window_helper_1 = require("app/helpers/window.helper");
const ws_service_1 = require("app/services/ws.service");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
let LanguageService = class LanguageService {
    constructor(translate, ws, store$, window) {
        this.translate = translate;
        this.ws = ws;
        this.store$ = store$;
        this.window = window;
        this.currentLanguage = null;
        this.availableLangs = [
            {
                code: 'af',
                name: 'Afrikaans',
            },
            {
                code: 'ar',
                name: 'Arabic',
            },
            {
                code: 'ast',
                name: 'Asturian',
            },
            {
                code: 'az',
                name: 'Azerbaijani',
            },
            {
                code: 'bg',
                name: 'Bulgarian',
            },
            {
                code: 'be',
                name: 'Belarusian',
            },
            {
                code: 'bn',
                name: 'Bengali',
            },
            {
                code: 'br',
                name: 'Breton',
            },
            {
                code: 'bs',
                name: 'Bosnian',
            },
            {
                code: 'ca',
                name: 'Catalan',
            },
            {
                code: 'cs',
                name: 'Czech',
            },
            {
                code: 'cy',
                name: 'Welsh',
            },
            {
                code: 'da',
                name: 'Danish',
            },
            {
                code: 'de',
                name: 'Deutsch',
            },
            {
                code: 'dsb',
                name: 'Lower Sorbian',
            },
            {
                code: 'el',
                name: 'Greek',
            },
            {
                name: 'English',
                code: 'en',
            },
            {
                code: 'en-au',
                name: 'Australian English',
            },
            {
                code: 'en-gb',
                name: 'British English',
            },
            {
                code: 'eo',
                name: 'Esperanto',
            },
            {
                name: 'Español',
                code: 'es',
            },
            {
                code: 'es-ar',
                name: 'Argentinian Spanish',
            },
            {
                code: 'es-co',
                name: 'Colombian Spanish',
            },
            {
                code: 'es-mx',
                name: 'Mexican Spanish',
            },
            {
                code: 'es-ni',
                name: 'Nicaraguan Spanish',
            },
            {
                code: 'es-ve',
                name: 'Venezuelan Spanish',
            },
            {
                code: 'et',
                name: 'Estonian',
            },
            {
                code: 'eu',
                name: 'Basque',
            },
            {
                code: 'fa',
                name: 'Persian',
            },
            {
                code: 'fi',
                name: 'Finnish',
            },
            {
                code: 'fr',
                name: 'Français',
            },
            {
                code: 'fy',
                name: 'Frisian',
            },
            {
                code: 'ga',
                name: 'Irish',
            },
            {
                code: 'gd',
                name: 'Scottish Gaelic',
            },
            {
                code: 'gl',
                name: 'Galician',
            },
            {
                code: 'he',
                name: 'Hebrew',
            },
            {
                code: 'hi',
                name: 'Hindi',
            },
            {
                code: 'hr',
                name: 'Croatian',
            },
            {
                code: 'hsb',
                name: 'Upper Sorbian',
            },
            {
                code: 'hu',
                name: 'Hungarian',
            },
            {
                code: 'ia',
                name: 'Interlingua',
            },
            {
                code: 'id',
                name: 'Indonesian',
            },
            {
                code: 'io',
                name: 'Ido',
            },
            {
                code: 'is',
                name: 'Icelandic',
            },
            {
                code: 'it',
                name: 'Italiano',
            },
            {
                code: 'ja',
                name: 'Japanese',
            },
            {
                code: 'ka',
                name: 'Georgian',
            },
            {
                code: 'kk',
                name: 'Kazakh',
            },
            {
                code: 'km',
                name: 'Khmer',
            },
            {
                code: 'kn',
                name: 'Kannada',
            },
            {
                code: 'ko',
                name: 'Korean',
            },
            {
                code: 'lb',
                name: 'Luxembourgish',
            },
            {
                code: 'lt',
                name: 'Lithuanian',
            },
            {
                code: 'lv',
                name: 'Latvian',
            },
            {
                code: 'mk',
                name: 'Macedonian',
            },
            {
                code: 'ml',
                name: 'Malayalam',
            },
            {
                code: 'mn',
                name: 'Mongolian',
            },
            {
                code: 'mr',
                name: 'Marathi',
            },
            {
                code: 'my',
                name: 'Burmese',
            },
            {
                code: 'nb',
                name: 'Norwegian Bokmål',
            },
            {
                code: 'ne',
                name: 'Nepali',
            },
            {
                code: 'nl',
                name: 'Dutch',
            },
            {
                code: 'nn',
                name: 'Norwegian Nynorsk',
            },
            {
                code: 'os',
                name: 'Ossetic',
            },
            {
                code: 'pa',
                name: 'Punjabi',
            },
            {
                code: 'pl',
                name: 'Polish',
            },
            {
                code: 'pt',
                name: 'Portuguese',
            },
            {
                code: 'pt-br',
                name: 'Brazilian Portuguese',
            },
            {
                code: 'ro',
                name: 'Romanian',
            },
            {
                code: 'ru',
                name: 'Russian',
            },
            {
                code: 'sk',
                name: 'Slovak',
            },
            {
                code: 'sl',
                name: 'Slovenian',
            },
            {
                code: 'sq',
                name: 'Albanian',
            },
            {
                code: 'sr',
                name: 'Serbian',
            },
            {
                code: 'sr-latn',
                name: 'Serbian Latin',
            },
            {
                code: 'sv',
                name: 'Swedish',
            },
            {
                code: 'sw',
                name: 'Swahili',
            },
            {
                code: 'ta',
                name: 'Tamil',
            },
            {
                code: 'te',
                name: 'Telugu',
            },
            {
                code: 'th',
                name: 'Thai',
            },
            {
                code: 'tr',
                name: 'Turkish',
            },
            {
                code: 'tt',
                name: 'Tatar',
            },
            {
                code: 'udm',
                name: 'Udmurt',
            },
            {
                code: 'uk',
                name: 'Ukrainian',
            },
            {
                code: 'ur',
                name: 'Urdu',
            },
            {
                code: 'vi',
                name: 'Vietnamese',
            },
            {
                code: 'zh-hant',
                name: 'Traditional Chinese',
            },
            {
                name: '中文',
                code: 'zh-hans',
            },
        ];
    }
    setLanguageFromBrowser() {
        if (this.currentLanguage) {
            return (0, rxjs_1.of)(true);
        }
        if (this.window.localStorage.language) {
            return this.setLanguage(this.window.localStorage.getItem('language'));
        }
        const browserLang = this.translate.getBrowserLang();
        return this.setLanguage(browserLang);
    }
    setLanguageFromMiddleware() {
        return this.store$.select(system_config_selectors_1.selectGeneralConfig).pipe((0, operators_1.switchMap)((config) => {
            if (config === null || config === void 0 ? void 0 : config.language) {
                return this.setLanguage(config.language);
            }
            return this.setLanguageFromBrowser();
        }));
    }
    /**
     * @return Observable that completes when translations have been loaded.
     */
    setLanguage(lang) {
        if ((0, lodash_es_1.find)(this.availableLangs, { code: lang })) {
            this.currentLanguage = lang;
        }
        else {
            this.currentLanguage = 'en';
        }
        return this.translate.use(this.currentLanguage).pipe((0, operators_1.map)(() => true));
    }
};
exports.LanguageService = LanguageService;
LanguageService.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: ws_service_1.WebSocketService },
    { type: store_1.Store },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.LanguageService = LanguageService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({ providedIn: 'root' })
], LanguageService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,