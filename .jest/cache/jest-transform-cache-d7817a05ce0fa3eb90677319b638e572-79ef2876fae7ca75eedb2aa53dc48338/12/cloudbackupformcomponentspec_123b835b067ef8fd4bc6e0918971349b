843dbaa5cb3b878547994bfd4708f46d
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const cloudsync_provider_enum_1 = require("app/enums/cloudsync-provider.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const cloud_credentials_select_component_1 = require("app/modules/forms/custom-selects/cloud-credentials-select/cloud-credentials-select.component");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const scheduler_module_1 = require("app/modules/scheduler/scheduler.module");
const cloud_backup_form_component_1 = require("app/pages/data-protection/cloud-backup/cloud-backup-form/cloud-backup-form.component");
const cloudsync_wizard_testing_utils_1 = require("app/pages/data-protection/cloudsync/cloudsync-wizard/cloudsync-wizard.testing.utils");
const transfer_mode_explanation_component_1 = require("app/pages/data-protection/cloudsync/transfer-mode-explanation/transfer-mode-explanation.component");
const cloud_credential_service_1 = require("app/services/cloud-credential.service");
const filesystem_service_1 = require("app/services/filesystem.service");
const ix_chained_slide_in_service_1 = require("app/services/ix-chained-slide-in.service");
const ws_service_1 = require("app/services/ws.service");
describe('CloudBackupFormComponent', () => {
    const storjCreds = {
        id: 2,
        name: 'Storj iX',
        provider: cloudsync_provider_enum_1.CloudSyncProviderName.Storj,
        attributes: {
            client_id: 'test-client-id',
            client_secret: 'test-client-secret',
            token: 'test-token',
        },
    };
    const existingTask = {
        id: 1,
        description: 'sdf',
        path: '/mnt/my pool',
        attributes: {
            folder: '/My Folder',
            chunk_size: 48,
        },
        pre_script: '',
        post_script: '',
        snapshot: false,
        bwlimit: [],
        include: [],
        exclude: [],
        transfers: 5,
        args: '',
        enabled: true,
        job: null,
        password: '1234',
        keep_last: 2,
        credentials: storjCreds,
        schedule: {
            minute: '0',
            hour: '0',
            dom: '*',
            month: '*',
            dow: 'sun',
        },
        locked: false,
    };
    let loader;
    let spectator;
    const getData = jest.fn(() => existingTask);
    const chainedComponentRef = {
        close: jest.fn(),
        getData: jest.fn(() => undefined),
        swap: jest.fn(),
    };
    const createComponent = (0, jest_1.createComponentFactory)({
        component: cloud_backup_form_component_1.CloudBackupFormComponent,
        imports: [
            scheduler_module_1.SchedulerModule,
            cloud_credentials_select_component_1.CloudCredentialsSelectComponent,
            forms_1.ReactiveFormsModule,
        ],
        declarations: [
            transfer_mode_explanation_component_1.TransferModeExplanationComponent,
        ],
        providers: [
            (0, mock_auth_utils_1.mockAuth)(),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('cloud_backup.create', existingTask),
                (0, mock_websocket_utils_1.mockCall)('cloud_backup.update', existingTask),
                (0, mock_websocket_utils_1.mockCall)('cloudsync.create_bucket'),
            ]),
            (0, jest_1.mockProvider)(ix_chained_slide_in_service_1.IxChainedSlideInService, {
                open: jest.fn(() => (0, rxjs_1.of)()),
                components$: (0, rxjs_1.of)([]),
            }),
            (0, jest_1.mockProvider)(cloud_credential_service_1.CloudCredentialService, {
                getCloudSyncCredentials: jest.fn(() => (0, rxjs_1.of)([cloudsync_wizard_testing_utils_1.googlePhotosCreds, storjCreds])),
                getProviders: jest.fn(() => (0, rxjs_1.of)([cloudsync_wizard_testing_utils_1.storjProvider, cloudsync_wizard_testing_utils_1.googlePhotosProvider])),
                getBuckets: jest.fn(() => (0, rxjs_1.of)([{ Name: 'bucket1', Path: 'path_to_bucket1', Enabled: true }])),
            }),
            (0, jest_1.mockProvider)(filesystem_service_1.FilesystemService),
            (0, jest_1.mockProvider)(chained_component_ref_1.ChainedRef, chainedComponentRef),
        ],
    });
    describe('adds a new cloud backup', () => {
        beforeEach(() => {
            spectator = createComponent();
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        });
        it('adds a new cloud backup task and creates a new bucket', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                'Source Path': '/mnt/my pool 2',
                Name: 'Cloud Backup Task With New Bucket',
                Password: 'qwerty',
                Credentials: 'Storj iX (Storj)',
                'Keep Last': 5,
                Folder: '/',
                Bucket: 'Add new',
                'New Bucket Name': 'brand-new-bucket',
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenNthCalledWith(1, 'cloudsync.create_bucket', [
                2,
                'brand-new-bucket',
            ]);
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenNthCalledWith(2, 'cloud_backup.create', [{
                    args: '',
                    attributes: { folder: '/', bucket: 'brand-new-bucket' },
                    bwlimit: [],
                    credentials: 2,
                    description: 'Cloud Backup Task With New Bucket',
                    enabled: true,
                    exclude: [],
                    include: [],
                    keep_last: 5,
                    password: 'qwerty',
                    path: '/mnt/my pool 2',
                    post_script: '',
                    pre_script: '',
                    schedule: {
                        dom: '*',
                        dow: '*',
                        hour: '0',
                        minute: '0',
                        month: '*',
                    },
                    snapshot: false,
                    transfers: null,
                }]);
            expect(chainedComponentRef.close).toHaveBeenCalledWith({ response: existingTask, error: null });
        }));
        it('adds a new cloud backup task when new form is saved', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                'Source Path': '/mnt/my pool 2',
                Name: 'New Cloud Backup Task',
                Password: 'qwerty',
                Credentials: 'Storj iX (Storj)',
                'Keep Last': 3,
                Folder: '/',
                Enabled: false,
                Transfers: 22,
                Bucket: 'bucket1',
                'Take Snapshot': true,
                Exclude: ['/test'],
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenLastCalledWith('cloud_backup.create', [{
                    args: '',
                    attributes: { folder: '/', bucket: 'path_to_bucket1' },
                    bwlimit: [],
                    credentials: 2,
                    description: 'New Cloud Backup Task',
                    enabled: false,
                    exclude: ['/test'],
                    include: [],
                    keep_last: 3,
                    password: 'qwerty',
                    path: '/mnt/my pool 2',
                    post_script: '',
                    pre_script: '',
                    schedule: {
                        dom: '*',
                        dow: '*',
                        hour: '0',
                        minute: '0',
                        month: '*',
                    },
                    snapshot: true,
                    transfers: 22,
                }]);
            expect(chainedComponentRef.close).toHaveBeenCalledWith({ response: existingTask, error: null });
        }));
    });
    describe('edits an existing cloud backup', () => {
        beforeEach(() => {
            spectator = createComponent({
                providers: [
                    (0, jest_1.mockProvider)(chained_component_ref_1.ChainedRef, Object.assign(Object.assign({}, chainedComponentRef), { getData })),
                ],
            });
            loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        });
        it('shows values for an existing cloud backup task when it is open for edit', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            expect(yield form.getValues()).toEqual({
                'Bandwidth Limit': [],
                Bucket: '',
                Credentials: 'Storj iX (Storj)',
                Enabled: true,
                Exclude: [],
                Name: 'sdf',
                Folder: '/My Folder',
                'Keep Last': '2',
                Password: '1234',
                'Post-script': '',
                'Pre-script': '',
                Schedule: 'Weekly (0 0 * * sun)  On Sundays at 00:00 (12:00 AM)',
                'Source Path': '/mnt/my pool',
                'Take Snapshot': false,
                Transfers: '5',
            });
            expect(spectator.component.form.value).toEqual({
                args: '',
                bucket: '',
                bwlimit: [],
                credentials: 2,
                description: 'sdf',
                enabled: true,
                exclude: [],
                folder: '/My Folder',
                keep_last: 2,
                password: '1234',
                path: '/mnt/my pool',
                post_script: '',
                pre_script: '',
                schedule: '0 0 * * sun',
                snapshot: false,
                transfers: 5,
            });
        }));
        it('saves updated cloud backup task when form opened for edit is saved', () => __awaiter(void 0, void 0, void 0, function* () {
            const form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
            yield form.fillForm({
                Name: 'Edited description',
                Password: 'qwerty123',
                Bucket: 'bucket1',
                'Source Path': '/mnt/path1',
                'Bandwidth Limit': ['00:00,10G', '12:00,20M', '18:00,10K', '20:00,off'],
            });
            const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
            yield saveButton.click();
            expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenLastCalledWith('cloud_backup.update', [1, {
                    args: '',
                    attributes: {
                        folder: '/My Folder',
                        bucket: 'path_to_bucket1',
                    },
                    bwlimit: [
                        {
                            bandwidth: '10737418240',
                            time: '00:00',
                        },
                        {
                            bandwidth: '20971520',
                            time: '12:00',
                        },
                        {
                            bandwidth: '10240',
                            time: '18:00',
                        },
                        {
                            bandwidth: null,
                            time: '20:00',
                        },
                    ],
                    credentials: 2,
                    description: 'Edited description',
                    enabled: true,
                    exclude: [],
                    include: [],
                    keep_last: 2,
                    password: 'qwerty123',
                    path: '/mnt/path1',
                    post_script: '',
                    pre_script: '',
                    schedule: {
                        dom: '*',
                        dow: 'sun',
                        hour: '0',
                        minute: '0',
                        month: '*',
                    },
                    snapshot: false,
                    transfers: 5,
                }]);
            expect(chainedComponentRef.close).toHaveBeenCalledWith({ response: existingTask, error: null });
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,