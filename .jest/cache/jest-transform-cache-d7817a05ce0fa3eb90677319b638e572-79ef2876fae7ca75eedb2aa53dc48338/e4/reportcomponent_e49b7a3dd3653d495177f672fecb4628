9d73b31accdb1a62bb078ceecf3ff018
module.exports="<div class=\"report\" ngClass.xs=\"double-height xs\">\n  <div\n    class=\"card-container\"\n    (mouseenter)=\"setChartInteractive(true)\"\n    (mouseleave)=\"setChartInteractive(false)\"\n  >\n    <mat-card class=\"card\" [class.loading]=\"!isReady\">\n      @if (isReady) {\n        <mat-toolbar-row class=\"mat-card-toolbar toolbar\">\n          <mat-card-title class=\"title\">\n            <h3 class=\"mat-card-title-text\">{{ reportTitle | translate }}</h3>\n          </mat-card-title>\n          <!-- Controls/Tools -->\n          <div class=\"line-chart-tools-wrapper\">\n            @if (localControls && !report?.errorConf) {\n              <div class=\"line-chart-tools\">\n                <div class=\"steps-group\" aria-label=\"Steps\">\n                  <button\n                    mat-button\n                    [disabled]=\"stepBackDisabled\"\n                    [matTooltip]=\"'Step Back' | translate\"\n                    [matTooltipShowDelay]=\"1000\"\n                    [ixTest]=\"['steps', 'back']\"\n                    (click)=\"stepBack()\"\n                  >\n                    <ix-icon name=\"mdi-rewind\"></ix-icon>\n                  </button>\n                  <button\n                    mat-button\n                    [disabled]=\"stepForwardDisabled\"\n                    [matTooltip]=\"'Step Forward' | translate\"\n                    [matTooltipShowDelay]=\"1000\"\n                    [ixTest]=\"['steps', 'forward']\"\n                    (click)=\"stepForward()\"\n                  >\n                    <ix-icon name=\"mdi-fast-forward\"></ix-icon>\n                  </button>\n                </div>\n\n                <div class=\"zoom-group\" aria-label=\"Zoom Level\">\n                  <button\n                    mat-button\n                    [disabled]=\"zoomLevelIndex === zoomLevelMin\"\n                    [matTooltip]=\"'Zoom Out' | translate\"\n                    [ixTest]=\"['zoom', 'out']\"\n                    (click)=\"timeZoomOut()\"\n                    ><ix-icon name=\"mdi-magnify-minus\"></ix-icon>\n                  </button>\n\n                  <button\n                    mat-button\n                    [disabled]=\"zoomLevelIndex === zoomLevelMax && stepForwardDisabled && !customZoom\"\n                    [matTooltip]=\"'Reset Zoom' | translate\"\n                    [ixTest]=\"['zoom', 'reset']\"\n                    (click)=\"timeZoomReset()\"\n                  >\n                    {{ currentZoomLevel | mapValue: zoomLevelLabels | translate }}\n                  </button>\n\n                  <button\n                    mat-button\n                    [disabled]=\"zoomLevelIndex === zoomLevelMax\"\n                    [matTooltip]=\"'Zoom In' | translate\"\n                    [ixTest]=\"['zoom', 'in']\"\n                    (click)=\"timeZoomIn()\"\n                    >\n                      <ix-icon name=\"mdi-magnify-plus\"></ix-icon>\n                  </button>\n                  </div>\n                </div>\n              }\n            </div>\n          </mat-toolbar-row>\n        }\n\n      @if (isReady && !report?.errorConf) {\n        <mat-card-content class=\"card-content\">\n          <div class=\"chart-wrapper-outer\">\n            <div class=\"chart-wrapper\">\n              <ix-linechart\n                [chartId]=\"chartId\"\n                [chartColors]=\"chartColors\"\n                [data]=\"data\"\n                [stacked]=\"isStacked\"\n                [title]=\"report.title\"\n                [timezone]=\"timezone\"\n                [report]=\"report\"\n                [labelY]=\"report.vertical_label || ''\"\n                (zoomChange)=\"onZoomChange($event)\"\n              ></ix-linechart>\n            </div>\n\n            <div class=\"legend-wrapper timestamps\">\n              @if (currentStartDate) {\n                <h4 class=\"legend-timestamp\">\n                  <strong>{{ 'Start' | translate }}:</strong>\n                  <span class=\"font-normal\">\n                    <ix-date [date]=\"currentStartDate\"></ix-date>\n                  </span>\n                </h4>\n              }\n              @if (currentEndDate) {\n                <h4 class=\"legend-timestamp\">\n                  <strong>{{ 'End' | translate }}:</strong>\n                  <span class=\"font-normal\">\n                    <ix-date [date]=\"currentEndDate\"></ix-date>\n                  </span>\n                </h4>\n              }\n            </div>\n          </div>\n\n          <section #legendElement class=\"legend\">\n            @if (report && data?.legend) {\n              <div class=\"legend-timestamp\">\n                @if (data && legendData?.xHTML && shouldShowLegendValue) {\n                  <h4>\n                    <strong>{{ 'Time' | translate }}:</strong>\n                    @if (legendData?.xHTML) {\n                      <span class=\"font-normal\">\n                        <ix-date [date]=\"getDateFromString(legendData.xHTML)\"></ix-date>\n                      </span>\n                    }\n                  </h4>\n                }\n              </div>\n            }\n\n            @if (report && data?.legend) {\n              <div class=\"legend-group-wrapper\">\n                <table class=\"legend-table\" [ixTest]=\"['reports-table', report.title]\">\n                  <!-- Table Header-->\n                  <tr class=\"legend-group header\" ixTest=\"table-header\">\n                    <th class=\"legend-label\">\n                      <strong>{{ 'Key' | translate }}</strong>\n                    </th>\n                    @if (data?.aggregations) {\n                      @for (item of data?.aggregations | keyvalue; track item) {\n                        <th class=\"legend-label\">\n                          <strong>{{ item.key | translate }}</strong>\n                        </th>\n                      }\n                    }\n                  </tr>\n                  <!-- Table Rows -->\n                  @for (legendItem of data.legend; track legendItem; let i = $index) {\n                    <tr class=\"legend-group\" [ixTest]=\"legendItem\">\n                      <td class=\"legend-label\">\n                        <!--Legend Label-->\n                        @if (chartColors && legendItem) {\n                          <div\n                            class=\"swatch\"\n                            [style.background-color]=\"chartColors[i]\"\n                          ></div>\n                        }\n                        <span class=\"legend-item\">\n                          <strong>{{ legendItem | translate }}</strong>\n                        </span>\n                        @if (legendData?.series?.[i]?.yHTML && shouldShowLegendValue) {\n                          <span class=\"font-normal\">:\n                            {{ legendData.series[i].yHTML | translate }}\n                          </span>\n                        }\n                      </td>\n                      <!-- Aggregations -->\n                      @if (data?.aggregations) {\n                        @for (item of data.aggregations | keyvalue; track item) {\n                          <td class=\"report-analytics\">\n                            <span>{{ item.value[i] ? item.value[i] : 'null' }}</span>\n                          </td>\n                        }\n                      }\n                    </tr>\n                  }\n                </table>\n              </div>\n            }\n            @if (legendData?.stackedTotalHTML && shouldShowTotal && shouldShowLegendValue) {\n              <h4 class=\"total-line\">\n                <strong>{{ 'Total' | translate }}:</strong>\n                <span>{{ legendData.stackedTotalHTML | translate }}</span>\n              </h4>\n            }\n          </section>\n        </mat-card-content>\n      }\n\n      @if (isReady && report?.errorConf) {\n        <mat-card-content>\n          <ix-empty [conf]=\"report.errorConf\"></ix-empty>\n        </mat-card-content>\n      }\n    </mat-card>\n  </div>\n</div>\n"