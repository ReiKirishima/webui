b8109dd07cc4b7b8f68c13ad136b33ea
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudCredentialsFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const cloudsync_provider_enum_1 = require("app/enums/cloudsync-provider.enum");
const role_enum_1 = require("app/enums/role.enum");
const cloud_credentials_1 = require("app/helptext/system/cloud-credentials");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const ix_modal_header2_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header2/ix-modal-header2.component");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const forbidden_values_validation_1 = require("app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const cloudsync_provider_description_component_1 = require("app/pages/data-protection/cloudsync/cloudsync-provider-description/cloudsync-provider-description.component");
const cloudsync_provider_common_1 = require("app/pages/data-protection/cloudsync/cloudsync-wizard/steps/cloudsync-provider/cloudsync-provider.common");
const cloud_credential_service_1 = require("app/services/cloud-credential.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
// TODO: Form is partially backend driven and partially hardcoded on the frontend.
let CloudCredentialsFormComponent = class CloudCredentialsFormComponent {
    constructor(ws, formBuilder, cdr, errorHandler, dialogService, formErrorHandler, translate, snackbarService, cloudCredentialService, chainedRef) {
        this.ws = ws;
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.errorHandler = errorHandler;
        this.dialogService = dialogService;
        this.formErrorHandler = formErrorHandler;
        this.translate = translate;
        this.snackbarService = snackbarService;
        this.cloudCredentialService = cloudCredentialService;
        this.chainedRef = chainedRef;
        this.requiredRoles = [role_enum_1.Role.CloudSyncWrite];
        this.commonForm = this.formBuilder.group({
            name: ['Storj', forms_1.Validators.required],
            provider: [cloudsync_provider_enum_1.CloudSyncProviderName.Storj],
        });
        this.isLoading = false;
        this.providers = [];
        this.providerOptions = (0, rxjs_1.of)([]);
        this.forbiddenNames = [];
        this.credentials = [];
        this.helptext = cloud_credentials_1.helptextSystemCloudcredentials;
        const data = this.chainedRef.getData();
        this.existingCredential = data === null || data === void 0 ? void 0 : data.existingCredential;
        this.limitProviders = data === null || data === void 0 ? void 0 : data.providers;
        // Has to be earlier than potential `setCredentialsForEdit` call
        this.setFormEvents();
    }
    get showProviderDescription() {
        return this.commonForm.controls.provider.enabled
            && this.commonForm.controls.provider.value === cloudsync_provider_enum_1.CloudSyncProviderName.Storj;
    }
    get isNew() {
        return !this.existingCredential;
    }
    get selectedProvider() {
        var _a;
        return (_a = this.providers) === null || _a === void 0 ? void 0 : _a.find((provider) => {
            return provider.name === this.commonForm.controls.provider.value;
        });
    }
    get areActionsDisabled() {
        var _a, _b;
        return this.isLoading
            || this.commonForm.invalid
            || ((_b = (_a = this.providerForm) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.invalid);
    }
    ngOnInit() {
        this.loadProviders();
        if (this.existingCredential) {
            this.setCredentialsForEdit();
        }
    }
    setCredentialsForEdit() {
        this.commonForm.patchValue(this.existingCredential);
        if (this.providerForm) {
            this.providerForm.getFormSetter$().next(this.existingCredential.attributes);
        }
    }
    onSubmit() {
        this.isLoading = true;
        this.providerForm.beforeSubmit()
            .pipe((0, operators_1.switchMap)(() => {
            const payload = this.preparePayload();
            return this.isNew
                ? this.ws.call('cloudsync.credentials.create', [payload])
                : this.ws.call('cloudsync.credentials.update', [this.existingCredential.id, payload]);
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (response) => {
                this.isLoading = false;
                this.snackbarService.success(this.isNew
                    ? this.translate.instant('Cloud credential added.')
                    : this.translate.instant('Cloud credential updated.'));
                this.chainedRef.close({ response, error: null });
                this.cdr.markForCheck();
            },
            error: (error) => {
                // TODO: Errors for nested provider form will be shown in a modal. Can be improved.
                this.isLoading = false;
                this.formErrorHandler.handleWsFormError(error, this.commonForm);
                this.cdr.markForCheck();
            },
        });
        return false;
    }
    onVerify() {
        this.isLoading = true;
        this.providerForm.beforeSubmit()
            .pipe((0, operators_1.switchMap)(() => {
            const _a = this.preparePayload(), { name } = _a, payload = __rest(_a, ["name"]);
            return this.ws.call('cloudsync.credentials.verify', [payload]);
        }), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (response) => {
                if (response.valid) {
                    this.snackbarService.success(this.translate.instant('The credentials are valid.'));
                }
                else {
                    this.dialogService.error({
                        title: this.translate.instant('Error'),
                        message: response.excerpt,
                        backtrace: response.error,
                    });
                }
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.formErrorHandler.handleWsFormError(error, this.commonForm);
                this.cdr.markForCheck();
            },
        });
    }
    preparePayload() {
        const commonValues = this.commonForm.value;
        return {
            name: commonValues.name,
            provider: commonValues.provider,
            attributes: this.providerForm.getSubmitAttributes(),
        };
    }
    loadProviders() {
        this.isLoading = true;
        (0, rxjs_1.combineLatest)([
            this.cloudCredentialService.getProviders(),
            this.cloudCredentialService.getCloudSyncCredentials(),
        ])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: ([providers, credentials]) => {
                var _a;
                if ((_a = this.limitProviders) === null || _a === void 0 ? void 0 : _a.length) {
                    providers = providers.filter((provider) => this.limitProviders.includes(provider.name));
                }
                this.providers = providers;
                this.providerOptions = (0, rxjs_1.of)(providers.map((provider) => ({
                    label: provider.title,
                    value: provider.name,
                })));
                this.credentials = credentials;
                this.setNamesInUseValidator(credentials);
                this.renderProviderForm();
                if (this.existingCredential) {
                    this.providerForm.getFormSetter$().next(this.existingCredential.attributes);
                }
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    setFormEvents() {
        this.commonForm.controls.provider.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.renderProviderForm();
            this.setDefaultName();
        });
    }
    setNamesInUseValidator(credentials) {
        this.forbiddenNames = credentials.map((credential) => credential.name);
        this.commonForm.controls.name.addValidators((0, forbidden_values_validation_1.forbiddenValues)(this.forbiddenNames));
    }
    setDefaultName() {
        if (!this.isNew || this.commonForm.controls.name.touched) {
            return;
        }
        this.commonForm.controls.name.setValue((0, cloudsync_provider_common_1.getName)(this.selectedProvider.title, this.forbiddenNames));
    }
    renderProviderForm() {
        var _a;
        (_a = this.providerFormContainer) === null || _a === void 0 ? void 0 : _a.clear();
        if (!this.selectedProvider) {
            return;
        }
        const formClass = (0, cloudsync_provider_common_1.getProviderFormClass)(this.selectedProvider.name);
        const formRef = this.providerFormContainer.createComponent(formClass);
        formRef.instance.provider = this.selectedProvider;
        this.providerForm = formRef.instance;
    }
};
exports.CloudCredentialsFormComponent = CloudCredentialsFormComponent;
CloudCredentialsFormComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: forms_1.FormBuilder },
    { type: core_1.ChangeDetectorRef },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: dialog_service_1.DialogService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_2.TranslateService },
    { type: snackbar_service_1.SnackbarService },
    { type: cloud_credential_service_1.CloudCredentialService },
    { type: chained_component_ref_1.ChainedRef }
];
CloudCredentialsFormComponent.propDecorators = {
    providerFormContainer: [{ type: core_1.ViewChild, args: ['providerFormContainer', { static: true, read: core_1.ViewContainerRef },] }]
};
exports.CloudCredentialsFormComponent = CloudCredentialsFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-cloud-credentials-form',
        template: require("./cloud-credentials-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header2_component_1.IxModalHeader2Component,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_select_component_1.IxSelectComponent,
            cloudsync_provider_description_component_1.CloudSyncProviderDescriptionComponent,
            ix_input_component_1.IxInputComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], CloudCredentialsFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,