{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/object-keys-to-human-readable.helper.ts","mappings":";;AAAA,gDA8BC;AAED,4EAcC;AA9CD,SAAgB,kBAAkB,CAAC,GAAW;IAC5C,uCAAuC;IACvC,MAAM,qBAAqB,GAAG,CAAC,IAAY,EAAU,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IAEnH,+BAA+B;IAC/B,MAAM,mBAAmB,GAAG,CAAC,IAAY,EAAU,EAAE;QACnD,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1C,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAEzC,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE,CAAC;YACjC,IAAI,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;gBACjD,OAAO,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC;QACH,CAAC;QAED,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC;IAEF,OAAO,GAAG;QACR,4CAA4C;SAC3C,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;QACvB,qEAAqE;SACpE,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC;QACpC,uCAAuC;SACtC,IAAI,EAAE;QACP,yCAAyC;SACxC,KAAK,CAAC,KAAK,CAAC;SACZ,GAAG,CAAC,mBAAmB,CAAC;QACzB,oCAAoC;SACnC,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAED,SAAgB,gCAAgC,CAAC,aAAsB;IACrE,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;QACjC,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,gCAAgC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,IAAI,aAAa,IAAI,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;QACjF,MAAM,SAAS,GAA4B,EAAE,CAAC;QAC9C,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YAC7C,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACjD,SAAS,CAAC,gBAAgB,CAAC,GAAG,gCAAgC,CAAE,aAAkC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3G,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/helpers/object-keys-to-human-readable.helper.ts"],"sourcesContent":["export function toHumanReadableKey(str: string): string {\n  // Capitalize first letter of each word\n  const capitalizeFirstLetter = (word: string): string => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n\n  // Handle special abbreviations\n  const handleAbbreviations = (word: string): string => {\n    const abbreviations = ['ID', 'IP', 'API'];\n    const lowerCaseWord = word.toLowerCase();\n\n    for (const abbr of abbreviations) {\n      if (lowerCaseWord.startsWith(abbr.toLowerCase())) {\n        return abbr + lowerCaseWord.slice(abbr.length);\n      }\n    }\n\n    return capitalizeFirstLetter(word);\n  };\n\n  return str\n    // Replace underscores or dashes with spaces\n    .replace(/[_-]+/g, ' ')\n    // Insert a space before any uppercase letters in the middle of words\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    // Trim whitespace at the start and end\n    .trim()\n    // Split into words and process each word\n    .split(/\\s+/)\n    .map(handleAbbreviations)\n    // Join the words back into a string\n    .join(' ');\n}\n\nexport function convertObjectKeysToHumanReadable(existingValue: unknown): unknown {\n  if (Array.isArray(existingValue)) {\n    return existingValue.map((item) => convertObjectKeysToHumanReadable(item));\n  }\n\n  if (existingValue && typeof existingValue === 'object' && existingValue !== null) {\n    const newObject: Record<string, unknown> = {};\n    for (const key of Object.keys(existingValue)) {\n      const humanReadableKey = toHumanReadableKey(key);\n      newObject[humanReadableKey] = convertObjectKeysToHumanReadable((existingValue as typeof newObject)[key]);\n    }\n    return newObject;\n  }\n  return existingValue;\n}\n"],"version":3}