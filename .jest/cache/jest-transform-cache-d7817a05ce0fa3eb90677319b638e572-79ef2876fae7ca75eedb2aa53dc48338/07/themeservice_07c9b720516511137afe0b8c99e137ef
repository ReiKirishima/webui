415708691da7bc7607267a49d8a2f94d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeService = void 0;
const core_1 = require("@angular/core");
const tinycolor_1 = require("@ctrl/tinycolor");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const theme_utils_1 = require("app/core/classes/theme-utils/theme-utils");
const window_helper_1 = require("app/helpers/window.helper");
const theme_constants_1 = require("app/services/theme/theme.constants");
const preferences_actions_1 = require("app/store/preferences/preferences.actions");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
let ThemeService = class ThemeService {
    get isDefaultTheme() {
        return this.activeTheme === this.defaultTheme;
    }
    constructor(store$, window) {
        this.store$ = store$;
        this.window = window;
        this.defaultTheme = theme_constants_1.defaultTheme.name;
        this.activeTheme = this.defaultTheme;
        this.activeTheme$ = new rxjs_1.BehaviorSubject(this.defaultTheme);
        this.allThemes = theme_constants_1.allThemes;
        this.loadTheme$ = new rxjs_1.Subject();
        this.utils = new theme_utils_1.ThemeUtils();
        this.loadTheme$.subscribe(() => {
            const savedTheme = this.window.sessionStorage.getItem('theme') || theme_constants_1.defaultTheme.name;
            if (savedTheme) {
                this.onThemeChanged(savedTheme);
            }
        });
        this.store$.select(preferences_selectors_1.selectTheme).pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe((theme) => {
            this.window.sessionStorage.setItem('theme', theme);
            this.onThemeChanged(theme);
        });
    }
    onThemeChanged(theme) {
        this.activeTheme = theme;
        this.activeTheme$.next(theme);
        const selectedTheme = this.findTheme(this.activeTheme);
        this.setCssVars(selectedTheme);
        this.updateThemeInLocalStorage(selectedTheme);
    }
    updateThemeInLocalStorage(theme) {
        this.window.localStorage.setItem('theme', theme.name);
        this.window.localStorage.setItem('bg1', theme === null || theme === void 0 ? void 0 : theme.bg1);
        this.window.localStorage.setItem('fg1', theme === null || theme === void 0 ? void 0 : theme.fg1);
    }
    resetToDefaultTheme() {
        this.store$.dispatch((0, preferences_actions_1.themeNotFound)());
    }
    currentTheme() {
        return this.findTheme(this.activeTheme);
    }
    findTheme(name) {
        const existingTheme = this.allThemes.find((theme) => theme.name === name);
        if (existingTheme) {
            return existingTheme;
        }
        this.resetToDefaultTheme();
        return theme_constants_1.defaultTheme;
    }
    setCssVars(theme) {
        // Sets CSS Custom Properties for an entire theme
        const keys = Object.keys(theme);
        // Filter out deprecated properties and meta properties
        const palette = keys.filter((attribute) => {
            return !['label', 'logoPath', 'logoTextPath', 'favorite', 'labelSwatch', 'description', 'name'].includes(attribute);
        });
        palette.forEach((color) => {
            const swatch = theme[color];
            // Generate aux. text styles
            if (this.allThemes[0].accentColors.includes(color)) {
                const txtColor = this.utils.textContrast(swatch, theme.bg2);
                document.documentElement.style.setProperty('--' + color + '-txt', txtColor);
            }
            document.documentElement.style.setProperty('--' + color, swatch);
        });
        // Add Black White and Grey Variables
        document.documentElement.style.setProperty('--black', '#000000');
        document.documentElement.style.setProperty('--white', '#ffffff');
        document.documentElement.style.setProperty('--grey', '#989898');
        // Add neutral focus color
        document.documentElement.style.setProperty('--focus-bg', 'rgba(122, 122, 122, .55)');
        document.documentElement.style.setProperty('--focus-brd', 'rgba(255, 255, 255, .25)');
        // Set Material palette colors
        document.documentElement.style.setProperty('--primary', theme.primary);
        document.documentElement.style.setProperty('--accent', theme.accent);
        // Set Material aux. text styles
        const primaryColor = this.utils.colorFromMeta(theme.primary); // eg. blue
        const accentColor = this.utils.colorFromMeta(theme.accent); // eg. yellow
        const primaryTextColor = this.utils.textContrast(theme[primaryColor], theme.bg2);
        const accentTextColor = this.utils.textContrast(theme[accentColor], theme.bg2);
        document.documentElement.style.setProperty('--primary-txt', primaryTextColor);
        document.documentElement.style.setProperty('--accent-txt', accentTextColor);
        document.documentElement.style.setProperty('--highlight', accentTextColor);
        // Set line colors
        const isDark = this.darkTest(theme.bg2);
        const lineColor = isDark ? 'var(--dark-theme-lines)' : 'var(--light-theme-lines)';
        document.documentElement.style.setProperty('--lines', lineColor);
        // Set multiple background color contrast options
        const contrastSrc = theme.bg2;
        const contrastPrimary = theme[primaryColor];
        const contrastDarker = new tinycolor_1.TinyColor(contrastSrc).darken(5).toHslString();
        const contrastDarkest = new tinycolor_1.TinyColor(contrastSrc).darken(10).toHslString();
        const contrastLighter = new tinycolor_1.TinyColor(contrastSrc).lighten(5).toHslString();
        const contrastLightest = new tinycolor_1.TinyColor(contrastSrc).lighten(10).toHslString();
        const primaryLightest = new tinycolor_1.TinyColor(contrastPrimary).lighten(5).toHslString();
        document.documentElement.style.setProperty('--contrast-darker', contrastDarker);
        document.documentElement.style.setProperty('--contrast-darkest', contrastDarkest);
        document.documentElement.style.setProperty('--contrast-lighter', contrastLighter);
        document.documentElement.style.setProperty('--contrast-lightest', contrastLightest);
        document.documentElement.style.setProperty('--primary-lighter', primaryLightest);
        let topbarTextColor;
        if (!theme['topbar-txt'] && theme.topbar) {
            topbarTextColor = this.utils.textContrast(theme.topbar, theme.bg2);
            document.documentElement.style.setProperty('--topbar-txt', topbarTextColor);
        }
        else if (!theme['topbar-txt'] && !theme.topbar) {
            topbarTextColor = this.utils.textContrast(theme[primaryColor], theme.bg2);
            document.documentElement.style.setProperty('--topbar-txt', topbarTextColor);
        }
    }
    darkTest(css) {
        return new tinycolor_1.TinyColor(css).isDark();
    }
    isDarkTheme(name = this.activeTheme) {
        const theme = this.findTheme(name);
        return this.darkTest(theme.bg2);
    }
    /**
     * Gets color pattern for active theme
     * @returns array of colors
     */
    getColorPattern() {
        return [this.currentTheme().accentColors, [...Array(50).values()]].flat().map((color) => {
            if (color) {
                return this.currentTheme()[color];
            }
            return `#${Math.floor(Math.random() * 16777215).toString(16)}`;
        });
    }
    getRgbBackgroundColorByIndex(index) {
        return this.getColorPattern()[index];
    }
    getActiveTheme() {
        let theme = theme_constants_1.defaultTheme;
        const storedTheme = this.window.localStorage.getItem('theme');
        if (storedTheme) {
            theme = this.findTheme(storedTheme);
        }
        return theme;
    }
};
exports.ThemeService = ThemeService;
ThemeService.ctorParameters = () => [
    { type: store_1.Store },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.ThemeService = ThemeService = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], ThemeService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,