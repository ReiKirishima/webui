{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/theme/theme.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/services/theme/theme.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ThemeUtils } from 'app/core/classes/theme-utils/theme-utils';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { Theme } from 'app/interfaces/theme.interface';\nimport { allThemes, defaultTheme } from 'app/services/theme/theme.constants';\nimport { AppState } from 'app/store';\nimport { themeNotFound } from 'app/store/preferences/preferences.actions';\nimport { selectTheme } from 'app/store/preferences/preferences.selectors';\n\n@UntilDestroy()\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  defaultTheme = defaultTheme.name;\n  activeTheme = this.defaultTheme;\n  activeTheme$ = new BehaviorSubject<string>(this.defaultTheme);\n\n  allThemes: Theme[] = allThemes;\n  loadTheme$ = new Subject<string>();\n\n  private utils = new ThemeUtils();\n\n  get isDefaultTheme(): boolean {\n    return this.activeTheme === this.defaultTheme;\n  }\n\n  constructor(\n    private store$: Store<AppState>,\n    @Inject(WINDOW) private window: Window,\n  ) {\n    this.loadTheme$.subscribe(() => {\n      const savedTheme = this.window.sessionStorage.getItem('theme') || defaultTheme.name;\n\n      if (savedTheme) {\n        this.onThemeChanged(savedTheme);\n      }\n    });\n\n    this.store$.select(selectTheme).pipe(\n      filter(Boolean),\n      untilDestroyed(this),\n    ).subscribe((theme: string) => {\n      this.window.sessionStorage.setItem('theme', theme);\n      this.onThemeChanged(theme);\n    });\n  }\n\n  onThemeChanged(theme: string): void {\n    this.activeTheme = theme;\n    this.activeTheme$.next(theme);\n    const selectedTheme = this.findTheme(this.activeTheme);\n\n    this.setCssVars(selectedTheme);\n    this.updateThemeInLocalStorage(selectedTheme);\n  }\n\n  updateThemeInLocalStorage(theme: Theme): void {\n    this.window.localStorage.setItem('theme', theme.name);\n    this.window.localStorage.setItem('bg1', theme?.bg1);\n    this.window.localStorage.setItem('fg1', theme?.fg1);\n  }\n\n  resetToDefaultTheme(): void {\n    this.store$.dispatch(themeNotFound());\n  }\n\n  currentTheme(): Theme {\n    return this.findTheme(this.activeTheme);\n  }\n\n  findTheme(name: string): Theme {\n    const existingTheme = this.allThemes.find((theme) => theme.name === name);\n    if (existingTheme) {\n      return existingTheme;\n    }\n\n    this.resetToDefaultTheme();\n    return defaultTheme;\n  }\n\n  setCssVars(theme: Theme): void {\n    // Sets CSS Custom Properties for an entire theme\n    const keys = Object.keys(theme) as (keyof Theme)[];\n\n    // Filter out deprecated properties and meta properties\n    const palette = keys.filter((attribute) => {\n      return !['label', 'logoPath', 'logoTextPath', 'favorite', 'labelSwatch', 'description', 'name'].includes(attribute);\n    });\n\n    palette.forEach((color) => {\n      const swatch = theme[color] as string;\n\n      // Generate aux. text styles\n      if (this.allThemes[0].accentColors.includes(color as Theme['accentColors'][number])) {\n        const txtColor = this.utils.textContrast(swatch, theme.bg2);\n        document.documentElement.style.setProperty('--' + color + '-txt', txtColor);\n      }\n\n      document.documentElement.style.setProperty('--' + color, swatch);\n    });\n\n    // Add Black White and Grey Variables\n    document.documentElement.style.setProperty('--black', '#000000');\n    document.documentElement.style.setProperty('--white', '#ffffff');\n    document.documentElement.style.setProperty('--grey', '#989898');\n\n    // Add neutral focus color\n    document.documentElement.style.setProperty('--focus-bg', 'rgba(122, 122, 122, .55)');\n    document.documentElement.style.setProperty('--focus-brd', 'rgba(255, 255, 255, .25)');\n\n    // Set Material palette colors\n    document.documentElement.style.setProperty('--primary', theme.primary);\n    document.documentElement.style.setProperty('--accent', theme.accent);\n\n    // Set Material aux. text styles\n    const primaryColor = this.utils.colorFromMeta(theme.primary) as keyof Theme; // eg. blue\n    const accentColor = this.utils.colorFromMeta(theme.accent) as keyof Theme; // eg. yellow\n    const primaryTextColor = this.utils.textContrast(theme[primaryColor] as string, theme.bg2);\n    const accentTextColor = this.utils.textContrast(theme[accentColor] as string, theme.bg2);\n\n    document.documentElement.style.setProperty('--primary-txt', primaryTextColor);\n    document.documentElement.style.setProperty('--accent-txt', accentTextColor);\n    document.documentElement.style.setProperty('--highlight', accentTextColor);\n\n    // Set line colors\n    const isDark: boolean = this.darkTest(theme.bg2);\n    const lineColor = isDark ? 'var(--dark-theme-lines)' : 'var(--light-theme-lines)';\n    document.documentElement.style.setProperty('--lines', lineColor);\n\n    // Set multiple background color contrast options\n    const contrastSrc = theme.bg2;\n    const contrastPrimary = theme[primaryColor] as string;\n    const contrastDarker = new TinyColor(contrastSrc).darken(5).toHslString();\n    const contrastDarkest = new TinyColor(contrastSrc).darken(10).toHslString();\n    const contrastLighter = new TinyColor(contrastSrc).lighten(5).toHslString();\n    const contrastLightest = new TinyColor(contrastSrc).lighten(10).toHslString();\n    const primaryLightest = new TinyColor(contrastPrimary).lighten(5).toHslString();\n\n    document.documentElement.style.setProperty('--contrast-darker', contrastDarker);\n    document.documentElement.style.setProperty('--contrast-darkest', contrastDarkest);\n    document.documentElement.style.setProperty('--contrast-lighter', contrastLighter);\n    document.documentElement.style.setProperty('--contrast-lightest', contrastLightest);\n    document.documentElement.style.setProperty('--primary-lighter', primaryLightest);\n\n    let topbarTextColor;\n    if (!theme['topbar-txt'] && theme.topbar) {\n      topbarTextColor = this.utils.textContrast(theme.topbar, theme.bg2);\n      document.documentElement.style.setProperty('--topbar-txt', topbarTextColor);\n    } else if (!theme['topbar-txt'] && !theme.topbar) {\n      topbarTextColor = this.utils.textContrast(theme[primaryColor] as string, theme.bg2);\n      document.documentElement.style.setProperty('--topbar-txt', topbarTextColor);\n    }\n  }\n\n  darkTest(css: string): boolean {\n    return new TinyColor(css).isDark();\n  }\n\n  isDarkTheme(name: string = this.activeTheme): boolean {\n    const theme = this.findTheme(name);\n    return this.darkTest(theme.bg2);\n  }\n\n  /**\n   * Gets color pattern for active theme\n   * @returns array of colors\n   */\n  getColorPattern(): string[] {\n    return [this.currentTheme().accentColors, [...Array(50).values()]].flat().map((color: Theme['accentColors'][0]) => {\n      if (color) {\n        return this.currentTheme()[color];\n      }\n      return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n    });\n  }\n\n  getRgbBackgroundColorByIndex(index: number): string {\n    return this.getColorPattern()[index];\n  }\n\n  getActiveTheme(): Theme {\n    let theme: Theme = defaultTheme;\n    const storedTheme = this.window.localStorage.getItem('theme');\n\n    if (storedTheme) {\n      theme = this.findTheme(storedTheme);\n    }\n\n    return theme;\n  }\n}\n"],"version":3}