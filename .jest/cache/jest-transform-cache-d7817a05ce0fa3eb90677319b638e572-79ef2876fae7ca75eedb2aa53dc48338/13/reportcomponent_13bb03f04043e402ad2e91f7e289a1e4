12b89e42a0efe7f48737f179f314486c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const until_destroy_1 = require("@ngneat/until-destroy");
const store_1 = require("@ngrx/store");
const core_2 = require("@ngx-translate/core");
const angular2_uuid_1 = require("angular2-uuid");
const date_fns_1 = require("date-fns");
const lodash_es_1 = require("lodash-es");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const invalid_date_1 = require("app/constants/invalid-date");
const time_constant_1 = require("app/constants/time.constant");
const toggle_menu_duration_1 = require("app/constants/toggle-menu-duration");
const empty_type_enum_1 = require("app/enums/empty-type.enum");
const reporting_enum_1 = require("app/enums/reporting.enum");
const reporting_interface_1 = require("app/interfaces/reporting.interface");
const format_datetime_pipe_1 = require("app/modules/pipes/format-date-time/format-datetime.pipe");
const line_chart_component_1 = require("app/pages/reports-dashboard/components/line-chart/line-chart.component");
const report_step_direction_enum_1 = require("app/pages/reports-dashboard/enums/report-step-direction.enum");
const report_zoom_level_enum_1 = require("app/pages/reports-dashboard/enums/report-zoom-level.enum");
const reports_constants_1 = require("app/pages/reports-dashboard/reports.constants");
const reports_service_1 = require("app/pages/reports-dashboard/reports.service");
const report_utils_1 = require("app/pages/reports-dashboard/utils/report.utils");
const locale_service_1 = require("app/services/locale.service");
const theme_service_1 = require("app/services/theme/theme.service");
const preferences_selectors_1 = require("app/store/preferences/preferences.selectors");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
let ReportComponent = class ReportComponent {
    get reportTitle() {
        const trimmed = this.report.title.replace(/[()]/g, '');
        return this.identifier ? trimmed.replace(/{identifier}/, this.identifier) : this.report.title;
    }
    get zoomInDisabled() {
        return this.zoomLevelIndex >= this.zoomLevelMax;
    }
    get zoomOutDisabled() {
        return this.zoomLevelIndex <= this.zoomLevelMin;
    }
    get currentZoomLevel() {
        return this.zoomLevels[this.zoomLevelIndex].timespan;
    }
    get isStacked() {
        var _a;
        return [
            reporting_enum_1.ReportingGraphName.Cpu,
            reporting_enum_1.ReportingGraphName.Processes,
            reporting_enum_1.ReportingGraphName.Uptime,
            reporting_enum_1.ReportingGraphName.ZfsArcResult,
        ].includes((_a = this.data) === null || _a === void 0 ? void 0 : _a.name);
    }
    get shouldShowTotal() {
        var _a;
        return [
            reporting_enum_1.ReportingGraphName.ZfsArcResult,
            reporting_enum_1.ReportingGraphName.Memory,
        ].includes((_a = this.data) === null || _a === void 0 ? void 0 : _a.name);
    }
    get shouldShowLegendValue() {
        var _a;
        return this.chartId === ((_a = this.legendData) === null || _a === void 0 ? void 0 : _a.chartId);
    }
    constructor(translate, store$, formatDateTimePipe, themeService, reportsService, cdr, localeService, document) {
        this.translate = translate;
        this.store$ = store$;
        this.formatDateTimePipe = formatDateTimePipe;
        this.themeService = themeService;
        this.reportsService = reportsService;
        this.cdr = cdr;
        this.localeService = localeService;
        this.document = document;
        this.localControls = true;
        this.updateReport$ = new rxjs_1.BehaviorSubject(null);
        this.fetchReport$ = new rxjs_1.BehaviorSubject(null);
        this.isReady = false;
        this.chartId = `chart-${angular2_uuid_1.UUID.UUID()}`;
        this.legendData = {};
        this.subtitle = this.translate.instant('% of all cores');
        this.isActive = true;
        this.stepForwardDisabled = true;
        this.stepBackDisabled = false;
        this.lastEndDateForCurrentZoomLevel = {
            '60m': null,
            '24h': null,
            '7d': null,
            '1M': null,
            '6M': null,
        };
        this.customZoom = false;
        this.zoomLevelMax = Object.keys(report_zoom_level_enum_1.ReportZoomLevel).length - 1;
        this.zoomLevelMin = 0;
        this.zoomLevelIndex = this.zoomLevelMax;
        this.zoomLevels = [
            { timespan: report_zoom_level_enum_1.ReportZoomLevel.HalfYear, timeformat: "%b '%y", culling: 6 },
            { timespan: report_zoom_level_enum_1.ReportZoomLevel.Month, timeformat: 'Week %W', culling: 4 },
            { timespan: report_zoom_level_enum_1.ReportZoomLevel.Week, timeformat: '%d %b', culling: 6 },
            { timespan: report_zoom_level_enum_1.ReportZoomLevel.Day, timeformat: '%a %H:%M', culling: 4 },
            { timespan: report_zoom_level_enum_1.ReportZoomLevel.Hour, timeformat: '%H:%M', culling: 6 },
        ];
        this.zoomLevelLabels = report_zoom_level_enum_1.zoomLevelLabels;
        this.reportsService.legendEventEmitterObs$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (data) => {
                const clone = Object.assign({}, data);
                clone.xHTML = this.formatTime(data.x);
                this.legendData = clone;
                this.cdr.markForCheck();
            },
        });
        this.store$.select(preferences_selectors_1.selectTheme).pipe((0, operators_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.chartColors = this.themeService.getColorPattern();
        });
        this.store$.select(system_config_selectors_1.selectTimezone).pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((timezone) => {
            this.timezone = timezone;
        });
        this.store$.pipe(preferences_selectors_1.waitForPreferences, (0, operators_1.filter)(() => { var _a; return Boolean((_a = this.lineChart) === null || _a === void 0 ? void 0 : _a.chart); }), (0, operators_1.delay)(toggle_menu_duration_1.toggleMenuDuration), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.lineChart.chart.resize();
        });
        this.store$.pipe(preferences_selectors_1.waitForPreferences, (0, until_destroy_1.untilDestroyed)(this)).subscribe((preferences) => {
            this.autoRefreshEnabled = preferences.autoRefreshReports;
            if (this.autoRefreshEnabled && !this.autoRefreshTimer) {
                this.initAutoRefresh();
            }
        });
        this.fetchReport$.pipe((0, operators_1.filter)((params) => !!params), (0, operators_1.throttleTime)(100), (0, operators_1.skipWhile)(() => this.document.hidden), (0, operators_1.distinctUntilChanged)(), (0, until_destroy_1.untilDestroyed)(this)).subscribe((params) => {
            this.fetchReportData(params);
        });
        this.updateReport$.pipe((0, operators_1.filter)((changes) => Boolean(changes === null || changes === void 0 ? void 0 : changes.report)), (0, operators_1.throttleTime)(100), (0, operators_1.skipWhile)(() => this.document.hidden), (0, operators_1.distinctUntilChanged)(), (0, until_destroy_1.untilDestroyed)(this)).subscribe((changes) => {
            this.applyChanges(changes);
        });
    }
    initAutoRefresh() {
        this.autoRefreshTimer = (0, rxjs_1.timer)(2000, reports_constants_1.refreshInterval).pipe((0, operators_1.filter)(() => this.autoRefreshEnabled), (0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            const rrdOptions = this.convertTimeSpan(this.currentZoomLevel);
            this.currentStartDate = rrdOptions.start;
            this.currentEndDate = rrdOptions.end;
            const identifier = this.report.identifiers ? this.report.identifiers[0] : null;
            this.fetchReport$.next({ rrdOptions, identifier, report: this.report });
        });
    }
    ngOnChanges(changes) {
        var _a;
        const wasReportChanged = ((_a = changes === null || changes === void 0 ? void 0 : changes.report) === null || _a === void 0 ? void 0 : _a.firstChange)
            || (changes.report.previousValue && !this.isReady)
            || (changes.report.previousValue.title !== changes.report.currentValue.title);
        if (wasReportChanged) {
            this.updateReport$.next(changes);
        }
    }
    ngOnInit() {
        const { start, end } = this.convertTimeSpan(this.currentZoomLevel);
        this.currentStartDate = start;
        this.currentEndDate = end;
        this.stepForwardDisabled = true;
        if (!this.isReady) {
            setTimeout(() => {
                this.isReady = true;
                this.cdr.markForCheck();
            }, 1000);
        }
    }
    formatTime(stamp) {
        const result = this.formatDateTimePipe.transform(new Date(stamp));
        return result.toLowerCase() !== invalid_date_1.invalidDate.toLowerCase() ? result : null;
    }
    onZoomChange(interval) {
        const [startDate, endDate] = interval;
        this.currentStartDate = startDate;
        this.currentEndDate = endDate;
        this.customZoom = true;
    }
    setChartInteractive(value) {
        this.isActive = value;
    }
    timeZoomReset() {
        this.zoomLevelIndex = this.zoomLevelMax;
        const rrdOptions = this.convertTimeSpan(this.currentZoomLevel);
        this.currentStartDate = rrdOptions.start;
        this.currentEndDate = rrdOptions.end;
        this.customZoom = false;
        const identifier = this.report.identifiers ? this.report.identifiers[0] : null;
        this.fetchReport$.next({ rrdOptions, identifier, report: this.report });
        this.clearLastEndDateForCurrentZoomLevel();
    }
    clearLastEndDateForCurrentZoomLevel() {
        Object.keys(this.lastEndDateForCurrentZoomLevel).forEach((key) => {
            this.lastEndDateForCurrentZoomLevel[key] = null;
        });
    }
    timeZoomIn() {
        if (this.zoomLevelIndex === this.zoomLevelMax) {
            return;
        }
        this.lastEndDateForCurrentZoomLevel[this.currentZoomLevel] = this.currentEndDate;
        this.zoomLevelIndex += 1;
        let currentDate = (this.currentStartDate + this.currentEndDate) / 2;
        if (this.stepForwardDisabled || (0, date_fns_1.isToday)(this.currentEndDate)) {
            currentDate = this.currentEndDate;
        }
        const rrdOptions = this.convertTimeSpan(this.currentZoomLevel, report_step_direction_enum_1.ReportStepDirection.Backward, currentDate);
        this.currentStartDate = rrdOptions.start;
        this.currentEndDate = rrdOptions.end;
        this.customZoom = false;
        const identifier = this.report.identifiers ? this.report.identifiers[0] : null;
        this.fetchReport$.next({ rrdOptions, identifier, report: this.report });
    }
    timeZoomOut() {
        if (this.zoomLevelIndex === this.zoomLevelMin) {
            return;
        }
        this.zoomLevelIndex -= 1;
        const halfPeriodMilliseconds = this.getHalfPeriodMilliseconds();
        let currentDate = this.lastEndDateForCurrentZoomLevel[this.currentZoomLevel]
            || ((this.currentStartDate + this.currentEndDate) / 2) + halfPeriodMilliseconds;
        if (this.stepForwardDisabled || (0, date_fns_1.isToday)(this.currentEndDate)) {
            currentDate = this.currentEndDate;
        }
        const rrdOptions = this.convertTimeSpan(this.currentZoomLevel, report_step_direction_enum_1.ReportStepDirection.Backward, currentDate);
        this.currentStartDate = rrdOptions.start;
        this.currentEndDate = rrdOptions.end;
        this.customZoom = false;
        this.lastEndDateForCurrentZoomLevel[this.currentZoomLevel] = null;
        const identifier = this.report.identifiers ? this.report.identifiers[0] : null;
        this.fetchReport$.next({ rrdOptions, identifier, report: this.report });
    }
    stepBack() {
        if (this.stepBackDisabled) {
            return;
        }
        this.clearLastEndDateForCurrentZoomLevel();
        const rrdOptions = this.convertTimeSpan(this.currentZoomLevel, report_step_direction_enum_1.ReportStepDirection.Backward, this.currentStartDate);
        this.currentStartDate = rrdOptions.start;
        this.currentEndDate = rrdOptions.end;
        const identifier = this.report.identifiers ? this.report.identifiers[0] : null;
        this.fetchReport$.next({ rrdOptions, identifier, report: this.report });
    }
    stepForward() {
        if (this.stepForwardDisabled) {
            return;
        }
        this.clearLastEndDateForCurrentZoomLevel();
        const rrdOptions = this.convertTimeSpan(this.currentZoomLevel, report_step_direction_enum_1.ReportStepDirection.Forward, this.currentEndDate);
        this.currentStartDate = rrdOptions.start;
        this.currentEndDate = rrdOptions.end;
        const identifier = this.report.identifiers ? this.report.identifiers[0] : null;
        this.fetchReport$.next({ rrdOptions, identifier, report: this.report });
    }
    getDateFromString(timestamp) {
        return this.localeService.getDateFromString(timestamp, this.timezone);
    }
    // Convert timespan to start/end options
    convertTimeSpan(timespan, direction = report_step_direction_enum_1.ReportStepDirection.Backward, currentDate) {
        const duration = this.getTimespan(timespan);
        const now = new Date();
        let startDate;
        let endDate;
        if (direction === report_step_direction_enum_1.ReportStepDirection.Backward && !currentDate) {
            endDate = now;
        }
        else if (direction === report_step_direction_enum_1.ReportStepDirection.Backward && currentDate) {
            endDate = new Date(currentDate);
        }
        else if (direction === report_step_direction_enum_1.ReportStepDirection.Forward && currentDate) {
            startDate = new Date(currentDate);
        }
        else {
            throw new Error('A current date parameter must be specified when stepping forward in time!\n direction specified was ' + direction);
        }
        if (direction === report_step_direction_enum_1.ReportStepDirection.Backward) {
            startDate = (0, date_fns_1.sub)(endDate, duration);
        }
        else if (direction === report_step_direction_enum_1.ReportStepDirection.Forward) {
            endDate = (0, date_fns_1.add)(startDate, duration);
        }
        // if endDate is in the future, reset with endDate to now
        if (endDate.getTime() >= now.getTime()) {
            endDate = now;
            startDate = (0, date_fns_1.sub)(endDate, duration);
            this.stepForwardDisabled = true;
        }
        else {
            this.stepForwardDisabled = false;
        }
        if (startDate.getFullYear() <= 1999) {
            this.stepBackDisabled = true;
        }
        else {
            this.stepBackDisabled = false;
        }
        return {
            start: startDate.getTime(),
            end: endDate.getTime(),
            step: '10',
        };
    }
    getTimespan(zoomLevel) {
        let durationUnit;
        let value;
        switch (zoomLevel) {
            case report_zoom_level_enum_1.ReportZoomLevel.HalfYear:
                durationUnit = 'months';
                value = 6;
                break;
            case report_zoom_level_enum_1.ReportZoomLevel.Month:
                durationUnit = 'months';
                value = 1;
                break;
            case report_zoom_level_enum_1.ReportZoomLevel.Week:
                durationUnit = 'days';
                value = 7;
                break;
            case report_zoom_level_enum_1.ReportZoomLevel.Day:
                durationUnit = 'hours';
                value = 24;
                break;
            case report_zoom_level_enum_1.ReportZoomLevel.Hour:
                durationUnit = 'minutes';
                value = 60;
                break;
        }
        return { [durationUnit]: value };
    }
    fetchReportData(fetchParams) {
        const { report, identifier, rrdOptions } = fetchParams;
        // Report options
        const params = identifier ? { name: report.name, identifier } : { name: report.name };
        // Time scale options
        const start = Math.floor(rrdOptions.start / 1000);
        const end = Math.floor(rrdOptions.end / 1000);
        const timeFrame = { start, end };
        this.reportsService.getNetData({
            report,
            params,
            timeFrame,
            truncate: this.stepForwardDisabled,
        }).pipe((0, operators_1.skipWhile)(() => this.document.hidden), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (event) => {
                this.data = (0, report_utils_1.formatData)((0, lodash_es_1.cloneDeep)(event));
                this.cdr.markForCheck();
            },
            error: (err) => {
                this.handleError(err);
                this.cdr.markForCheck();
            },
        });
    }
    handleError(err) {
        if ((err === null || err === void 0 ? void 0 : err.error) === reporting_interface_1.ReportingDatabaseError.FailedExport) {
            this.report.errorConf = {
                type: empty_type_enum_1.EmptyType.Errors,
                title: this.translate.instant('Error getting chart data'),
                message: err.reason,
            };
        }
    }
    applyChanges(changes) {
        const rrdOptions = this.convertTimeSpan(this.currentZoomLevel);
        const identifier = changes.report.currentValue.identifiers ? changes.report.currentValue.identifiers[0] : null;
        this.fetchReport$.next({ rrdOptions, identifier, report: changes.report.currentValue });
    }
    getHalfPeriodMilliseconds() {
        switch (this.currentZoomLevel) {
            case report_zoom_level_enum_1.ReportZoomLevel.Hour:
                return (1 * time_constant_1.oneHourMillis) / 2;
            case report_zoom_level_enum_1.ReportZoomLevel.Day:
                return (1 * time_constant_1.oneDayMillis) / 2;
            case report_zoom_level_enum_1.ReportZoomLevel.Week:
                return (7 * time_constant_1.oneDayMillis) / 2;
            case report_zoom_level_enum_1.ReportZoomLevel.Month:
                return (30 * time_constant_1.oneDayMillis) / 2;
            case report_zoom_level_enum_1.ReportZoomLevel.HalfYear:
                return (365 * time_constant_1.oneDayMillis) / 2;
            default:
                return 0;
        }
    }
};
exports.ReportComponent = ReportComponent;
ReportComponent.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: store_1.Store },
    { type: format_datetime_pipe_1.FormatDateTimePipe },
    { type: theme_service_1.ThemeService },
    { type: reports_service_1.ReportsService },
    { type: core_1.ChangeDetectorRef },
    { type: locale_service_1.LocaleService },
    { type: Document, decorators: [{ type: core_1.Inject, args: [common_1.DOCUMENT,] }] }
];
ReportComponent.propDecorators = {
    localControls: [{ type: core_1.Input }],
    dateFormat: [{ type: core_1.Input }],
    report: [{ type: core_1.Input }],
    identifier: [{ type: core_1.Input }],
    lineChart: [{ type: core_1.ViewChild, args: [line_chart_component_1.LineChartComponent, { static: false },] }]
};
exports.ReportComponent = ReportComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-report',
        template: require("./report.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], ReportComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,