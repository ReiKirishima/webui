df373dbefcff18a20fbb5237801c8b35
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GooglePhotosProviderFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const cloud_credentials_1 = require("app/helptext/system/cloud-credentials");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const base_provider_form_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/base-provider-form");
let GooglePhotosProviderFormComponent = class GooglePhotosProviderFormComponent extends base_provider_form_1.BaseProviderFormComponent {
    constructor(formBuilder, cdr) {
        super();
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.form = this.formBuilder.group({
            token: ['', forms_1.Validators.required],
            client_id: ['', forms_1.Validators.required],
            client_secret: ['', forms_1.Validators.required],
        });
        this.oauthTooltip = cloud_credentials_1.helptextSystemCloudcredentials.token_google_photos.oauth_tooltip;
        this.tokenTooltip = cloud_credentials_1.helptextSystemCloudcredentials.token_google_photos.tooltip;
    }
    ngAfterViewInit() {
        this.formPatcher$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((values) => {
            this.form.patchValue(values);
            this.cdr.detectChanges();
        });
    }
    getSubmitAttributes() {
        return Object.assign({}, this.form.value);
    }
};
exports.GooglePhotosProviderFormComponent = GooglePhotosProviderFormComponent;
GooglePhotosProviderFormComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: core_1.ChangeDetectorRef }
];
exports.GooglePhotosProviderFormComponent = GooglePhotosProviderFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-google-photos-provider-form',
        template: require("./google-photos-provider-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_fieldset_component_1.IxFieldsetComponent,
            forms_1.ReactiveFormsModule,
            ix_input_component_1.IxInputComponent,
            core_2.TranslateModule,
        ],
    })
], GooglePhotosProviderFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL3BhZ2VzL2NyZWRlbnRpYWxzL2JhY2t1cC1jcmVkZW50aWFscy9jbG91ZC1jcmVkZW50aWFscy1mb3JtL3Byb3ZpZGVyLWZvcm1zL2dvb2dsZS1waG90b3MtcHJvdmlkZXItZm9ybS9nb29nbGUtcGhvdG9zLXByb3ZpZGVyLWZvcm0uY29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUd1QjtBQUN2QiwwQ0FBOEU7QUFDOUUseURBQXFFO0FBQ3JFLDhDQUFzRDtBQUN0RCw2RUFBbUc7QUFDbkcsbUhBQThHO0FBQzlHLDBHQUFxRztBQUNyRywwSUFFMkc7QUFlcEcsSUFBTSxpQ0FBaUMsR0FBdkMsTUFBTSxpQ0FBa0MsU0FBUSw4Q0FBeUI7SUFVOUUsWUFDVSxXQUF3QixFQUN4QixHQUFzQjtRQUU5QixLQUFLLEVBQUUsQ0FBQztRQUhBLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBWGhDLFNBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUM1QixLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsa0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDaEMsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLGtCQUFVLENBQUMsUUFBUSxDQUFDO1lBQ3BDLGFBQWEsRUFBRSxDQUFDLEVBQUUsRUFBRSxrQkFBVSxDQUFDLFFBQVEsQ0FBQztTQUN6QyxDQUFDLENBQUM7UUFFTSxpQkFBWSxHQUFHLGtEQUFRLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDO1FBQzFELGlCQUFZLEdBQUcsa0RBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUM7SUFPN0QsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFBLDhCQUFjLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVRLG1CQUFtQjtRQUMxQix5QkFDSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFDbEI7SUFDSixDQUFDOztBQTVCVSw4RUFBaUM7Ozs7OzRDQUFqQyxpQ0FBaUM7SUFiN0MsSUFBQSw0QkFBWSxHQUFFO0lBQ2QsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLGdDQUFnQztRQUMxQyxpRUFBMkQ7UUFDM0QsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFO1lBQ1AsMkNBQW1CO1lBQ25CLDJCQUFtQjtZQUNuQixxQ0FBZ0I7WUFDaEIsc0JBQWU7U0FDaEI7S0FDRixDQUFDO0dBQ1csaUNBQWlDLENBNkI3QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWFjYm9vay9rYXJwb3Ytd29yay9UcnVlTkFTL3dlYnVpL3NyYy9hcHAvcGFnZXMvY3JlZGVudGlhbHMvYmFja3VwLWNyZWRlbnRpYWxzL2Nsb3VkLWNyZWRlbnRpYWxzLWZvcm0vcHJvdmlkZXItZm9ybXMvZ29vZ2xlLXBob3Rvcy1wcm92aWRlci1mb3JtL2dvb2dsZS1waG90b3MtcHJvdmlkZXItZm9ybS5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBVbnRpbERlc3Ryb3ksIHVudGlsRGVzdHJveWVkIH0gZnJvbSAnQG5nbmVhdC91bnRpbC1kZXN0cm95JztcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgaGVscHRleHRTeXN0ZW1DbG91ZGNyZWRlbnRpYWxzIGFzIGhlbHB0ZXh0IH0gZnJvbSAnYXBwL2hlbHB0ZXh0L3N5c3RlbS9jbG91ZC1jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBJeEZpZWxkc2V0Q29tcG9uZW50IH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1maWVsZHNldC9peC1maWVsZHNldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSXhJbnB1dENvbXBvbmVudCB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtaW5wdXQvaXgtaW5wdXQuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIEJhc2VQcm92aWRlckZvcm1Db21wb25lbnQsXG59IGZyb20gJ2FwcC9wYWdlcy9jcmVkZW50aWFscy9iYWNrdXAtY3JlZGVudGlhbHMvY2xvdWQtY3JlZGVudGlhbHMtZm9ybS9wcm92aWRlci1mb3Jtcy9iYXNlLXByb3ZpZGVyLWZvcm0nO1xuXG5AVW50aWxEZXN0cm95KClcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l4LWdvb2dsZS1waG90b3MtcHJvdmlkZXItZm9ybScsXG4gIHRlbXBsYXRlVXJsOiAnLi9nb29nbGUtcGhvdG9zLXByb3ZpZGVyLWZvcm0uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW1xuICAgIEl4RmllbGRzZXRDb21wb25lbnQsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBJeElucHV0Q29tcG9uZW50LFxuICAgIFRyYW5zbGF0ZU1vZHVsZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgR29vZ2xlUGhvdG9zUHJvdmlkZXJGb3JtQ29tcG9uZW50IGV4dGVuZHMgQmFzZVByb3ZpZGVyRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBmb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgdG9rZW46IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgY2xpZW50X2lkOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgIGNsaWVudF9zZWNyZXQ6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gIH0pO1xuXG4gIHJlYWRvbmx5IG9hdXRoVG9vbHRpcCA9IGhlbHB0ZXh0LnRva2VuX2dvb2dsZV9waG90b3Mub2F1dGhfdG9vbHRpcDtcbiAgcmVhZG9ubHkgdG9rZW5Ub29sdGlwID0gaGVscHRleHQudG9rZW5fZ29vZ2xlX3Bob3Rvcy50b29sdGlwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyLFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmZvcm1QYXRjaGVyJC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKS5zdWJzY3JpYmUoKHZhbHVlcykgPT4ge1xuICAgICAgdGhpcy5mb3JtLnBhdGNoVmFsdWUodmFsdWVzKTtcbiAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG92ZXJyaWRlIGdldFN1Ym1pdEF0dHJpYnV0ZXMoKTogdGhpc1snZm9ybSddWyd2YWx1ZSddIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5mb3JtLnZhbHVlLFxuICAgIH07XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==