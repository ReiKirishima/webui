ffbc02e1b34506039d374d3c4d49c321
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const testing_1 = require("@angular/material/button/testing");
const dialog_1 = require("@angular/material/dialog");
const router_1 = require("@angular/router");
const jest_1 = require("@ngneat/spectator/jest");
const ng_mocks_1 = require("ng-mocks");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const app_state_enum_1 = require("app/enums/app-state.enum");
const app_interface_1 = require("app/interfaces/app.interface");
const map_value_pipe_1 = require("app/modules/pipes/map-value/map-value.pipe");
const app_workloads_card_component_1 = require("app/pages/apps/components/installed-apps/app-workloads-card/app-workloads-card.component");
const volume_mounts_dialog_component_1 = require("app/pages/apps/components/installed-apps/app-workloads-card/volume-mounts-dialog/volume-mounts-dialog.component");
const shell_details_dialog_component_1 = require("app/pages/apps/components/shell-details-dialog/shell-details-dialog.component");
const shell_details_type_enum_1 = require("app/pages/apps/enum/shell-details-type.enum");
describe('AppContainersCardComponent', () => {
    let spectator;
    let loader;
    const app = {
        id: 'ix-test-app',
        name: 'ix-test-app',
        metadata: { train: 'ix-test-train' },
        upgrade_available: true,
        state: app_state_enum_1.AppState.Running,
        active_workloads: {
            containers: 1,
            used_ports: [
                {
                    container_port: '20489',
                    protocol: 'tcp',
                    host_ports: [
                        { host_port: '20489', host_ip: '0.0.0.0' },
                    ],
                },
                {
                    container_port: '80',
                    protocol: 'tcp',
                    host_ports: [
                        { host_port: '8080', host_ip: '0.0.0.0' },
                    ],
                },
            ],
            container_details: [
                {
                    id: '1',
                    service_name: 'netdata',
                    image: 'netdata/netdata:v1.46.1',
                    port_config: [],
                    state: app_interface_1.AppContainerState.Running,
                    volume_mounts: [
                        {
                            source: '/etc/group',
                            destination: '/host/etc/group',
                            mode: '',
                            type: 'bind',
                        },
                    ],
                },
            ],
        },
    };
    const createComponent = (0, jest_1.createComponentFactory)({
        component: app_workloads_card_component_1.AppWorkloadsCardComponent,
        declarations: [
            (0, ng_mocks_1.MockComponent)(volume_mounts_dialog_component_1.VolumeMountsDialogComponent),
        ],
        imports: [
            map_value_pipe_1.MapValuePipe,
        ],
        providers: [
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(router_1.Router),
            (0, mock_auth_utils_1.mockAuth)(),
        ],
    });
    beforeEach(() => {
        spectator = createComponent({
            props: {
                app,
            },
        });
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
    });
    it('shows header', () => {
        expect(spectator.query('mat-card-header h3')).toHaveText('Workloads');
    });
    it('shows number of ports', () => {
        const details = spectator.queryAll('.details-item');
        expect(details).toHaveLength(1);
        expect(details[0].querySelector('.label')).toHaveText('Ports:');
        expect(details[0].querySelector('.value')).toHaveText('tcp://0.0.0.0:20489:20489');
        expect(details[0].querySelector('.value')).toHaveText('tcp://0.0.0.0:8080:80');
    });
    it('shows container header and number of containers', () => {
        expect(spectator.query('.containers h4')).toHaveText('Containers');
    });
    it('shows container list', () => {
        const containers = spectator.queryAll('.container');
        expect(containers).toHaveLength(1);
        expect(containers[0].querySelector('.service-name')).toHaveText('netdata');
        expect(containers[0].querySelector('.container-state')).toHaveText('Running');
        expect(containers[0].querySelectorAll('.container-action button')).toHaveLength(3);
    });
    it('opens volume mounts dialog when Volume Mounts button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const volumeButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ selector: '[aria-label="Volume Mounts"]' }));
        yield volumeButton.click();
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(volume_mounts_dialog_component_1.VolumeMountsDialogComponent, {
            data: app.active_workloads.container_details[0],
        });
    }));
    it('opens shell app dialog when Shell button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const shellButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ selector: '[aria-label="Shell"]' }));
        yield shellButton.click();
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(shell_details_dialog_component_1.ShellDetailsDialogComponent, {
            minWidth: '650px',
            maxWidth: '850px',
            data: {
                appName: app.name,
                title: 'Choose Shell Details',
                type: shell_details_type_enum_1.ShellDetailsType.Shell,
                customSubmit: expect.any(Function),
                minWidth: '40vw',
            },
        });
    }));
    it('redirects to logs page when View Logs button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const showLogsButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ selector: '[aria-label="View Logs"]' }));
        yield showLogsButton.click();
        expect(spectator.inject(router_1.Router).navigate).toHaveBeenCalledWith(['/apps', 'installed', 'ix-test-train', 'ix-test-app', 'logs', '1']);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,