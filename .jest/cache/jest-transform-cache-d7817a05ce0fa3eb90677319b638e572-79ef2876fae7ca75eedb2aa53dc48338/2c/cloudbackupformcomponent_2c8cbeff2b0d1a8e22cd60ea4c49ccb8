6e8e6dc22e2aa40ff373834d9fffe578
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudBackupFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const cloudsync_provider_enum_1 = require("app/enums/cloudsync-provider.enum");
const explorer_type_enum_1 = require("app/enums/explorer-type.enum");
const role_enum_1 = require("app/enums/role.enum");
const bwlimit_utils_1 = require("app/helpers/bwlimit.utils");
const file_size_utils_1 = require("app/helpers/file-size.utils");
const cloud_backup_1 = require("app/helptext/data-protection/cloud-backup/cloud-backup");
const option_interface_1 = require("app/interfaces/option.interface");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const crontab_to_schedule_utils_1 = require("app/modules/scheduler/utils/crontab-to-schedule.utils");
const get_default_crontab_presets_utils_1 = require("app/modules/scheduler/utils/get-default-crontab-presets.utils");
const schedule_to_crontab_utils_1 = require("app/modules/scheduler/utils/schedule-to-crontab.utils");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const cloud_credential_service_1 = require("app/services/cloud-credential.service");
const filesystem_service_1 = require("app/services/filesystem.service");
const ws_service_1 = require("app/services/ws.service");
let CloudBackupFormComponent = class CloudBackupFormComponent {
    get isNew() {
        return !this.editingTask;
    }
    get isNewBucketOptionSelected() {
        return this.form.value.bucket === option_interface_1.newOption;
    }
    get title() {
        return this.isNew
            ? this.translate.instant('Add TrueCloud Backup Task')
            : this.translate.instant('Edit TrueCloud Backup Task');
    }
    constructor(translate, fb, ws, cdr, errorHandler, snackbar, filesystemService, cloudCredentialService, chainedRef) {
        this.translate = translate;
        this.fb = fb;
        this.ws = ws;
        this.cdr = cdr;
        this.errorHandler = errorHandler;
        this.snackbar = snackbar;
        this.filesystemService = filesystemService;
        this.cloudCredentialService = cloudCredentialService;
        this.chainedRef = chainedRef;
        this.newBucketOption = {
            label: this.translate.instant('Add new'),
            value: option_interface_1.newOption,
            disabled: false,
        };
        this.form = this.fb.group({
            path: ['', [forms_1.Validators.required]],
            credentials: [null, [forms_1.Validators.required]],
            schedule: [get_default_crontab_presets_utils_1.CronPresetValue.Daily, [forms_1.Validators.required]],
            exclude: [[]],
            pre_script: [''],
            post_script: [''],
            description: ['', [forms_1.Validators.required]],
            snapshot: [false],
            bwlimit: [[]],
            transfers: [null],
            args: [''],
            enabled: [true],
            password: ['', [forms_1.Validators.required]],
            keep_last: [null, [forms_1.Validators.required]],
            folder: ['', [forms_1.Validators.required]],
            bucket: ['', [forms_1.Validators.required]],
            bucket_input: ['', [forms_1.Validators.required]],
        });
        this.isLoading = false;
        this.bucketOptions$ = (0, rxjs_1.of)([]);
        this.newOption = option_interface_1.newOption;
        this.requiredRoles = [role_enum_1.Role.CloudBackupWrite];
        this.CloudSyncProviderName = cloudsync_provider_enum_1.CloudSyncProviderName;
        this.helptext = cloud_backup_1.helptextCloudBackup;
        this.editingTask = chainedRef.getData();
    }
    ngOnInit() {
        this.setFileNodeProvider();
        this.setBucketNodeProvider();
        this.form.controls.credentials.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((credentialId) => {
            var _a, _b;
            if (credentialId !== ((_b = (_a = this.editingTask) === null || _a === void 0 ? void 0 : _a.credentials) === null || _b === void 0 ? void 0 : _b.id)) {
                this.form.controls.bucket.patchValue('');
            }
            this.form.controls.bucket_input.disable();
            if (credentialId) {
                this.form.controls.folder.enable();
                this.form.controls.bucket.enable();
                this.loadBucketOptions(credentialId);
            }
            else {
                this.form.controls.folder.disable();
                this.form.controls.bucket.disable();
            }
        });
        this.form.controls.bucket.valueChanges
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((value) => {
            if (value === option_interface_1.newOption) {
                this.form.controls.bucket_input.patchValue('');
                this.form.controls.bucket_input.enable();
            }
            else {
                this.form.controls.bucket_input.disable();
            }
            this.setBucketNodeProvider();
        });
        this.form.controls.bucket_input.valueChanges
            .pipe((0, rxjs_1.debounceTime)(300), (0, rxjs_1.distinctUntilChanged)(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.setBucketNodeProvider();
        });
        if (this.editingTask) {
            this.setTaskForEdit();
        }
    }
    loadBucketOptions(credentialId) {
        this.isLoading = true;
        this.cloudCredentialService.getBuckets(credentialId)
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (buckets) => {
                const bucketOptions = buckets.map((bucket) => ({
                    label: bucket.Name,
                    value: bucket.Path,
                    disabled: !bucket.Enabled,
                }));
                bucketOptions.unshift(this.newBucketOption);
                this.bucketOptions$ = (0, rxjs_1.of)(bucketOptions);
                this.isLoading = false;
                this.form.controls.bucket.enable();
                this.form.controls.bucket_input.disable();
                this.cdr.markForCheck();
            },
            error: () => {
                this.isLoading = false;
                this.bucketOptions$ = (0, rxjs_1.of)([this.newBucketOption]);
                this.cdr.markForCheck();
            },
        });
    }
    getBucketsNodeProvider() {
        return (node) => {
            let bucket = '';
            if (this.form.controls.bucket.enabled && this.form.value.bucket !== option_interface_1.newOption) {
                bucket = this.form.controls.bucket.value;
            }
            else if (this.form.controls.bucket_input.enabled) {
                bucket = this.form.controls.bucket_input.value;
            }
            const data = {
                credentials: this.form.controls.credentials.value,
                attributes: {
                    bucket,
                    folder: node.data.path,
                },
                args: '',
            };
            if (bucket === '') {
                delete data.attributes.bucket;
            }
            return this.ws.call('cloudsync.list_directory', [data]).pipe((0, rxjs_1.map)((listing) => {
                const nodes = [];
                listing.forEach((file) => {
                    if (file.IsDir) {
                        nodes.push({
                            path: `${data.attributes.folder}/${file.Name}`.replace(/\/+/g, '/'),
                            name: file.Name,
                            type: explorer_type_enum_1.ExplorerNodeType.Directory,
                            hasChildren: true,
                        });
                    }
                });
                return nodes;
            }));
        };
    }
    setTaskForEdit() {
        this.form.patchValue(Object.assign(Object.assign({}, this.editingTask), { schedule: (0, schedule_to_crontab_utils_1.scheduleToCrontab)(this.editingTask.schedule), path: this.editingTask.path, credentials: (this.editingTask.credentials).id, folder: this.editingTask.attributes.folder, bucket: this.editingTask.attributes.bucket === option_interface_1.newOption ? '' : this.editingTask.attributes.bucket || '', bwlimit: this.editingTask.bwlimit.map((bwlimit) => {
                return bwlimit.bandwidth
                    ? `${bwlimit.time}, ${(0, file_size_utils_1.buildNormalizedFileSize)(bwlimit.bandwidth, 'B', 2)}/s`
                    : `${bwlimit.time}, off`;
            }) }));
    }
    onSubmit() {
        const payload = this.prepareData(this.form.value);
        this.isLoading = true;
        let createBucket$ = (0, rxjs_1.of)(null);
        if (!!this.form.value.bucket_input && this.isNewBucketOptionSelected) {
            createBucket$ = this.ws.call('cloudsync.create_bucket', [this.form.value.credentials, this.form.value.bucket_input]);
        }
        createBucket$.pipe((0, rxjs_1.switchMap)(() => {
            if (this.isNew) {
                return this.ws.call('cloud_backup.create', [payload]);
            }
            return this.ws.call('cloud_backup.update', [this.editingTask.id, payload]);
        }), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: (response) => {
                if (this.isNew) {
                    this.snackbar.success(this.translate.instant('Task created'));
                }
                else {
                    this.snackbar.success(this.translate.instant('Task updated'));
                }
                this.isLoading = false;
                this.cdr.markForCheck();
                this.chainedRef.close({ response, error: null });
            },
            error: (error) => {
                this.isLoading = false;
                this.errorHandler.handleWsFormError(error, this.form);
                this.cdr.markForCheck();
            },
        });
    }
    prepareData(formValue) {
        const attributes = {
            folder: formValue.folder,
            bucket: this.form.value.bucket_input && this.isNewBucketOptionSelected
                ? this.form.value.bucket_input
                : formValue.bucket,
        };
        const value = Object.assign(Object.assign({}, formValue), { attributes, include: [], bwlimit: (0, bwlimit_utils_1.prepareBwlimit)(formValue.bwlimit), schedule: (0, crontab_to_schedule_utils_1.crontabToSchedule)(formValue.schedule) });
        ['folder', 'bucket', 'bucket_input'].forEach((key) => {
            delete value[key];
        });
        return value;
    }
    setFileNodeProvider() {
        this.fileNodeProvider = this.filesystemService.getFilesystemNodeProvider({ directoriesOnly: true });
    }
    setBucketNodeProvider() {
        this.bucketNodeProvider = this.getBucketsNodeProvider();
    }
};
exports.CloudBackupFormComponent = CloudBackupFormComponent;
CloudBackupFormComponent.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: reactive_forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: snackbar_service_1.SnackbarService },
    { type: filesystem_service_1.FilesystemService },
    { type: cloud_credential_service_1.CloudCredentialService },
    { type: chained_component_ref_1.ChainedRef }
];
exports.CloudBackupFormComponent = CloudBackupFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-cloud-backup-form',
        template: require("./cloud-backup-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
    })
], CloudBackupFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,