1ea03a83948953f37e41123e46fcc21e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const testing_1 = require("@angular/material/button/testing");
const dialog_1 = require("@angular/material/dialog");
const jest_1 = require("@ngneat/spectator/jest");
const testing_2 = require("@ngrx/store/testing");
const ng_mocks_1 = require("ng-mocks");
const rxjs_1 = require("rxjs");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const search_input1_component_1 = require("app/modules/forms/search-input1/search-input1.component");
const ix_table_harness_1 = require("app/modules/ix-table/components/ix-table/ix-table.harness");
const ix_table_columns_selector_component_1 = require("app/modules/ix-table/components/ix-table-columns-selector/ix-table-columns-selector.component");
const ix_table_details_row_component_1 = require("app/modules/ix-table/components/ix-table-details-row/ix-table-details-row.component");
const ix_table_details_row_directive_1 = require("app/modules/ix-table/directives/ix-table-details-row.directive");
const page_header_component_1 = require("app/modules/page-header/page-title-header/page-header.component");
const cron_delete_dialog_component_1 = require("app/pages/system/advanced/cron/cron-delete-dialog/cron-delete-dialog.component");
const cron_form_component_1 = require("app/pages/system/advanced/cron/cron-form/cron-form.component");
const cron_list_component_1 = require("app/pages/system/advanced/cron/cron-list/cron-list.component");
const ix_chained_slide_in_service_1 = require("app/services/ix-chained-slide-in.service");
const locale_service_1 = require("app/services/locale.service");
const task_service_1 = require("app/services/task.service");
const ws_service_1 = require("app/services/ws.service");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
describe('CronListComponent', () => {
    let spectator;
    let loader;
    let table;
    const cronJobs = [
        {
            id: 1,
            user: 'root',
            command: "echo 'Hello World'",
            description: 'test',
            enabled: true,
            stdout: true,
            stderr: false,
            schedule: {
                minute: '0',
                hour: '0',
                dom: '*',
                month: '*',
                dow: '*',
            },
        },
    ];
    const createComponent = (0, jest_1.createComponentFactory)({
        component: cron_list_component_1.CronListComponent,
        imports: [
            (0, ng_mocks_1.MockComponent)(page_header_component_1.PageHeaderComponent),
            search_input1_component_1.SearchInput1Component,
            ix_table_columns_selector_component_1.IxTableColumnsSelectorComponent,
            ix_table_details_row_directive_1.IxTableDetailsRowDirective,
            ix_table_details_row_component_1.IxTableDetailsRowComponent,
        ],
        providers: [
            (0, testing_2.provideMockStore)({
                selectors: [
                    {
                        selector: system_config_selectors_1.selectSystemConfigState,
                        value: {},
                    },
                ],
            }),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('cronjob.query', cronJobs),
                (0, mock_websocket_utils_1.mockCall)('cronjob.run'),
            ]),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(ix_chained_slide_in_service_1.IxChainedSlideInService, {
                open: jest.fn(() => (0, rxjs_1.of)({ response: true, error: null })),
            }),
            (0, jest_1.mockProvider)(chained_component_ref_1.ChainedRef, { close: jest.fn(), getData: jest.fn(() => undefined) }),
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)(true),
                })),
            }),
            (0, jest_1.mockProvider)(locale_service_1.LocaleService),
            (0, jest_1.mockProvider)(task_service_1.TaskService, {
                getTaskNextTime: jest.fn(() => new Date(new Date().getTime() + (25 * 60 * 60 * 1000))),
            }),
            (0, mock_auth_utils_1.mockAuth)(),
        ],
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        table = yield loader.getHarness(ix_table_harness_1.IxTableHarness);
    }));
    it('should show table rows', () => __awaiter(void 0, void 0, void 0, function* () {
        const expectedRows = [
            ['Users', 'Command', 'Description', 'Schedule', 'Enabled'],
            ['root', "echo 'Hello World'", 'test', '0 0 * * *', 'Yes'],
        ];
        const cells = yield table.getCellTexts();
        expect(cells).toEqual(expectedRows);
    }));
    it('shows form to add new cronjob when Add button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const addButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Add' }));
        yield addButton.click();
        expect(spectator.inject(ix_chained_slide_in_service_1.IxChainedSlideInService).open).toHaveBeenCalledWith(cron_form_component_1.CronFormComponent);
    }));
    it('shows confirmation dialog when Run Now button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        yield table.clickToggle(0);
        const runNowButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Run Now' }));
        yield runNowButton.click();
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith({
            title: 'Run Now',
            message: 'Run this job now?',
            hideCheckbox: true,
        });
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('cronjob.run', [1]);
    }));
    it('shows form to edit an existing interface when Edit button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        yield table.clickToggle(0);
        const editButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Edit' }));
        yield editButton.click();
        expect(spectator.inject(ix_chained_slide_in_service_1.IxChainedSlideInService).open).toHaveBeenCalledWith(cron_form_component_1.CronFormComponent, false, expect.objectContaining(cronJobs[0]));
    }));
    it('deletes a cronjob with confirmation when Delete button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        yield table.clickToggle(0);
        const deleteIcon = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Delete' }));
        yield deleteIcon.click();
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(cron_delete_dialog_component_1.CronDeleteDialogComponent, {
            data: expect.objectContaining({ id: 1 }),
        });
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,