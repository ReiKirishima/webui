76353790cce2d3388c5ead96e51a5e42
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forms_1 = require("@angular/forms");
const jest_1 = require("@ngneat/spectator/jest");
const core_1 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const form_change_guard_for_slide_in_directive_1 = require("./form-change-guard-for-slide-in.directive");
describe('FormChangeGuardForSlideInDirective', () => {
    let spectator;
    const createHost = (0, jest_1.createHostFactory)({
        component: form_change_guard_for_slide_in_directive_1.FormChangeGuardForSlideInDirective,
        imports: [forms_1.ReactiveFormsModule],
        providers: [
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(core_1.TranslateService, {
                instant: jest.fn((key) => key),
            }),
            {
                provide: ix_slide_in_ref_1.IxSlideInRef,
                useFactory: () => ({
                    close: jest.fn(),
                }),
            },
        ],
    });
    beforeEach(() => {
        spectator = createHost(`
      <form [formGroup]="form" formChangeGuardForSlideIn></form>
    `, {
            hostProps: {
                form: new forms_1.FormGroup({}),
            },
        });
    });
    it('should set formChanged to true when form value changes', () => {
        spectator.component.formGroup.markAsPristine();
        spectator.component.formGroup.valueChanges.subscribe(() => {
            expect(spectator.component.formChanged).toBe(true);
        });
    });
    it('should emit close event if there are no unsaved changes', () => {
        spectator.component.formChanged = false;
        spectator.detectChanges();
        spectator.component.closeWithConfirmation().subscribe((shouldClose) => {
            expect(shouldClose).toBe(true);
        });
    });
    it('should call confirmation dialog if there are unsaved changes', () => {
        const dialogService = spectator.inject(dialog_service_1.DialogService);
        spectator.component.closeWithConfirmation().subscribe(() => {
            expect(dialogService.confirm).toHaveBeenCalled();
        });
    });
    it('should reset formChanged to false after confirmation', () => {
        const slideInRef = spectator.inject(ix_slide_in_ref_1.IxSlideInRef);
        const dialogService = spectator.inject(dialog_service_1.DialogService);
        spectator.component.formChanged = true;
        jest.spyOn(dialogService, 'confirm').mockReturnValue((0, rxjs_1.of)(true));
        spectator.component.closeWithConfirmation().subscribe((shouldClose) => {
            expect(shouldClose).toBe(true);
        });
    });
    it('should not emit close event if confirmation is rejected', () => {
        const slideInRef = spectator.inject(ix_slide_in_ref_1.IxSlideInRef);
        const dialogService = spectator.inject(dialog_service_1.DialogService);
        jest.spyOn(dialogService, 'confirm').mockReturnValue((0, rxjs_1.of)(true));
        spectator.component.closeWithConfirmation().subscribe((shouldClose) => {
            expect(shouldClose).toBe(false);
            expect(slideInRef.close).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,