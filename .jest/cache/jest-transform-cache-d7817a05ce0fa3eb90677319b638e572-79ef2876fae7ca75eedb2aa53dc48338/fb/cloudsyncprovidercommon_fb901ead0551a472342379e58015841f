c7c836f1a0b3b967de739ff53676d3f1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenOnlyProviders = exports.cloudsyncProviderFormMap = void 0;
exports.getProviderFormClass = getProviderFormClass;
exports.getName = getName;
const cloudsync_provider_enum_1 = require("app/enums/cloudsync-provider.enum");
const azure_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/azure-provider-form/azure-provider-form.component");
const backblaze_b2_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/backblaze-b2-provider-form/backblaze-b2-provider-form.component");
const ftp_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/ftp-provider-form/ftp-provider-form.component");
const google_cloud_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/google-cloud-provider-form/google-cloud-provider-form.component");
const google_drive_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/google-drive-provider-form/google-drive-provider-form.component");
const google_photos_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/google-photos-provider-form/google-photos-provider-form.component");
const http_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/http-provider-form/http-provider-form.component");
const mega_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/mega-provider-form/mega-provider-form.component");
const openstack_swift_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/openstack-swift-provider-form/openstack-swift-provider-form.component");
const pcloud_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/pcloud-provider-form/pcloud-provider-form.component");
const s3_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/s3-provider-form/s3-provider-form.component");
const sftp_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/sftp-provider-form/sftp-provider-form.component");
const storj_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/storj-provider-form/storj-provider-form.component");
const token_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/token-provider-form/token-provider-form.component");
const webdav_provider_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/webdav-provider-form/webdav-provider-form.component");
exports.cloudsyncProviderFormMap = new Map([
    [cloudsync_provider_enum_1.CloudSyncProviderName.MicrosoftAzure, azure_provider_form_component_1.AzureProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.BackblazeB2, backblaze_b2_provider_form_component_1.BackblazeB2ProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Ftp, ftp_provider_form_component_1.FtpProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.GoogleCloudStorage, google_cloud_provider_form_component_1.GoogleCloudProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.GoogleDrive, google_drive_provider_form_component_1.GoogleDriveProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.GooglePhotos, google_photos_provider_form_component_1.GooglePhotosProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Http, http_provider_form_component_1.HttpProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Mega, mega_provider_form_component_1.MegaProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.OpenstackSwift, openstack_swift_provider_form_component_1.OpenstackSwiftProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Pcloud, pcloud_provider_form_component_1.PcloudProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.AmazonS3, s3_provider_form_component_1.S3ProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Sftp, sftp_provider_form_component_1.SftpProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Storj, storj_provider_form_component_1.StorjProviderFormComponent],
    [cloudsync_provider_enum_1.CloudSyncProviderName.Webdav, webdav_provider_form_component_1.WebdavProviderFormComponent],
]);
exports.tokenOnlyProviders = [
    cloudsync_provider_enum_1.CloudSyncProviderName.Box,
    cloudsync_provider_enum_1.CloudSyncProviderName.Dropbox,
    cloudsync_provider_enum_1.CloudSyncProviderName.Hubic,
    cloudsync_provider_enum_1.CloudSyncProviderName.Yandex,
];
function getProviderFormClass(providerName) {
    if (exports.tokenOnlyProviders.includes(providerName)) {
        return token_provider_form_component_1.TokenProviderFormComponent;
    }
    return exports.cloudsyncProviderFormMap.get(providerName);
}
// Will return "(1)" from "Google Photos (1)"
const incrementRegex = /\s\((\d+)\)$/;
// Will return "1" from "(1)"
const incrementInt = /\d+(?=\)$)/;
/**
 * Get an incremented name (e.g. Google Photos (2)) from a name (e.g. Google Photos),
 * based on an array of existing names.
 *
 * @param name The name to increment.
 * @param others The array of existing names.
 */
function getName(name, others) {
    var _a;
    const set = new Set(others);
    let result = name;
    while (set.has(result)) {
        result = ((_a = incrementRegex.exec(result)) === null || _a === void 0 ? void 0 : _a[1])
            ? result.replace(incrementInt, (value) => (+value + 1).toString())
            : `${result} (2)`;
    }
    return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,