e735a5869006cd08d68b514d74163901
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveDirectoryComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const dialog_1 = require("@angular/material/dialog");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const directory_service_state_enum_1 = require("app/enums/directory-service-state.enum");
const role_enum_1 = require("app/enums/role.enum");
const options_operators_1 = require("app/helpers/operators/options.operators");
const active_directory_1 = require("app/helptext/directory-service/active-directory");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_chips_component_1 = require("app/modules/forms/ix-forms/components/ix-chips/ix-chips.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const leave_domain_dialog_component_1 = require("app/pages/directory-service/components/leave-domain-dialog/leave-domain-dialog.component");
const error_handler_service_1 = require("app/services/error-handler.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
let ActiveDirectoryComponent = class ActiveDirectoryComponent {
    constructor(ws, cdr, errorHandler, formBuilder, systemGeneralService, dialogService, matDialog, translate, slideInRef, snackbarService) {
        this.ws = ws;
        this.cdr = cdr;
        this.errorHandler = errorHandler;
        this.formBuilder = formBuilder;
        this.systemGeneralService = systemGeneralService;
        this.dialogService = dialogService;
        this.matDialog = matDialog;
        this.translate = translate;
        this.slideInRef = slideInRef;
        this.snackbarService = snackbarService;
        this.requiredRoles = [role_enum_1.Role.DirectoryServiceWrite];
        this.isLoading = false;
        this.isAdvancedMode = false;
        this.canLeaveDomain = false;
        this.form = this.formBuilder.group({
            domainname: ['', forms_1.Validators.required],
            bindname: ['', forms_1.Validators.required],
            bindpw: [''],
            enable: [false],
            verbose_logging: [false],
            allow_trusted_doms: [false],
            use_default_domain: [false],
            allow_dns_updates: [false],
            disable_freenas_cache: [false],
            restrict_pam: [false],
            site: [''],
            kerberos_realm: [null],
            kerberos_principal: [''],
            createcomputer: [''],
            timeout: [null],
            dns_timeout: [null],
            nss_info: [null],
            netbiosname: ['', [forms_1.Validators.required, forms_1.Validators.maxLength(15)]],
            netbiosalias: [[]],
        });
        this.hasKerberosPrincipal$ = this.form.select((values) => values.kerberos_principal);
        this.helptext = active_directory_1.helptextActiveDirectory;
        this.kerberosRealms$ = this.ws.call('kerberos.realm.query').pipe((0, operators_1.map)((realms) => {
            return realms.map((realm) => ({
                label: realm.realm,
                value: realm.id,
            }));
        }));
        this.kerberosPrincipals$ = this.ws.call('kerberos.keytab.kerberos_principal_choices').pipe((0, options_operators_1.singleArrayToOptions)());
        this.nssOptions$ = this.ws.call('activedirectory.nss_info_choices').pipe((0, options_operators_1.singleArrayToOptions)());
    }
    ngOnInit() {
        this.loadFormValues();
    }
    onAdvancedModeToggled() {
        this.isAdvancedMode = !this.isAdvancedMode;
    }
    onRebuildCachePressed() {
        this.isLoading = true;
        this.dialogService
            .jobDialog(this.systemGeneralService.refreshDirServicesCache())
            .afterClosed()
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ({ description }) => {
                this.isLoading = false;
                this.snackbarService.success(this.translate.instant(description || active_directory_1.helptextActiveDirectory.activedirectory_custactions_clearcache_dialog_message));
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.dialogService.error(this.errorHandler.parseError(error));
                this.cdr.markForCheck();
            },
        });
    }
    onLeaveDomainPressed() {
        const dialog = this.matDialog.open(leave_domain_dialog_component_1.LeaveDomainDialogComponent);
        dialog.afterClosed().pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((leftDomain) => {
            if (!leftDomain) {
                return;
            }
            this.slideInRef.close();
        });
    }
    onSubmit() {
        this.isLoading = true;
        const values = Object.assign(Object.assign({}, this.form.value), { kerberos_principal: this.form.value.kerberos_principal || '' });
        this.dialogService.jobDialog(this.ws.job('activedirectory.update', [values]), { title: this.translate.instant('Active Directory') })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => this.slideInRef.close(true),
            complete: () => {
                this.isLoading = false;
                this.cdr.markForCheck();
            },
        });
    }
    loadFormValues() {
        this.isLoading = true;
        (0, rxjs_1.forkJoin)([
            this.loadDirectoryState(),
            this.loadDirectoryConfig(),
        ])
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.cdr.markForCheck();
                this.dialogService.error(this.errorHandler.parseError(error));
            },
        });
    }
    loadDirectoryState() {
        return this.ws.call('directoryservices.get_state').pipe((0, operators_1.map)((adState) => {
            const isHealthy = adState.activedirectory === directory_service_state_enum_1.DirectoryServiceState.Healthy;
            this.canLeaveDomain = isHealthy;
            if (isHealthy) {
                this.form.controls.netbiosname.disable();
                this.form.controls.netbiosalias.disable();
            }
        }));
    }
    loadDirectoryConfig() {
        return this.ws.call('activedirectory.config').pipe((0, operators_1.map)((config) => {
            this.form.patchValue(config);
        }));
    }
};
exports.ActiveDirectoryComponent = ActiveDirectoryComponent;
ActiveDirectoryComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: reactive_forms_1.FormBuilder },
    { type: system_general_service_1.SystemGeneralService },
    { type: dialog_service_1.DialogService },
    { type: dialog_1.MatDialog },
    { type: core_2.TranslateService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: snackbar_service_1.SnackbarService }
];
exports.ActiveDirectoryComponent = ActiveDirectoryComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-active-directory',
        template: require("./active-directory.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_input_component_1.IxInputComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_select_component_1.IxSelectComponent,
            ix_chips_component_1.IxChipsComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], ActiveDirectoryComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,