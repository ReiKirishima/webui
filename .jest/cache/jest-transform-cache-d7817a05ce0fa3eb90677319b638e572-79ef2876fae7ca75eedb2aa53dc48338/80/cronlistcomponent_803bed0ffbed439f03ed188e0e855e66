bd961d8f3ac0cb427f00054fa6dff26d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronListComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const dialog_1 = require("@angular/material/dialog");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const role_enum_1 = require("app/enums/role.enum");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const empty_service_1 = require("app/modules/empty/empty.service");
const search_input1_component_1 = require("app/modules/forms/search-input1/search-input1.component");
const async_data_provider_1 = require("app/modules/ix-table/classes/async-data-provider/async-data-provider");
const ix_table_component_1 = require("app/modules/ix-table/components/ix-table/ix-table.component");
const ix_cell_relative_date_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-relative-date/ix-cell-relative-date.component");
const ix_cell_text_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-text/ix-cell-text.component");
const ix_table_body_component_1 = require("app/modules/ix-table/components/ix-table-body/ix-table-body.component");
const ix_table_columns_selector_component_1 = require("app/modules/ix-table/components/ix-table-columns-selector/ix-table-columns-selector.component");
const ix_table_details_row_component_1 = require("app/modules/ix-table/components/ix-table-details-row/ix-table-details-row.component");
const ix_table_head_component_1 = require("app/modules/ix-table/components/ix-table-head/ix-table-head.component");
const ix_table_pager_component_1 = require("app/modules/ix-table/components/ix-table-pager/ix-table-pager.component");
const ix_table_details_row_directive_1 = require("app/modules/ix-table/directives/ix-table-details-row.directive");
const ix_table_empty_directive_1 = require("app/modules/ix-table/directives/ix-table-empty.directive");
const utils_1 = require("app/modules/ix-table/utils");
const page_header_component_1 = require("app/modules/page-header/page-title-header/page-header.component");
const schedule_to_crontab_utils_1 = require("app/modules/scheduler/utils/schedule-to-crontab.utils");
const test_directive_1 = require("app/modules/test-id/test.directive");
const cron_delete_dialog_component_1 = require("app/pages/system/advanced/cron/cron-delete-dialog/cron-delete-dialog.component");
const cron_form_component_1 = require("app/pages/system/advanced/cron/cron-form/cron-form.component");
const cron_list_elements_1 = require("app/pages/system/advanced/cron/cron-list/cron-list.elements");
const error_handler_service_1 = require("app/services/error-handler.service");
const ix_chained_slide_in_service_1 = require("app/services/ix-chained-slide-in.service");
const task_service_1 = require("app/services/task.service");
const ws_service_1 = require("app/services/ws.service");
let CronListComponent = class CronListComponent {
    get hiddenColumns() {
        return this.columns.filter((column) => column === null || column === void 0 ? void 0 : column.hidden);
    }
    constructor(cdr, ws, translate, taskService, dialog, errorHandler, chainedSlideIns, matDialog, emptyService) {
        this.cdr = cdr;
        this.ws = ws;
        this.translate = translate;
        this.taskService = taskService;
        this.dialog = dialog;
        this.errorHandler = errorHandler;
        this.chainedSlideIns = chainedSlideIns;
        this.matDialog = matDialog;
        this.emptyService = emptyService;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.searchableElements = cron_list_elements_1.cronElements;
        this.cronjobs = [];
        this.filterString = '';
        this.columns = (0, utils_1.createTable)([
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Users'),
                propertyName: 'user',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Command'),
                propertyName: 'command',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Description'),
                propertyName: 'description',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Schedule'),
                propertyName: 'schedule',
                getValue: (task) => (task.enabled ? (0, schedule_to_crontab_utils_1.scheduleToCrontab)(task.schedule) : this.translate.instant('Disabled')),
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Enabled'),
                propertyName: 'enabled',
                getValue: (task) => (task.enabled ? this.translate.instant('Yes') : this.translate.instant('No')),
            }),
            (0, ix_cell_relative_date_component_1.relativeDateColumn)({
                title: this.translate.instant('Next Run'),
                hidden: true,
                getValue: (task) => {
                    if (task.enabled) {
                        return this.taskService.getTaskNextTime((0, schedule_to_crontab_utils_1.scheduleToCrontab)(task.schedule));
                    }
                    return this.translate.instant('Disabled');
                },
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Hide Stdout'),
                propertyName: 'stdout',
                getValue: (task) => (task.stdout ? this.translate.instant('Yes') : this.translate.instant('No')),
                hidden: true,
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Hide Stderr'),
                propertyName: 'stderr',
                getValue: (task) => (task.stderr ? this.translate.instant('Yes') : this.translate.instant('No')),
                hidden: true,
            }),
        ], {
            uniqueRowTag: (row) => 'cron-' + row.command + '-' + row.description,
            ariaLabels: (row) => [row.command, this.translate.instant('Cron Job')],
        });
    }
    ngOnInit() {
        const cronjobs$ = this.ws.call('cronjob.query').pipe((0, rxjs_1.map)((cronjobs) => {
            return cronjobs.map((job) => (Object.assign(Object.assign({}, job), { cron_schedule: (0, schedule_to_crontab_utils_1.scheduleToCrontab)(job.schedule), next_run: this.taskService.getTaskNextRun((0, schedule_to_crontab_utils_1.scheduleToCrontab)(job.schedule)) })));
        }), (0, rxjs_1.tap)((cronjobs) => this.cronjobs = cronjobs), (0, until_destroy_1.untilDestroyed)(this));
        this.dataProvider = new async_data_provider_1.AsyncDataProvider(cronjobs$);
        this.getCronJobs();
        this.dataProvider.emptyType$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe(() => {
            this.onListFiltered(this.filterString);
        });
    }
    getCronJobs() {
        this.dataProvider.load();
    }
    doAdd() {
        this.chainedSlideIns.open(cron_form_component_1.CronFormComponent)
            .pipe((0, rxjs_1.filter)((response) => !!response.response), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.getCronJobs();
        });
    }
    doEdit(row) {
        this.chainedSlideIns.open(cron_form_component_1.CronFormComponent, false, row)
            .pipe((0, rxjs_1.filter)((response) => !!response.response), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.getCronJobs();
        });
    }
    runNow(row) {
        this.dialog.confirm({
            title: this.translate.instant('Run Now'),
            message: this.translate.instant('Run this job now?'),
            hideCheckbox: true,
        }).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => this.ws.call('cronjob.run', [row.id])), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                const message = row.enabled
                    ? this.translate.instant('This job is scheduled to run again {nextRun}.', { nextRun: row.next_run })
                    : this.translate.instant('This job will not run again until it is enabled.');
                this.dialog.info(this.translate.instant('Job {job} Completed Successfully', { job: row.description }), message);
            },
            error: (error) => this.dialog.error(this.errorHandler.parseError(error)),
        });
    }
    doDelete(row) {
        this.matDialog.open(cron_delete_dialog_component_1.CronDeleteDialogComponent, {
            data: row,
        }).afterClosed()
            .pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.getCronJobs();
        });
    }
    onListFiltered(query) {
        this.filterString = query.toLowerCase();
        this.dataProvider.setFilter({ query, columnKeys: ['user'] });
    }
    columnsChange(columns) {
        this.columns = [...columns];
        this.cdr.detectChanges();
        this.cdr.markForCheck();
    }
};
exports.CronListComponent = CronListComponent;
CronListComponent.ctorParameters = () => [
    { type: core_1.ChangeDetectorRef },
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService },
    { type: task_service_1.TaskService },
    { type: dialog_service_1.DialogService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ix_chained_slide_in_service_1.IxChainedSlideInService },
    { type: dialog_1.MatDialog },
    { type: empty_service_1.EmptyService }
];
exports.CronListComponent = CronListComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-cron-list',
        template: require("./cron-list.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            page_header_component_1.PageHeaderComponent,
            search_input1_component_1.SearchInput1Component,
            ix_table_columns_selector_component_1.IxTableColumnsSelectorComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            ix_table_component_1.IxTableComponent,
            ix_table_empty_directive_1.IxTableEmptyDirective,
            ui_search_directive_1.UiSearchDirective,
            ix_table_head_component_1.IxTableHeadComponent,
            ix_table_body_component_1.IxTableBodyComponent,
            ix_table_details_row_directive_1.IxTableDetailsRowDirective,
            ix_table_details_row_component_1.IxTableDetailsRowComponent,
            ix_table_pager_component_1.IxTablePagerComponent,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], CronListComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,