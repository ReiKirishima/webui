0196511eb18784ece666fd5e41c5808a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IxTableColumnsSelectorComponent = void 0;
const collections_1 = require("@angular/cdk/collections");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const menu_1 = require("@angular/material/menu");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const lodash_es_1 = require("lodash-es");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const test_directive_1 = require("app/modules/test-id/test.directive");
const i0 = __importStar(require("@angular/core"));
let IxTableColumnsSelectorComponent = class IxTableColumnsSelectorComponent {
    get isOnlyOneColumnSelected() {
        return this.columns.filter((column) => !column.hidden && !!column.title).length === 1;
    }
    get isAllSelected() {
        return !this.columns.filter((column) => column.hidden && !!column.title).length;
    }
    constructor(cdr) {
        this.cdr = cdr;
        this.columnsChange = (0, core_1.output)();
        this.hiddenColumns = new collections_1.SelectionModel(true, []);
        this.subscribeToColumnsChange();
    }
    ngOnChanges(changes) {
        if (changes.columns.firstChange) {
            this.defaultColumns = changes.columns.currentValue;
            this.setInitialState();
        }
    }
    toggleAll() {
        if (this.isAllSelected) {
            this.hiddenColumns.deselect(...this.columns);
            this.toggle(this.columns[0]);
        }
        else {
            this.hiddenColumns.select(...this.columns);
        }
        this.columns.forEach((_cell, index) => this.toggle(this.columns[index]));
        this.emitColumnsChange();
    }
    isSelected(column) {
        return this.hiddenColumns.isSelected(column);
    }
    resetToDefaults() {
        this.setInitialState();
    }
    toggle(column) {
        if (this.isOnlyOneColumnSelected && !this.isSelected(column)) {
            return;
        }
        this.hiddenColumns.toggle(column);
        this.emitColumnsChange();
        this.cdr.markForCheck();
    }
    setInitialState() {
        this.columns = (0, lodash_es_1.cloneDeep)(this.defaultColumns);
        this.hiddenColumns.select(...this.columns);
        this.defaultColumns.forEach((column, index) => {
            if (!column.hidden) {
                this.toggle(this.columns[index]);
            }
        });
        this.emitColumnsChange();
        this.cdr.markForCheck();
    }
    subscribeToColumnsChange() {
        this.hiddenColumns.changed
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe((values) => {
            if (values.removed.length) {
                this.columns.find((column) => column.title === values.removed[0].title).hidden = false;
            }
            if (values.added.length) {
                this.columns.find((column) => column.title === values.added[0].title).hidden = true;
            }
            this.emitColumnsChange();
            this.cdr.markForCheck();
        });
    }
    emitColumnsChange() {
        this.columnsChange.emit([...this.columns]);
    }
};
exports.IxTableColumnsSelectorComponent = IxTableColumnsSelectorComponent;
IxTableColumnsSelectorComponent.ctorParameters = () => [
    { type: core_1.ChangeDetectorRef }
];
IxTableColumnsSelectorComponent.propDecorators = {
    columns: [{ type: core_1.Input }],
    columnsChange: [{ type: i0.Output, args: ["columnsChange",] }]
};
exports.IxTableColumnsSelectorComponent = IxTableColumnsSelectorComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-table-columns-selector',
        template: require("./ix-table-columns-selector.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            button_1.MatButton,
            menu_1.MatMenuTrigger,
            ix_icon_component_1.IxIconComponent,
            menu_1.MatMenu,
            menu_1.MatMenuItem,
            core_2.TranslateModule,
            test_directive_1.TestDirective,
        ],
    })
], IxTableColumnsSelectorComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,