fb1be77f2483fbb8537c6df987da7b70
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forms_1 = require("@angular/forms");
const jest_1 = require("@ngneat/spectator/jest");
const core_1 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const form_change_guard_for_slide_in_directive_1 = require("./form-change-guard-for-slide-in.directive");
describe('FormChangeGuardForSlideInDirective', () => {
    let spectator;
    const createHost = (0, jest_1.createHostFactory)({
        component: form_change_guard_for_slide_in_directive_1.FormChangeGuardForSlideInDirective,
        imports: [forms_1.ReactiveFormsModule],
        providers: [
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(core_1.TranslateService, {
                instant: jest.fn((key) => key),
            }),
            {
                provide: ix_slide_in_ref_1.IxSlideInRef,
                useFactory: () => ({
                    close: jest.fn(),
                    slideInClosed$: new rxjs_1.Subject(),
                }),
            },
        ],
    });
    beforeEach(() => {
        spectator = createHost(`
      <form [formGroup]="form" formChangeGuardForSlideIn></form>
    `, {
            hostProps: {
                form: new forms_1.FormGroup({}),
            },
        });
    });
    it('should set formChanged to true when form value changes', () => {
        spectator.component.formGroup.markAsPristine();
        spectator.component.formGroup.valueChanges.subscribe(() => {
            expect(spectator.component.formChanged).toBe(true);
        });
    });
    it('should emit close event if there are no unsaved changes', () => {
        spectator.component.formGroup.markAsPristine();
        spectator.detectChanges();
        spectator.component.closeWithConfirmation().subscribe((shouldClose) => {
            expect(shouldClose).toBe(true);
        });
    });
    it('should call confirmation dialog if there are unsaved changes', () => {
        const dialogService = spectator.inject(dialog_service_1.DialogService);
        spectator.component.closeWithConfirmation().subscribe(() => {
            expect(dialogService.confirm).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvZm9ybS1jaGFuZ2UtZ3VhcmQvZm9ybS1jaGFuZ2UtZ3VhcmQtZm9yLXNsaWRlLWluLmRpcmVjdGl2ZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsMENBQWdFO0FBQ2hFLGlEQUVnQztBQUNoQyw4Q0FBdUQ7QUFDdkQsK0JBQW1DO0FBQ25DLHNFQUFrRTtBQUNsRSx1R0FBaUc7QUFDakcseUdBQWdHO0FBRWhHLFFBQVEsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7SUFDbEQsSUFBSSxTQUFxRSxDQUFDO0lBRTFFLE1BQU0sVUFBVSxHQUFHLElBQUEsd0JBQWlCLEVBQUM7UUFDbkMsU0FBUyxFQUFFLDZFQUFrQztRQUM3QyxPQUFPLEVBQUUsQ0FBQywyQkFBbUIsQ0FBQztRQUM5QixTQUFTLEVBQUU7WUFDVCxJQUFBLG1CQUFZLEVBQUMsOEJBQWEsRUFBRTtnQkFDMUIsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSxTQUFFLEVBQUMsSUFBSSxDQUFDLENBQUM7YUFDakMsQ0FBQztZQUNGLElBQUEsbUJBQVksRUFBQyx1QkFBZ0IsRUFBRTtnQkFDN0IsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUN2QyxDQUFDO1lBQ0Y7Z0JBQ0UsT0FBTyxFQUFFLDhCQUFZO2dCQUNyQixVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7b0JBQ2hCLGNBQWMsRUFBRSxJQUFJLGNBQU8sRUFBUTtpQkFDcEMsQ0FBQzthQUNIO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsU0FBUyxHQUFHLFVBQVUsQ0FBQzs7S0FFdEIsRUFBRTtZQUNELFNBQVMsRUFBRTtnQkFDVCxJQUFJLEVBQUUsSUFBSSxpQkFBUyxDQUFDLEVBQUUsQ0FBQzthQUN4QjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtRQUNoRSxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUUvQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN4RCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5REFBeUQsRUFBRSxHQUFHLEVBQUU7UUFDakUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFL0MsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRTFCLFNBQVMsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUNwRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOERBQThELEVBQUUsR0FBRyxFQUFFO1FBQ3RFLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsOEJBQWEsQ0FBQyxDQUFDO1FBRXRELFNBQVMsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3pELE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL2RpcmVjdGl2ZXMvZm9ybS1jaGFuZ2UtZ3VhcmQvZm9ybS1jaGFuZ2UtZ3VhcmQtZm9yLXNsaWRlLWluLmRpcmVjdGl2ZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Hcm91cCwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gIGNyZWF0ZUhvc3RGYWN0b3J5LCBTcGVjdGF0b3JIb3N0LCBtb2NrUHJvdmlkZXIsXG59IGZyb20gJ0BuZ25lYXQvc3BlY3RhdG9yL2plc3QnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdhcHAvbW9kdWxlcy9kaWFsb2cvZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSXhTbGlkZUluUmVmIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zbGlkZS1pbi9peC1zbGlkZS1pbi1yZWYnO1xuaW1wb3J0IHsgRm9ybUNoYW5nZUd1YXJkRm9yU2xpZGVJbkRpcmVjdGl2ZSB9IGZyb20gJy4vZm9ybS1jaGFuZ2UtZ3VhcmQtZm9yLXNsaWRlLWluLmRpcmVjdGl2ZSc7XG5cbmRlc2NyaWJlKCdGb3JtQ2hhbmdlR3VhcmRGb3JTbGlkZUluRGlyZWN0aXZlJywgKCkgPT4ge1xuICBsZXQgc3BlY3RhdG9yOiBTcGVjdGF0b3JIb3N0PEZvcm1DaGFuZ2VHdWFyZEZvclNsaWRlSW5EaXJlY3RpdmU8dW5rbm93bj4+O1xuXG4gIGNvbnN0IGNyZWF0ZUhvc3QgPSBjcmVhdGVIb3N0RmFjdG9yeSh7XG4gICAgY29tcG9uZW50OiBGb3JtQ2hhbmdlR3VhcmRGb3JTbGlkZUluRGlyZWN0aXZlLFxuICAgIGltcG9ydHM6IFtSZWFjdGl2ZUZvcm1zTW9kdWxlXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgIG1vY2tQcm92aWRlcihEaWFsb2dTZXJ2aWNlLCB7XG4gICAgICAgIGNvbmZpcm06IGplc3QuZm4oKCkgPT4gb2YodHJ1ZSkpLFxuICAgICAgfSksXG4gICAgICBtb2NrUHJvdmlkZXIoVHJhbnNsYXRlU2VydmljZSwge1xuICAgICAgICBpbnN0YW50OiBqZXN0LmZuKChrZXk6IHN0cmluZykgPT4ga2V5KSxcbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBJeFNsaWRlSW5SZWYsXG4gICAgICAgIHVzZUZhY3Rvcnk6ICgpID0+ICh7XG4gICAgICAgICAgY2xvc2U6IGplc3QuZm4oKSxcbiAgICAgICAgICBzbGlkZUluQ2xvc2VkJDogbmV3IFN1YmplY3Q8dm9pZD4oKSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNwZWN0YXRvciA9IGNyZWF0ZUhvc3QoYFxuICAgICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJmb3JtXCIgZm9ybUNoYW5nZUd1YXJkRm9yU2xpZGVJbj48L2Zvcm0+XG4gICAgYCwge1xuICAgICAgaG9zdFByb3BzOiB7XG4gICAgICAgIGZvcm06IG5ldyBGb3JtR3JvdXAoe30pLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZXQgZm9ybUNoYW5nZWQgdG8gdHJ1ZSB3aGVuIGZvcm0gdmFsdWUgY2hhbmdlcycsICgpID0+IHtcbiAgICBzcGVjdGF0b3IuY29tcG9uZW50LmZvcm1Hcm91cC5tYXJrQXNQcmlzdGluZSgpO1xuXG4gICAgc3BlY3RhdG9yLmNvbXBvbmVudC5mb3JtR3JvdXAudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBleHBlY3Qoc3BlY3RhdG9yLmNvbXBvbmVudC5mb3JtQ2hhbmdlZCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlbWl0IGNsb3NlIGV2ZW50IGlmIHRoZXJlIGFyZSBubyB1bnNhdmVkIGNoYW5nZXMnLCAoKSA9PiB7XG4gICAgc3BlY3RhdG9yLmNvbXBvbmVudC5mb3JtR3JvdXAubWFya0FzUHJpc3RpbmUoKTtcblxuICAgIHNwZWN0YXRvci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBzcGVjdGF0b3IuY29tcG9uZW50LmNsb3NlV2l0aENvbmZpcm1hdGlvbigpLnN1YnNjcmliZSgoc2hvdWxkQ2xvc2UpID0+IHtcbiAgICAgIGV4cGVjdChzaG91bGRDbG9zZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjYWxsIGNvbmZpcm1hdGlvbiBkaWFsb2cgaWYgdGhlcmUgYXJlIHVuc2F2ZWQgY2hhbmdlcycsICgpID0+IHtcbiAgICBjb25zdCBkaWFsb2dTZXJ2aWNlID0gc3BlY3RhdG9yLmluamVjdChEaWFsb2dTZXJ2aWNlKTtcblxuICAgIHNwZWN0YXRvci5jb21wb25lbnQuY2xvc2VXaXRoQ29uZmlybWF0aW9uKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGV4cGVjdChkaWFsb2dTZXJ2aWNlLmNvbmZpcm0pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==