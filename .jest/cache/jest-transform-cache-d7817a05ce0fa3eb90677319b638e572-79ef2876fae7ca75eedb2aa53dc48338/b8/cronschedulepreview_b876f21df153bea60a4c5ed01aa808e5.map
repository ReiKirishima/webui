{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/classes/cron-schedule-preview/cron-schedule-preview.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/classes/cron-schedule-preview/cron-schedule-preview.ts"],"sourcesContent":["import { Cron } from 'croner';\nimport {\n  addDays, addMinutes,\n  endOfMonth,\n  getDate, getMonth, isAfter, isBefore, isWithinInterval,\n  setHours,\n  setMinutes,\n  subMinutes,\n} from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\n\nexport interface CronSchedulerPreviewOptions {\n  crontab: string;\n  startTime?: string;\n  endTime?: string;\n}\n\nexport class CronSchedulePreview {\n  private readonly cron: Cron;\n\n  constructor(private options: CronSchedulerPreviewOptions) {\n    this.cron = new Cron(this.options.crontab, {\n      legacyMode: true,\n    });\n  }\n\n  /**\n   * Returns next {limit} dates from startDate to the end of month.\n   * @param startDate Starting date.\n   * @param limit\n   */\n  listNextRunsInMonth(startDate: Date, limit: number, timezone: string): Date[] {\n    const nextRuns: Date[] = [];\n    let previousDate = subMinutes(startDate, 1);\n    const endDate = endOfMonth(startDate);\n\n    for (let i = 0; i < limit;) {\n      const exampleDate = this.cron.nextRun(previousDate);\n      previousDate = exampleDate;\n\n      if (!exampleDate || !isBefore(exampleDate, endDate)) {\n        break;\n      }\n\n      if (!this.isWithinTimeConstrains(exampleDate)) {\n        continue;\n      }\n\n      const machineToUtc = zonedTimeToUtc(exampleDate, timezone);\n\n      const utcToLocal = utcToZonedTime(machineToUtc, Intl.DateTimeFormat().resolvedOptions().timeZone);\n\n      nextRuns.push(utcToLocal);\n      i = i + 1;\n    }\n\n    return nextRuns;\n  }\n\n  getNextDaysInMonthWithRuns(startDate: Date): Set<number> {\n    const monthDaysWithRuns = new Set<number>([]);\n\n    let previousDate = startDate;\n    const startingMonth = getMonth(previousDate);\n\n    do {\n      const nextRun = this.cron.nextRun(subMinutes(previousDate, 1));\n\n      if (!nextRun || getMonth(nextRun) !== startingMonth) {\n        break;\n      }\n\n      if (!this.isWithinTimeConstrains(nextRun)) {\n        previousDate = addMinutes(nextRun, 1);\n        continue;\n      }\n\n      previousDate = addDays(previousDate, 1);\n\n      const dayNumber = getDate(nextRun);\n      monthDaysWithRuns.add(dayNumber);\n    } while (getMonth(previousDate) === startingMonth);\n\n    return monthDaysWithRuns;\n  }\n\n  private isWithinTimeConstrains(date: Date): boolean {\n    if (!this.options.startTime || !this.options.endTime) {\n      return true;\n    }\n\n    const [startHour, startMinutes] = this.options.startTime.split(':');\n    const [endHour, endMinutes] = this.options.endTime.split(':');\n\n    const startDate = setMinutes(setHours(date, Number(startHour)), Number(startMinutes));\n    const endDate = setMinutes(setHours(date, Number(endHour)), Number(endMinutes));\n\n    if (!isAfter(endDate, startDate)) {\n      return true;\n    }\n\n    return isWithinInterval(date, { start: startDate, end: endDate });\n  }\n}\n"],"version":3}