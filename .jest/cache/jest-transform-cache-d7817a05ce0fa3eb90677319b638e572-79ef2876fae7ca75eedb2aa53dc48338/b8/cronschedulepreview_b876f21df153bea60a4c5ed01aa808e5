0662806023721bc3c96a95b5db4fa990
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronSchedulePreview = void 0;
const croner_1 = require("croner");
const date_fns_1 = require("date-fns");
const date_fns_tz_1 = require("date-fns-tz");
class CronSchedulePreview {
    constructor(options) {
        this.options = options;
        this.cron = new croner_1.Cron(this.options.crontab, {
            legacyMode: true,
        });
    }
    /**
     * Returns next {limit} dates from startDate to the end of month.
     * @param startDate Starting date.
     * @param limit
     */
    listNextRunsInMonth(startDate, limit, timezone) {
        const nextRuns = [];
        let previousDate = (0, date_fns_1.subMinutes)(startDate, 1);
        const endDate = (0, date_fns_1.endOfMonth)(startDate);
        for (let i = 0; i < limit;) {
            const exampleDate = this.cron.nextRun(previousDate);
            previousDate = exampleDate;
            if (!exampleDate || !(0, date_fns_1.isBefore)(exampleDate, endDate)) {
                break;
            }
            if (!this.isWithinTimeConstrains(exampleDate)) {
                continue;
            }
            const machineToUtc = (0, date_fns_tz_1.zonedTimeToUtc)(exampleDate, timezone);
            const utcToLocal = (0, date_fns_tz_1.utcToZonedTime)(machineToUtc, Intl.DateTimeFormat().resolvedOptions().timeZone);
            nextRuns.push(utcToLocal);
            i = i + 1;
        }
        return nextRuns;
    }
    getNextDaysInMonthWithRuns(startDate) {
        const monthDaysWithRuns = new Set([]);
        let previousDate = startDate;
        const startingMonth = (0, date_fns_1.getMonth)(previousDate);
        do {
            const nextRun = this.cron.nextRun((0, date_fns_1.subMinutes)(previousDate, 1));
            if (!nextRun || (0, date_fns_1.getMonth)(nextRun) !== startingMonth) {
                break;
            }
            if (!this.isWithinTimeConstrains(nextRun)) {
                previousDate = (0, date_fns_1.addMinutes)(nextRun, 1);
                continue;
            }
            previousDate = (0, date_fns_1.addDays)(previousDate, 1);
            const dayNumber = (0, date_fns_1.getDate)(nextRun);
            monthDaysWithRuns.add(dayNumber);
        } while ((0, date_fns_1.getMonth)(previousDate) === startingMonth);
        return monthDaysWithRuns;
    }
    isWithinTimeConstrains(date) {
        if (!this.options.startTime || !this.options.endTime) {
            return true;
        }
        const [startHour, startMinutes] = this.options.startTime.split(':');
        const [endHour, endMinutes] = this.options.endTime.split(':');
        const startDate = (0, date_fns_1.setMinutes)((0, date_fns_1.setHours)(date, Number(startHour)), Number(startMinutes));
        const endDate = (0, date_fns_1.setMinutes)((0, date_fns_1.setHours)(date, Number(endHour)), Number(endMinutes));
        if (!(0, date_fns_1.isAfter)(endDate, startDate)) {
            return true;
        }
        return (0, date_fns_1.isWithinInterval)(date, { start: startDate, end: endDate });
    }
}
exports.CronSchedulePreview = CronSchedulePreview;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvc2NoZWR1bGVyL2NsYXNzZXMvY3Jvbi1zY2hlZHVsZS1wcmV2aWV3L2Nyb24tc2NoZWR1bGUtcHJldmlldy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBOEI7QUFDOUIsdUNBT2tCO0FBQ2xCLDZDQUE2RDtBQVE3RCxNQUFhLG1CQUFtQjtJQUc5QixZQUFvQixPQUFvQztRQUFwQyxZQUFPLEdBQVAsT0FBTyxDQUE2QjtRQUN0RCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksYUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3pDLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsbUJBQW1CLENBQUMsU0FBZSxFQUFFLEtBQWEsRUFBRSxRQUFnQjtRQUNsRSxNQUFNLFFBQVEsR0FBVyxFQUFFLENBQUM7UUFDNUIsSUFBSSxZQUFZLEdBQUcsSUFBQSxxQkFBVSxFQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLE9BQU8sR0FBRyxJQUFBLHFCQUFVLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFFdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDO1lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3BELFlBQVksR0FBRyxXQUFXLENBQUM7WUFFM0IsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUEsbUJBQVEsRUFBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDcEQsTUFBTTtZQUNSLENBQUM7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7Z0JBQzlDLFNBQVM7WUFDWCxDQUFDO1lB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QXRGRCxrREFzRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvc2NoZWR1bGVyL2NsYXNzZXMvY3Jvbi1zY2hlZHVsZS1wcmV2aWV3L2Nyb24tc2NoZWR1bGUtcHJldmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDcm9uIH0gZnJvbSAnY3JvbmVyJztcbmltcG9ydCB7XG4gIGFkZERheXMsIGFkZE1pbnV0ZXMsXG4gIGVuZE9mTW9udGgsXG4gIGdldERhdGUsIGdldE1vbnRoLCBpc0FmdGVyLCBpc0JlZm9yZSwgaXNXaXRoaW5JbnRlcnZhbCxcbiAgc2V0SG91cnMsXG4gIHNldE1pbnV0ZXMsXG4gIHN1Yk1pbnV0ZXMsXG59IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IHV0Y1RvWm9uZWRUaW1lLCB6b25lZFRpbWVUb1V0YyB9IGZyb20gJ2RhdGUtZm5zLXR6JztcblxuZXhwb3J0IGludGVyZmFjZSBDcm9uU2NoZWR1bGVyUHJldmlld09wdGlvbnMge1xuICBjcm9udGFiOiBzdHJpbmc7XG4gIHN0YXJ0VGltZT86IHN0cmluZztcbiAgZW5kVGltZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIENyb25TY2hlZHVsZVByZXZpZXcge1xuICBwcml2YXRlIHJlYWRvbmx5IGNyb246IENyb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zOiBDcm9uU2NoZWR1bGVyUHJldmlld09wdGlvbnMpIHtcbiAgICB0aGlzLmNyb24gPSBuZXcgQ3Jvbih0aGlzLm9wdGlvbnMuY3JvbnRhYiwge1xuICAgICAgbGVnYWN5TW9kZTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5leHQge2xpbWl0fSBkYXRlcyBmcm9tIHN0YXJ0RGF0ZSB0byB0aGUgZW5kIG9mIG1vbnRoLlxuICAgKiBAcGFyYW0gc3RhcnREYXRlIFN0YXJ0aW5nIGRhdGUuXG4gICAqIEBwYXJhbSBsaW1pdFxuICAgKi9cbiAgbGlzdE5leHRSdW5zSW5Nb250aChzdGFydERhdGU6IERhdGUsIGxpbWl0OiBudW1iZXIsIHRpbWV6b25lOiBzdHJpbmcpOiBEYXRlW10ge1xuICAgIGNvbnN0IG5leHRSdW5zOiBEYXRlW10gPSBbXTtcbiAgICBsZXQgcHJldmlvdXNEYXRlID0gc3ViTWludXRlcyhzdGFydERhdGUsIDEpO1xuICAgIGNvbnN0IGVuZERhdGUgPSBlbmRPZk1vbnRoKHN0YXJ0RGF0ZSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0Oykge1xuICAgICAgY29uc3QgZXhhbXBsZURhdGUgPSB0aGlzLmNyb24ubmV4dFJ1bihwcmV2aW91c0RhdGUpO1xuICAgICAgcHJldmlvdXNEYXRlID0gZXhhbXBsZURhdGU7XG5cbiAgICAgIGlmICghZXhhbXBsZURhdGUgfHwgIWlzQmVmb3JlKGV4YW1wbGVEYXRlLCBlbmREYXRlKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzV2l0aGluVGltZUNvbnN0cmFpbnMoZXhhbXBsZURhdGUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYWNoaW5lVG9VdGMgPSB6b25lZFRpbWVUb1V0YyhleGFtcGxlRGF0ZSwgdGltZXpvbmUpO1xuXG4gICAgICBjb25zdCB1dGNUb0xvY2FsID0gdXRjVG9ab25lZFRpbWUobWFjaGluZVRvVXRjLCBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmUpO1xuXG4gICAgICBuZXh0UnVucy5wdXNoKHV0Y1RvTG9jYWwpO1xuICAgICAgaSA9IGkgKyAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0UnVucztcbiAgfVxuXG4gIGdldE5leHREYXlzSW5Nb250aFdpdGhSdW5zKHN0YXJ0RGF0ZTogRGF0ZSk6IFNldDxudW1iZXI+IHtcbiAgICBjb25zdCBtb250aERheXNXaXRoUnVucyA9IG5ldyBTZXQ8bnVtYmVyPihbXSk7XG5cbiAgICBsZXQgcHJldmlvdXNEYXRlID0gc3RhcnREYXRlO1xuICAgIGNvbnN0IHN0YXJ0aW5nTW9udGggPSBnZXRNb250aChwcmV2aW91c0RhdGUpO1xuXG4gICAgZG8ge1xuICAgICAgY29uc3QgbmV4dFJ1biA9IHRoaXMuY3Jvbi5uZXh0UnVuKHN1Yk1pbnV0ZXMocHJldmlvdXNEYXRlLCAxKSk7XG5cbiAgICAgIGlmICghbmV4dFJ1biB8fCBnZXRNb250aChuZXh0UnVuKSAhPT0gc3RhcnRpbmdNb250aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzV2l0aGluVGltZUNvbnN0cmFpbnMobmV4dFJ1bikpIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gYWRkTWludXRlcyhuZXh0UnVuLCAxKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHByZXZpb3VzRGF0ZSA9IGFkZERheXMocHJldmlvdXNEYXRlLCAxKTtcblxuICAgICAgY29uc3QgZGF5TnVtYmVyID0gZ2V0RGF0ZShuZXh0UnVuKTtcbiAgICAgIG1vbnRoRGF5c1dpdGhSdW5zLmFkZChkYXlOdW1iZXIpO1xuICAgIH0gd2hpbGUgKGdldE1vbnRoKHByZXZpb3VzRGF0ZSkgPT09IHN0YXJ0aW5nTW9udGgpO1xuXG4gICAgcmV0dXJuIG1vbnRoRGF5c1dpdGhSdW5zO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1dpdGhpblRpbWVDb25zdHJhaW5zKGRhdGU6IERhdGUpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zdGFydFRpbWUgfHwgIXRoaXMub3B0aW9ucy5lbmRUaW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBbc3RhcnRIb3VyLCBzdGFydE1pbnV0ZXNdID0gdGhpcy5vcHRpb25zLnN0YXJ0VGltZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IFtlbmRIb3VyLCBlbmRNaW51dGVzXSA9IHRoaXMub3B0aW9ucy5lbmRUaW1lLnNwbGl0KCc6Jyk7XG5cbiAgICBjb25zdCBzdGFydERhdGUgPSBzZXRNaW51dGVzKHNldEhvdXJzKGRhdGUsIE51bWJlcihzdGFydEhvdXIpKSwgTnVtYmVyKHN0YXJ0TWludXRlcykpO1xuICAgIGNvbnN0IGVuZERhdGUgPSBzZXRNaW51dGVzKHNldEhvdXJzKGRhdGUsIE51bWJlcihlbmRIb3VyKSksIE51bWJlcihlbmRNaW51dGVzKSk7XG5cbiAgICBpZiAoIWlzQWZ0ZXIoZW5kRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwgeyBzdGFydDogc3RhcnREYXRlLCBlbmQ6IGVuZERhdGUgfSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==