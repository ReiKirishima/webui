bb461e4e07778e013a2d99176bdaee8d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportsService = void 0;
const http_1 = require("@angular/common/http");
const core_1 = require("@angular/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const reporting_enum_1 = require("app/enums/reporting.enum");
const window_helper_1 = require("app/helpers/window.helper");
const report_tab_interface_1 = require("app/pages/reports-dashboard/interfaces/report-tab.interface");
const report_utils_1 = require("app/pages/reports-dashboard/utils/report.utils");
const auth_service_1 = require("app/services/auth/auth.service");
const error_handler_service_1 = require("app/services/error-handler.service");
const ws_service_1 = require("app/services/ws.service");
let ReportsService = class ReportsService {
    constructor(authService, errorHandler, ws, http, window) {
        this.authService = authService;
        this.errorHandler = errorHandler;
        this.ws = ws;
        this.http = http;
        this.window = window;
        this.reportingGraphs$ = new rxjs_1.BehaviorSubject([]);
        this.diskMetrics$ = new rxjs_1.BehaviorSubject([]);
        this.hasUps = false;
        this.hasDiskTemperature = false;
        this.legendEventEmitter$ = new rxjs_1.Subject();
        this.legendEventEmitterObs$ = this.legendEventEmitter$.asObservable();
        this.ws.call('reporting.netdata_graphs').subscribe((reportingGraphs) => {
            this.hasUps = reportingGraphs.some((graph) => graph.name.startsWith(reporting_enum_1.ReportingGraphName.Ups));
            this.reportingGraphs$.next(reportingGraphs);
        });
        this.ws.call('disk.temperatures').subscribe((values) => {
            this.hasDiskTemperature = Boolean(Object.values(values).filter(Boolean).length);
        });
    }
    emitLegendEvent(data) {
        this.legendEventEmitter$.next(data);
    }
    getNetData(queryData) {
        return this.ws.call('reporting.netdata_get_data', [[queryData.params], queryData.timeFrame]).pipe((0, rxjs_1.map)((reportingData) => reportingData[0]), (0, rxjs_1.map)((reportingData) => {
            if (queryData.truncate) {
                reportingData.data = this.truncateData(reportingData.data);
            }
            return reportingData;
        }), (0, rxjs_1.map)((reportingData) => (0, report_utils_1.optimizeLegend)(reportingData)), (0, rxjs_1.map)((reportingData) => (0, report_utils_1.convertAggregations)(reportingData, queryData.report.vertical_label || '')));
    }
    truncateData(data) {
        let finished = false;
        let index = data.length - 1;
        do {
            // True only when all the values are null
            const isEmpty = !data[index].reduce((acc, i) => {
                // Treat zero as a value
                const value = i !== null ? 1 : i;
                return acc + value;
            });
            if (isEmpty) {
                data.splice(index, 1);
            }
            else {
                finished = true;
            }
            index--;
        } while (!finished && data.length > 0);
        return data;
    }
    getReportTabs() {
        return Array.from(report_tab_interface_1.reportTypeLabels)
            .filter(([value]) => {
            if (value === report_tab_interface_1.ReportType.Ups && !this.hasUps) {
                return false;
            }
            return true;
        })
            .map(([value, label]) => {
            return { value, label };
        });
    }
    getDiskDevices() {
        return this.ws.call('disk.query').pipe((0, rxjs_1.map)((disks) => {
            return disks
                .filter((disk) => !disk.devname.includes('multipath'))
                .map((disk) => {
                const [value] = disk.devname.split(' ');
                return { label: disk.devname, value };
            })
                .sort((a, b) => a.label.localeCompare(b.label));
        }), (0, rxjs_1.shareReplay)({ refCount: true, bufferSize: 1 }));
    }
    getReportGraphs() {
        return this.reportingGraphs$.asObservable();
    }
    setDiskMetrics(options) {
        this.diskMetrics$.next(options);
    }
    getDiskMetrics() {
        return this.diskMetrics$.asObservable().pipe((0, rxjs_1.map)((options) => {
            if (!this.hasDiskTemperature) {
                return options.filter((option) => option.value !== 'disktemp');
            }
            return options;
        }));
    }
    openNetdata(password) {
        this.authService.user$.pipe((0, rxjs_1.filter)(Boolean), (0, operators_1.take)(1), (0, rxjs_1.switchMap)((user) => {
            const url = new URL(this.window.location.href);
            url.username = user.pw_name;
            url.password = password;
            url.pathname = '/netdata/';
            return this.http.get(url.toString(), { responseType: 'text' }).pipe((0, rxjs_1.tap)(() => this.window.open(url.pathname)));
        }), this.errorHandler.catchError()).subscribe();
    }
};
exports.ReportsService = ReportsService;
ReportsService.ctorParameters = () => [
    { type: auth_service_1.AuthService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ws_service_1.WebSocketService },
    { type: http_1.HttpClient },
    { type: Window, decorators: [{ type: core_1.Inject, args: [window_helper_1.WINDOW,] }] }
];
exports.ReportsService = ReportsService = __decorate([
    (0, core_1.Injectable)({
        providedIn: 'root',
    })
], ReportsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,