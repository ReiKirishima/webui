{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/reports-dashboard/reports.service.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/reports-dashboard/reports.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport {\n  filter, map, Observable, shareReplay, BehaviorSubject, Subject, switchMap, tap,\n} from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ReportingGraphName } from 'app/enums/reporting.enum';\nimport { WINDOW } from 'app/helpers/window.helper';\nimport { Option } from 'app/interfaces/option.interface';\nimport { ReportingGraph } from 'app/interfaces/reporting-graph.interface';\nimport { ReportingData } from 'app/interfaces/reporting.interface';\nimport { ReportTab, reportTypeLabels, ReportType } from 'app/pages/reports-dashboard/interfaces/report-tab.interface';\nimport { LegendDataWithStackedTotalHtml, Report } from 'app/pages/reports-dashboard/interfaces/report.interface';\nimport { convertAggregations, optimizeLegend } from 'app/pages/reports-dashboard/utils/report.utils';\nimport { AuthService } from 'app/services/auth/auth.service';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReportsService {\n  private reportingGraphs$ = new BehaviorSubject<ReportingGraph[]>([]);\n  private diskMetrics$ = new BehaviorSubject<Option[]>([]);\n  private hasUps = false;\n  private hasDiskTemperature = false;\n\n  private legendEventEmitter$ = new Subject<LegendDataWithStackedTotalHtml>();\n  readonly legendEventEmitterObs$ = this.legendEventEmitter$.asObservable();\n\n  constructor(\n    private authService: AuthService,\n    private errorHandler: ErrorHandlerService,\n    private ws: WebSocketService,\n    private http: HttpClient,\n    @Inject(WINDOW) private window: Window,\n  ) {\n    this.ws.call('reporting.netdata_graphs').subscribe((reportingGraphs) => {\n      this.hasUps = reportingGraphs.some((graph) => graph.name.startsWith(ReportingGraphName.Ups));\n      this.reportingGraphs$.next(reportingGraphs);\n    });\n\n    this.ws.call('disk.temperatures').subscribe((values) => {\n      this.hasDiskTemperature = Boolean(Object.values(values).filter(Boolean).length);\n    });\n  }\n\n  emitLegendEvent(data: LegendDataWithStackedTotalHtml): void {\n    this.legendEventEmitter$.next(data);\n  }\n\n  getNetData(\n    queryData: {\n      report: Report;\n      params: { name: string; identifier?: string };\n      timeFrame: { start: number; end: number };\n      truncate: boolean;\n    },\n  ): Observable<ReportingData> {\n    return this.ws.call(\n      'reporting.netdata_get_data',\n      [[queryData.params], queryData.timeFrame],\n    ).pipe(\n      map((reportingData) => reportingData[0]),\n      map((reportingData) => {\n        if (queryData.truncate) {\n          reportingData.data = this.truncateData(reportingData.data as number[][]);\n        }\n\n        return reportingData;\n      }),\n      map((reportingData) => optimizeLegend(reportingData)),\n      map((reportingData) => convertAggregations(reportingData, queryData.report.vertical_label || '')),\n    );\n  }\n\n  truncateData(data: number[][]): number[][] {\n    let finished = false;\n    let index = data.length - 1;\n    do {\n      // True only when all the values are null\n      const isEmpty = !data[index].reduce((acc, i) => {\n        // Treat zero as a value\n        const value = i !== null ? 1 : i;\n        return acc + value;\n      });\n\n      if (isEmpty) {\n        data.splice(index, 1);\n      } else {\n        finished = true;\n      }\n      index--;\n    } while (!finished && data.length > 0);\n\n    return data;\n  }\n\n  getReportTabs(): ReportTab[] {\n    return Array.from(reportTypeLabels)\n      .filter(([value]) => {\n        if (value === ReportType.Ups && !this.hasUps) {\n          return false;\n        }\n\n        return true;\n      })\n      .map(([value, label]) => {\n        return { value, label } as ReportTab;\n      });\n  }\n\n  getDiskDevices(): Observable<Option[]> {\n    return this.ws.call('disk.query').pipe(\n      map((disks) => {\n        return disks\n          .filter((disk) => !disk.devname.includes('multipath'))\n          .map((disk) => {\n            const [value] = disk.devname.split(' ');\n            return { label: disk.devname, value };\n          })\n          .sort((a, b) => a.label.localeCompare(b.label));\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n  }\n\n  getReportGraphs(): Observable<ReportingGraph[]> {\n    return this.reportingGraphs$.asObservable();\n  }\n\n  setDiskMetrics(options: Option[]): void {\n    this.diskMetrics$.next(options);\n  }\n\n  getDiskMetrics(): Observable<Option[]> {\n    return this.diskMetrics$.asObservable().pipe(\n      map((options) => {\n        if (!this.hasDiskTemperature) {\n          return options.filter((option) => option.value !== 'disktemp');\n        }\n\n        return options;\n      }),\n    );\n  }\n\n  openNetdata(password: string): void {\n    this.authService.user$.pipe(\n      filter(Boolean),\n      take(1),\n      switchMap((user) => {\n        const url = new URL(this.window.location.href);\n        url.username = user.pw_name;\n        url.password = password;\n        url.pathname = '/netdata/';\n\n        return this.http.get(url.toString(), { responseType: 'text' }).pipe(\n          tap(() => this.window.open(url.pathname)),\n        );\n      }),\n      this.errorHandler.catchError(),\n    ).subscribe();\n  }\n}\n"],"version":3}