6884346d258c65415b217d5b69e8750e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SftpProviderFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const keychain_credential_type_enum_1 = require("app/enums/keychain-credential-type.enum");
const options_operators_1 = require("app/helpers/operators/options.operators");
const cloud_credentials_1 = require("app/helptext/system/cloud-credentials");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const base_provider_form_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/base-provider-form");
const ws_service_1 = require("app/services/ws.service");
const newOption = 'NEW';
let SftpProviderFormComponent = class SftpProviderFormComponent extends base_provider_form_1.BaseProviderFormComponent {
    beforeSubmit() {
        if (this.form.value.private_key !== newOption) {
            return (0, rxjs_1.of)(true);
        }
        return this.makeNewKeypair();
    }
    constructor(ws, formBuilder, translate, cdr) {
        super();
        this.ws = ws;
        this.formBuilder = formBuilder;
        this.translate = translate;
        this.cdr = cdr;
        this.form = this.formBuilder.group({
            host: ['', forms_1.Validators.required],
            port: [null],
            user: ['', forms_1.Validators.required],
            pass: [''],
            private_key: [null],
        });
        this.helptext = cloud_credentials_1.helptextSystemCloudcredentials;
    }
    ngOnInit() {
        this.loadPrivateKeys();
    }
    ngAfterViewInit() {
        this.formPatcher$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe((values) => {
            this.form.patchValue(values);
            this.cdr.detectChanges();
        });
    }
    loadPrivateKeys() {
        this.privateKeys$ = this.ws.call('keychaincredential.query', [[['type', '=', keychain_credential_type_enum_1.KeychainCredentialType.SshKeyPair]]])
            .pipe((0, options_operators_1.idNameArrayToOptions)(), (0, operators_1.map)((options) => {
            return [
                {
                    label: this.translate.instant('Generate New'),
                    value: newOption,
                },
                ...options,
            ];
        }));
    }
    makeNewKeypair() {
        return this.ws.call('keychaincredential.generate_ssh_key_pair').pipe((0, operators_1.switchMap)((keypair) => {
            const createCredential = {
                name: this.translate.instant('{key} Key', {
                    key: this.form.value.host,
                }),
                type: keychain_credential_type_enum_1.KeychainCredentialType.SshKeyPair,
                attributes: keypair,
            };
            return this.ws.call('keychaincredential.create', [createCredential]).pipe((0, operators_1.tap)((createdKey) => {
                this.loadPrivateKeys();
                this.form.patchValue({
                    private_key: createdKey.id,
                });
            }));
        }));
    }
};
exports.SftpProviderFormComponent = SftpProviderFormComponent;
SftpProviderFormComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: forms_1.FormBuilder },
    { type: core_2.TranslateService },
    { type: core_1.ChangeDetectorRef }
];
exports.SftpProviderFormComponent = SftpProviderFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-sftp-provider-form',
        template: require("./sftp-provider-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_fieldset_component_1.IxFieldsetComponent,
            forms_1.ReactiveFormsModule,
            ix_input_component_1.IxInputComponent,
            ix_select_component_1.IxSelectComponent,
            core_2.TranslateModule,
        ],
    })
], SftpProviderFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,