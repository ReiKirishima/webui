{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/sftp-provider-form/sftp-provider-form.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/sftp-provider-form/sftp-provider-form.component.ts"],"sourcesContent":["import {\n  AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit,\n} from '@angular/core';\nimport { FormBuilder, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { KeychainCredentialType } from 'app/enums/keychain-credential-type.enum';\nimport { idNameArrayToOptions } from 'app/helpers/operators/options.operators';\nimport { helptextSystemCloudcredentials as helptext } from 'app/helptext/system/cloud-credentials';\nimport { Option } from 'app/interfaces/option.interface';\nimport { IxFieldsetComponent } from 'app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component';\nimport { IxInputComponent } from 'app/modules/forms/ix-forms/components/ix-input/ix-input.component';\nimport { IxSelectComponent } from 'app/modules/forms/ix-forms/components/ix-select/ix-select.component';\nimport {\n  BaseProviderFormComponent,\n} from 'app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/base-provider-form';\nimport { WebSocketService } from 'app/services/ws.service';\n\nconst newOption = 'NEW' as const;\n\n@UntilDestroy()\n@Component({\n  selector: 'ix-sftp-provider-form',\n  templateUrl: './sftp-provider-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxFieldsetComponent,\n    ReactiveFormsModule,\n    IxInputComponent,\n    IxSelectComponent,\n    TranslateModule,\n  ],\n})\nexport class SftpProviderFormComponent extends BaseProviderFormComponent implements OnInit, AfterViewInit {\n  form = this.formBuilder.group({\n    host: ['', Validators.required],\n    port: [null as number],\n    user: ['', Validators.required],\n    pass: [''],\n    private_key: [null as number | typeof newOption],\n  });\n\n  privateKeys$: Observable<Option[]>;\n\n  override beforeSubmit(): Observable<unknown> {\n    if (this.form.value.private_key !== newOption) {\n      return of(true);\n    }\n\n    return this.makeNewKeypair();\n  }\n\n  override readonly helptext = helptext;\n\n  constructor(\n    private ws: WebSocketService,\n    private formBuilder: FormBuilder,\n    private translate: TranslateService,\n    private cdr: ChangeDetectorRef,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.loadPrivateKeys();\n  }\n\n  ngAfterViewInit(): void {\n    this.formPatcher$.pipe(untilDestroyed(this)).subscribe((values) => {\n      this.form.patchValue(values);\n      this.cdr.detectChanges();\n    });\n  }\n\n  private loadPrivateKeys(): void {\n    this.privateKeys$ = this.ws.call('keychaincredential.query', [[['type', '=', KeychainCredentialType.SshKeyPair]]])\n      .pipe(\n        idNameArrayToOptions(),\n        map((options) => {\n          return [\n            {\n              label: this.translate.instant('Generate New'),\n              value: newOption,\n            },\n            ...options,\n          ];\n        }),\n      );\n  }\n\n  private makeNewKeypair(): Observable<unknown> {\n    return this.ws.call('keychaincredential.generate_ssh_key_pair').pipe(\n      switchMap((keypair) => {\n        const createCredential = {\n          name: this.translate.instant('{key} Key', {\n            key: this.form.value.host,\n          }),\n          type: KeychainCredentialType.SshKeyPair,\n          attributes: keypair,\n        };\n\n        return this.ws.call('keychaincredential.create', [createCredential]).pipe(\n          tap((createdKey) => {\n            this.loadPrivateKeys();\n            this.form.patchValue({\n              private_key: createdKey.id,\n            });\n          }),\n        );\n      }),\n    );\n  }\n}\n"],"version":3}