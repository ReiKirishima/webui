409a7efba93b8e8fb874bc0f0dc8f674
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdapComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const reactive_forms_1 = require("@ngneat/reactive-forms");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const operators_1 = require("rxjs/operators");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const options_operators_1 = require("app/helpers/operators/options.operators");
const ldap_1 = require("app/helptext/directory-service/ldap");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_chips_component_1 = require("app/modules/forms/ix-forms/components/ix-chips/ix-chips.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const ix_modal_header_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header/ix-modal-header.component");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_textarea_component_1 = require("app/modules/forms/ix-forms/components/ix-textarea/ix-textarea.component");
const with_manage_certificates_link_component_1 = require("app/modules/forms/ix-forms/components/with-manage-certificates-link/with-manage-certificates-link.component");
const ix_validators_service_1 = require("app/modules/forms/ix-forms/services/ix-validators.service");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const error_handler_service_1 = require("app/services/error-handler.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
let LdapComponent = class LdapComponent {
    constructor(ws, cdr, formBuilder, systemGeneralService, dialogService, validatorsService, errorHandler, slideInRef, translate, snackbar) {
        this.ws = ws;
        this.cdr = cdr;
        this.formBuilder = formBuilder;
        this.systemGeneralService = systemGeneralService;
        this.dialogService = dialogService;
        this.validatorsService = validatorsService;
        this.errorHandler = errorHandler;
        this.slideInRef = slideInRef;
        this.translate = translate;
        this.snackbar = snackbar;
        this.requiredRoles = [role_enum_1.Role.DirectoryServiceWrite];
        this.isLoading = false;
        this.isAdvancedMode = false;
        this.form = this.formBuilder.group({
            hostname: [[], this.validatorsService.validateOnCondition((control) => { var _a, _b; return (_b = (_a = control.parent) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.enable; }, forms_1.Validators.required)],
            basedn: [''],
            binddn: [''],
            bindpw: [''],
            enable: [false],
            anonbind: [false],
            ssl: [''],
            certificate: [null],
            validate_certificates: [false],
            disable_freenas_cache: [false],
            kerberos_realm: [null],
            kerberos_principal: [''],
            timeout: [null],
            dns_timeout: [null],
            auxiliary_parameters: [''],
            schema: [''],
        });
        this.helptext = ldap_1.helptextLdap;
        this.kerberosRealms$ = this.ws.call('kerberos.realm.query').pipe((0, operators_1.map)((realms) => {
            return realms.map((realm) => ({
                label: realm.realm,
                value: realm.id,
            }));
        }));
        this.kerberosPrincipals$ = this.ws.call('kerberos.keytab.kerberos_principal_choices').pipe((0, options_operators_1.singleArrayToOptions)());
        this.sslOptions$ = this.ws.call('ldap.ssl_choices').pipe((0, options_operators_1.singleArrayToOptions)());
        this.certificates$ = this.systemGeneralService.getCertificates().pipe((0, options_operators_1.idNameArrayToOptions)());
        this.schemaOptions$ = this.ws.call('ldap.schema_choices').pipe((0, options_operators_1.singleArrayToOptions)());
        this.isEnabled$ = this.form.select((values) => values.enable);
    }
    ngOnInit() {
        this.loadFormValues();
    }
    onAdvancedModeToggled() {
        this.isAdvancedMode = !this.isAdvancedMode;
    }
    onRebuildCachePressed() {
        this.isLoading = true;
        this.dialogService
            .jobDialog(this.systemGeneralService.refreshDirServicesCache())
            .afterClosed()
            .pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: ({ description }) => {
                this.isLoading = false;
                this.snackbar.success(this.translate.instant(description || ldap_1.helptextLdap.ldap_custactions_clearcache_dialog_message));
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.dialogService.error(this.errorHandler.parseError(error));
                this.cdr.markForCheck();
            },
        });
    }
    onSubmit() {
        this.isLoading = true;
        const values = this.form.value;
        this.dialogService.jobDialog(this.ws.job('ldap.update', [values]), {
            title: 'LDAP',
        })
            .afterClosed()
            .pipe(this.errorHandler.catchError(), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: () => {
                this.snackbar.success(this.translate.instant('LDAP configuration updated'));
                this.slideInRef.close(true);
            },
            complete: () => {
                this.isLoading = false;
                this.cdr.markForCheck();
            },
        });
    }
    loadFormValues() {
        this.isLoading = true;
        this.ws.call('ldap.config')
            .pipe((0, until_destroy_1.untilDestroyed)(this))
            .subscribe({
            next: (config) => {
                this.form.patchValue(config);
                this.isLoading = false;
                this.cdr.markForCheck();
            },
            error: (error) => {
                this.isLoading = false;
                this.dialogService.error(this.errorHandler.parseError(error));
                this.cdr.markForCheck();
            },
        });
    }
};
exports.LdapComponent = LdapComponent;
LdapComponent.ctorParameters = () => [
    { type: ws_service_1.WebSocketService },
    { type: core_1.ChangeDetectorRef },
    { type: reactive_forms_1.FormBuilder },
    { type: system_general_service_1.SystemGeneralService },
    { type: dialog_service_1.DialogService },
    { type: ix_validators_service_1.IxValidatorsService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ix_slide_in_ref_1.IxSlideInRef },
    { type: core_2.TranslateService },
    { type: snackbar_service_1.SnackbarService }
];
exports.LdapComponent = LdapComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-ldap',
        template: require("./ldap.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header_component_1.IxModalHeaderComponent,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_chips_component_1.IxChipsComponent,
            ix_input_component_1.IxInputComponent,
            ix_checkbox_component_1.IxCheckboxComponent,
            ix_select_component_1.IxSelectComponent,
            with_manage_certificates_link_component_1.WithManageCertificatesLinkComponent,
            ix_textarea_component_1.IxTextareaComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], LdapComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,