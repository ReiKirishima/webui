{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/form-change-guard/form-change-guard-for-slide-in.directive.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/directives/form-change-guard/form-change-guard-for-slide-in.directive.spec.ts"],"sourcesContent":["import { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport {\n  createHostFactory, SpectatorHost, mockProvider,\n} from '@ngneat/spectator/jest';\nimport { TranslateService } from '@ngx-translate/core';\nimport { of, Subject } from 'rxjs';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxSlideInRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref';\nimport { FormChangeGuardForSlideInDirective } from './form-change-guard-for-slide-in.directive';\n\ndescribe('FormChangeGuardForSlideInDirective', () => {\n  let spectator: SpectatorHost<FormChangeGuardForSlideInDirective<any>>;\n  let slideInClosed$: Subject<void>;\n\n  const createHost = createHostFactory({\n    component: FormChangeGuardForSlideInDirective,\n    imports: [ReactiveFormsModule],\n    providers: [\n      mockProvider(DialogService, {\n        confirm: jest.fn(() => of(true)),\n      }),\n      mockProvider(TranslateService, {\n        instant: jest.fn((key: string) => key),\n      }),\n      {\n        provide: IxSlideInRef,\n        useFactory: () => ({\n          close: jest.fn(),\n          slideInClosed$: slideInClosed$ = new Subject<void>(),\n        }),\n      },\n    ],\n  });\n\n  beforeEach(() => {\n    spectator = createHost(`\n      <form [formGroup]=\"form\" formChangeGuardForSlideIn></form>\n    `, {\n      hostProps: {\n        form: new FormGroup({}),\n      },\n    });\n  });\n\n  function getDirectiveInstance(): FormChangeGuardForSlideInDirective<unknown> {\n    return spectator.component;\n  }\n\n  it('should set formChanged to true when form value changes', () => {\n    const directive = getDirectiveInstance();\n    spectator.component.formGroup.patchValue({\n      test: 'test',\n    });\n    spectator.component.formGroup.markAsDirty();\n    spectator.component.formGroup.markAsTouched();\n    spectator.component.formGroup.markAsPristine();\n    spectator.detectChanges();\n\n    expect(directive.formChanged).toBe(true);\n  });\n\n  it('should emit close event if there are no unsaved changes', () => {\n    const directive = getDirectiveInstance();\n\n    directive.formChanged = false;\n\n    spectator.detectChanges();\n\n    directive.closeWithConfirmation().subscribe((shouldClose) => {\n      expect(shouldClose).toBe(true);\n    });\n  });\n\n  it('should call confirmation dialog if there are unsaved changes', () => {\n    const directive = getDirectiveInstance();\n    const dialogService = spectator.inject(DialogService);\n\n    directive.formChanged = true;\n\n    directive.closeWithConfirmation().subscribe((shouldClose) => {\n      expect(shouldClose).toBe(true);\n      expect(dialogService.confirm).toHaveBeenCalled();\n    });\n  });\n\n  it('should reset formChanged to false after confirmation', () => {\n    const directive = getDirectiveInstance();\n\n    directive.formChanged = true;\n\n    directive.closeWithConfirmation().subscribe((shouldClose) => {\n      expect(shouldClose).toBe(false);\n    });\n  });\n\n  it('should not emit close event if confirmation is rejected', () => {\n    const directive = getDirectiveInstance();\n    const slideInRef = spectator.inject(IxSlideInRef);\n    const dialogService = spectator.inject(DialogService);\n\n    directive.closeWithConfirmation();\n\n    expect(slideInRef.slideInClosed$.observers).toHaveLength(0);\n  });\n});\n"],"version":3}