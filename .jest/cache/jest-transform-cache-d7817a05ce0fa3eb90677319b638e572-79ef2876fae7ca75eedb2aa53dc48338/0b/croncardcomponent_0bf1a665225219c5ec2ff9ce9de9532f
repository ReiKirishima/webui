6150ddf526cd9a916b4b63744efa69f3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronCardComponent = void 0;
const common_1 = require("@angular/common");
const core_1 = require("@angular/core");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const dialog_1 = require("@angular/material/dialog");
const toolbar_1 = require("@angular/material/toolbar");
const router_1 = require("@angular/router");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const rxjs_1 = require("rxjs");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const ui_search_directive_1 = require("app/directives/ui-search.directive");
const role_enum_1 = require("app/enums/role.enum");
const advanced_1 = require("app/helptext/system/advanced");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const empty_service_1 = require("app/modules/empty/empty.service");
const icon_marker_util_1 = require("app/modules/ix-icon/icon-marker.util");
const ix_icon_component_1 = require("app/modules/ix-icon/ix-icon.component");
const async_data_provider_1 = require("app/modules/ix-table/classes/async-data-provider/async-data-provider");
const ix_table_component_1 = require("app/modules/ix-table/components/ix-table/ix-table.component");
const ix_cell_actions_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-actions/ix-cell-actions.component");
const ix_cell_relative_date_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-relative-date/ix-cell-relative-date.component");
const ix_cell_schedule_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-schedule/ix-cell-schedule.component");
const ix_cell_text_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-text/ix-cell-text.component");
const ix_cell_yes_no_component_1 = require("app/modules/ix-table/components/ix-table-body/cells/ix-cell-yes-no/ix-cell-yes-no.component");
const ix_table_body_component_1 = require("app/modules/ix-table/components/ix-table-body/ix-table-body.component");
const ix_table_head_component_1 = require("app/modules/ix-table/components/ix-table-head/ix-table-head.component");
const ix_table_empty_directive_1 = require("app/modules/ix-table/directives/ix-table-empty.directive");
const utils_1 = require("app/modules/ix-table/utils");
const schedule_to_crontab_utils_1 = require("app/modules/scheduler/utils/schedule-to-crontab.utils");
const test_directive_1 = require("app/modules/test-id/test.directive");
const advanced_settings_service_1 = require("app/pages/system/advanced/advanced-settings.service");
const cron_card_elements_1 = require("app/pages/system/advanced/cron/cron-card/cron-card.elements");
const cron_delete_dialog_component_1 = require("app/pages/system/advanced/cron/cron-delete-dialog/cron-delete-dialog.component");
const cron_form_component_1 = require("app/pages/system/advanced/cron/cron-form/cron-form.component");
const error_handler_service_1 = require("app/services/error-handler.service");
const ix_chained_slide_in_service_1 = require("app/services/ix-chained-slide-in.service");
const task_service_1 = require("app/services/task.service");
const ws_service_1 = require("app/services/ws.service");
let CronCardComponent = class CronCardComponent {
    constructor(translate, errorHandler, ws, dialog, taskService, matDialog, advancedSettings, emptyService, chainedSlideIns) {
        this.translate = translate;
        this.errorHandler = errorHandler;
        this.ws = ws;
        this.dialog = dialog;
        this.taskService = taskService;
        this.matDialog = matDialog;
        this.advancedSettings = advancedSettings;
        this.emptyService = emptyService;
        this.chainedSlideIns = chainedSlideIns;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.searchableElements = cron_card_elements_1.cronCardElements;
        this.title = advanced_1.helptextSystemAdvanced.fieldset_cron;
        this.cronjobs = [];
        this.columns = (0, utils_1.createTable)([
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Users'),
                propertyName: 'user',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Command'),
                propertyName: 'command',
            }),
            (0, ix_cell_text_component_1.textColumn)({
                title: this.translate.instant('Description'),
                propertyName: 'description',
            }),
            (0, ix_cell_schedule_component_1.scheduleColumn)({
                title: this.translate.instant('Schedule'),
                propertyName: 'schedule',
            }),
            (0, ix_cell_yes_no_component_1.yesNoColumn)({
                title: this.translate.instant('Enabled'),
                propertyName: 'enabled',
            }),
            (0, ix_cell_relative_date_component_1.relativeDateColumn)({
                title: this.translate.instant('Next Run'),
                getValue: (row) => (row.enabled
                    ? this.taskService.getTaskNextTime(row.cron_schedule)
                    : this.translate.instant('Disabled')),
            }),
            (0, ix_cell_actions_component_1.actionsColumn)({
                cssClass: 'tight-actions',
                actions: [
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('mdi-play-circle'),
                        tooltip: this.translate.instant('Run job'),
                        onClick: (row) => this.runNow(row),
                        requiredRoles: this.requiredRoles,
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('edit'),
                        tooltip: this.translate.instant('Edit'),
                        onClick: (row) => this.doEdit(row),
                    },
                    {
                        iconName: (0, icon_marker_util_1.iconMarker)('mdi-delete'),
                        tooltip: this.translate.instant('Delete'),
                        onClick: (row) => this.doDelete(row),
                        requiredRoles: this.requiredRoles,
                    },
                ],
            }),
        ], {
            uniqueRowTag: (row) => 'card-cron-' + row.command + '-' + row.user,
            ariaLabels: (row) => [row.command, this.translate.instant('Cron Job')],
        });
    }
    ngOnInit() {
        const cronjobs$ = this.ws.call('cronjob.query').pipe((0, rxjs_1.map)((cronjobs) => {
            return cronjobs.map((job) => (Object.assign(Object.assign({}, job), { cron_schedule: (0, schedule_to_crontab_utils_1.scheduleToCrontab)(job.schedule), next_run: this.taskService.getTaskNextRun((0, schedule_to_crontab_utils_1.scheduleToCrontab)(job.schedule)) })));
        }), (0, rxjs_1.tap)((cronjobs) => this.cronjobs = cronjobs), (0, until_destroy_1.untilDestroyed)(this));
        this.dataProvider = new async_data_provider_1.AsyncDataProvider(cronjobs$);
        this.getCronJobs();
    }
    onAdd() {
        this.openForm();
    }
    getCronJobs() {
        this.dataProvider.load();
    }
    runNow(row) {
        this.dialog.confirm({
            title: this.translate.instant('Run Now'),
            message: this.translate.instant('Run this job now?'),
            hideCheckbox: true,
        }).pipe((0, rxjs_1.filter)(Boolean), (0, rxjs_1.switchMap)(() => this.ws.call('cronjob.run', [row.id])), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                const message = row.enabled
                    ? this.translate.instant('This job is scheduled to run again {nextRun}.', { nextRun: row.next_run })
                    : this.translate.instant('This job will not run again until it is enabled.');
                this.dialog.info(this.translate.instant('Job {job} Completed Successfully', { job: row.description }), message);
            },
            error: (error) => this.dialog.error(this.errorHandler.parseError(error)),
        });
    }
    doDelete(row) {
        this.matDialog.open(cron_delete_dialog_component_1.CronDeleteDialogComponent, {
            data: row,
        }).afterClosed()
            .pipe((0, rxjs_1.filter)(Boolean), (0, until_destroy_1.untilDestroyed)(this))
            .subscribe(() => {
            this.getCronJobs();
        });
    }
    doEdit(row) {
        this.openForm(row);
    }
    openForm(row) {
        this.advancedSettings.showFirstTimeWarningIfNeeded().pipe((0, rxjs_1.switchMap)(() => this.chainedSlideIns.open(cron_form_component_1.CronFormComponent, false, row)), (0, rxjs_1.filter)((response) => !!response.response), (0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                this.getCronJobs();
            },
        });
    }
};
exports.CronCardComponent = CronCardComponent;
CronCardComponent.ctorParameters = () => [
    { type: core_2.TranslateService },
    { type: error_handler_service_1.ErrorHandlerService },
    { type: ws_service_1.WebSocketService },
    { type: dialog_service_1.DialogService },
    { type: task_service_1.TaskService },
    { type: dialog_1.MatDialog },
    { type: advanced_settings_service_1.AdvancedSettingsService },
    { type: empty_service_1.EmptyService },
    { type: ix_chained_slide_in_service_1.IxChainedSlideInService }
];
exports.CronCardComponent = CronCardComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-cron-card',
        template: require("./cron-card.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            card_1.MatCard,
            toolbar_1.MatToolbarRow,
            test_directive_1.TestDirective,
            router_1.RouterLink,
            ix_icon_component_1.IxIconComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            ui_search_directive_1.UiSearchDirective,
            ix_table_component_1.IxTableComponent,
            ix_table_empty_directive_1.IxTableEmptyDirective,
            ix_table_head_component_1.IxTableHeadComponent,
            ix_table_body_component_1.IxTableBodyComponent,
            core_2.TranslateModule,
            common_1.AsyncPipe,
        ],
    })
], CronCardComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,