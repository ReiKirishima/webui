29f495f0deed70d05ef8c2c933671aa3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronFormComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const button_1 = require("@angular/material/button");
const card_1 = require("@angular/material/card");
const until_destroy_1 = require("@ngneat/until-destroy");
const core_2 = require("@ngx-translate/core");
const requires_roles_directive_1 = require("app/directives/requires-roles/requires-roles.directive");
const role_enum_1 = require("app/enums/role.enum");
const cron_form_1 = require("app/helptext/system/cron-form");
const user_combobox_provider_1 = require("app/modules/forms/ix-forms/classes/user-combobox-provider");
const form_actions_component_1 = require("app/modules/forms/ix-forms/components/form-actions/form-actions.component");
const ix_checkbox_component_1 = require("app/modules/forms/ix-forms/components/ix-checkbox/ix-checkbox.component");
const ix_combobox_component_1 = require("app/modules/forms/ix-forms/components/ix-combobox/ix-combobox.component");
const ix_fieldset_component_1 = require("app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component");
const ix_input_component_1 = require("app/modules/forms/ix-forms/components/ix-input/ix-input.component");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const ix_modal_header2_component_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header2/ix-modal-header2.component");
const form_error_handler_service_1 = require("app/modules/forms/ix-forms/services/form-error-handler.service");
const scheduler_module_1 = require("app/modules/scheduler/scheduler.module");
const crontab_to_schedule_utils_1 = require("app/modules/scheduler/utils/crontab-to-schedule.utils");
const get_default_crontab_presets_utils_1 = require("app/modules/scheduler/utils/get-default-crontab-presets.utils");
const schedule_to_crontab_utils_1 = require("app/modules/scheduler/utils/schedule-to-crontab.utils");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const test_directive_1 = require("app/modules/test-id/test.directive");
const user_service_1 = require("app/services/user.service");
const ws_service_1 = require("app/services/ws.service");
let CronFormComponent = class CronFormComponent {
    get isNew() {
        return !this.editingCron;
    }
    get title() {
        return this.isNew
            ? this.translate.instant('Add Cron Job')
            : this.translate.instant('Edit Cron Job');
    }
    constructor(fb, ws, translate, errorHandler, cdr, snackbar, userService, chainedRef) {
        this.fb = fb;
        this.ws = ws;
        this.translate = translate;
        this.errorHandler = errorHandler;
        this.cdr = cdr;
        this.snackbar = snackbar;
        this.userService = userService;
        this.chainedRef = chainedRef;
        this.requiredRoles = [role_enum_1.Role.FullAdmin];
        this.form = this.fb.group({
            description: [''],
            command: ['', forms_1.Validators.required],
            user: ['', forms_1.Validators.required],
            schedule: [get_default_crontab_presets_utils_1.CronPresetValue.Daily, forms_1.Validators.required],
            stdout: [true],
            stderr: [false],
            enabled: [true],
        });
        this.isLoading = false;
        this.tooltips = {
            description: cron_form_1.helptextCron.cron_description_tooltip,
            command: cron_form_1.helptextCron.cron_command_tooltip,
            user: cron_form_1.helptextCron.cron_user_tooltip,
            schedule: cron_form_1.helptextCron.crontab_tooltip,
            stdout: cron_form_1.helptextCron.cron_stdout_tooltip,
            stderr: cron_form_1.helptextCron.cron_stderr_tooltip,
            enabled: cron_form_1.helptextCron.cron_enabled_tooltip,
        };
        this.userProvider = new user_combobox_provider_1.UserComboboxProvider(this.userService);
        this.editingCron = this.chainedRef.getData();
    }
    ngOnInit() {
        if (this.editingCron) {
            this.setCronForEdit();
        }
    }
    setCronForEdit() {
        this.form.patchValue(Object.assign(Object.assign({}, this.editingCron), { schedule: (0, schedule_to_crontab_utils_1.scheduleToCrontab)(this.editingCron.schedule) }));
    }
    onSubmit() {
        const values = Object.assign(Object.assign({}, this.form.value), { schedule: (0, crontab_to_schedule_utils_1.crontabToSchedule)(this.form.value.schedule) });
        this.isLoading = true;
        let request$;
        if (this.isNew) {
            request$ = this.ws.call('cronjob.create', [values]);
        }
        else {
            request$ = this.ws.call('cronjob.update', [
                this.editingCron.id,
                values,
            ]);
        }
        request$.pipe((0, until_destroy_1.untilDestroyed)(this)).subscribe({
            next: () => {
                if (this.isNew) {
                    this.snackbar.success(this.translate.instant('Cron job created'));
                }
                else {
                    this.snackbar.success(this.translate.instant('Cron job updated'));
                }
                this.isLoading = false;
                this.chainedRef.close({ response: true, error: null });
            },
            error: (error) => {
                this.isLoading = false;
                this.errorHandler.handleWsFormError(error, this.form);
                this.cdr.markForCheck();
            },
        });
    }
};
exports.CronFormComponent = CronFormComponent;
CronFormComponent.ctorParameters = () => [
    { type: forms_1.FormBuilder },
    { type: ws_service_1.WebSocketService },
    { type: core_2.TranslateService },
    { type: form_error_handler_service_1.FormErrorHandlerService },
    { type: core_1.ChangeDetectorRef },
    { type: snackbar_service_1.SnackbarService },
    { type: user_service_1.UserService },
    { type: chained_component_ref_1.ChainedRef }
];
exports.CronFormComponent = CronFormComponent = __decorate([
    (0, until_destroy_1.UntilDestroy)(),
    (0, core_1.Component)({
        selector: 'ix-cron-form',
        template: require("./cron-form.component.html"),
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [
            ix_modal_header2_component_1.IxModalHeader2Component,
            card_1.MatCard,
            card_1.MatCardContent,
            forms_1.ReactiveFormsModule,
            ix_fieldset_component_1.IxFieldsetComponent,
            ix_input_component_1.IxInputComponent,
            ix_combobox_component_1.IxComboboxComponent,
            scheduler_module_1.SchedulerModule,
            ix_checkbox_component_1.IxCheckboxComponent,
            form_actions_component_1.FormActionsComponent,
            requires_roles_directive_1.RequiresRolesDirective,
            button_1.MatButton,
            test_directive_1.TestDirective,
            core_2.TranslateModule,
        ],
    })
], CronFormComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,