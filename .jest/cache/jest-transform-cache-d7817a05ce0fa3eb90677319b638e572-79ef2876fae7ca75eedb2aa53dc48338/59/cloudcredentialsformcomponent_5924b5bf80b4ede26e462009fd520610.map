{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/credentials/backup-credentials/cloud-credentials-form/cloud-credentials-form.component.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/credentials/backup-credentials/cloud-credentials-form/cloud-credentials-form.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { FormBuilder, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatButton } from '@angular/material/button';\nimport { MatCard, MatCardContent } from '@angular/material/card';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\nimport { combineLatest, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { RequiresRolesDirective } from 'app/directives/requires-roles/requires-roles.directive';\nimport { CloudSyncProviderName } from 'app/enums/cloudsync-provider.enum';\nimport { Role } from 'app/enums/role.enum';\nimport { helptextSystemCloudcredentials as helptext } from 'app/helptext/system/cloud-credentials';\nimport { CloudSyncCredential, CloudSyncCredentialUpdate } from 'app/interfaces/cloudsync-credential.interface';\nimport { CloudSyncProvider } from 'app/interfaces/cloudsync-provider.interface';\nimport { Option } from 'app/interfaces/option.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { FormActionsComponent } from 'app/modules/forms/ix-forms/components/form-actions/form-actions.component';\nimport { IxFieldsetComponent } from 'app/modules/forms/ix-forms/components/ix-fieldset/ix-fieldset.component';\nimport { IxInputComponent } from 'app/modules/forms/ix-forms/components/ix-input/ix-input.component';\nimport { IxSelectComponent } from 'app/modules/forms/ix-forms/components/ix-select/ix-select.component';\nimport { ChainedRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref';\nimport { IxModalHeader2Component } from 'app/modules/forms/ix-forms/components/ix-slide-in/components/ix-modal-header2/ix-modal-header2.component';\nimport { FormErrorHandlerService } from 'app/modules/forms/ix-forms/services/form-error-handler.service';\nimport { forbiddenValues } from 'app/modules/forms/ix-forms/validators/forbidden-values-validation/forbidden-values-validation';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport { TestDirective } from 'app/modules/test-id/test.directive';\nimport {\n  BaseProviderFormComponent,\n} from 'app/pages/credentials/backup-credentials/cloud-credentials-form/provider-forms/base-provider-form';\nimport { CloudSyncProviderDescriptionComponent } from 'app/pages/data-protection/cloudsync/cloudsync-provider-description/cloudsync-provider-description.component';\nimport { getName, getProviderFormClass } from 'app/pages/data-protection/cloudsync/cloudsync-wizard/steps/cloudsync-provider/cloudsync-provider.common';\nimport { CloudCredentialService } from 'app/services/cloud-credential.service';\nimport { ErrorHandlerService } from 'app/services/error-handler.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\nexport interface CloudCredentialFormInput {\n  providers: CloudSyncProviderName[];\n  existingCredential: CloudSyncCredential;\n}\n\n// TODO: Form is partially backend driven and partially hardcoded on the frontend.\n@UntilDestroy()\n@Component({\n  selector: 'ix-cloud-credentials-form',\n  templateUrl: './cloud-credentials-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    IxModalHeader2Component,\n    MatCard,\n    MatCardContent,\n    ReactiveFormsModule,\n    IxFieldsetComponent,\n    IxSelectComponent,\n    CloudSyncProviderDescriptionComponent,\n    IxInputComponent,\n    FormActionsComponent,\n    RequiresRolesDirective,\n    MatButton,\n    TestDirective,\n    TranslateModule,\n  ],\n})\nexport class CloudCredentialsFormComponent implements OnInit {\n  protected readonly requiredRoles = [Role.CloudSyncWrite];\n\n  commonForm = this.formBuilder.group({\n    name: ['Storj', Validators.required],\n    provider: [CloudSyncProviderName.Storj],\n  });\n\n  isLoading = false;\n  existingCredential: CloudSyncCredential;\n  limitProviders: CloudSyncProviderName[];\n  providers: CloudSyncProvider[] = [];\n  providerOptions = of<Option[]>([]);\n  providerForm: BaseProviderFormComponent;\n  forbiddenNames: string[] = [];\n  credentials: CloudSyncCredential[] = [];\n\n  @ViewChild('providerFormContainer', { static: true, read: ViewContainerRef }) providerFormContainer: ViewContainerRef;\n\n  readonly helptext = helptext;\n\n  constructor(\n    private ws: WebSocketService,\n    private formBuilder: FormBuilder,\n    private cdr: ChangeDetectorRef,\n    private errorHandler: ErrorHandlerService,\n    private dialogService: DialogService,\n    private formErrorHandler: FormErrorHandlerService,\n    private translate: TranslateService,\n    private snackbarService: SnackbarService,\n    private cloudCredentialService: CloudCredentialService,\n    private chainedRef: ChainedRef<CloudCredentialFormInput>,\n  ) {\n    const data = this.chainedRef.getData();\n    this.existingCredential = data?.existingCredential;\n    this.limitProviders = data?.providers;\n    // Has to be earlier than potential `setCredentialsForEdit` call\n    this.setFormEvents();\n  }\n\n  get showProviderDescription(): boolean {\n    return this.commonForm.controls.provider.enabled\n      && this.commonForm.controls.provider.value === CloudSyncProviderName.Storj;\n  }\n\n  get isNew(): boolean {\n    return !this.existingCredential;\n  }\n\n  get selectedProvider(): CloudSyncProvider {\n    return this.providers?.find((provider) => {\n      return provider.name === this.commonForm.controls.provider.value;\n    });\n  }\n\n  get areActionsDisabled(): boolean {\n    return this.isLoading\n      || this.commonForm.invalid\n      || this.providerForm?.form?.invalid;\n  }\n\n  ngOnInit(): void {\n    this.loadProviders();\n\n    if (this.existingCredential) {\n      this.setCredentialsForEdit();\n    }\n  }\n\n  setCredentialsForEdit(): void {\n    this.commonForm.patchValue(this.existingCredential);\n\n    if (this.providerForm) {\n      this.providerForm.getFormSetter$().next(this.existingCredential.attributes);\n    }\n  }\n\n  onSubmit(): boolean {\n    this.isLoading = true;\n\n    this.providerForm.beforeSubmit()\n      .pipe(\n        switchMap(() => {\n          const payload = this.preparePayload();\n          return this.isNew\n            ? this.ws.call('cloudsync.credentials.create', [payload])\n            : this.ws.call('cloudsync.credentials.update', [this.existingCredential.id, payload]);\n        }),\n        untilDestroyed(this),\n      )\n      .subscribe({\n        next: (response) => {\n          this.isLoading = false;\n          this.snackbarService.success(\n            this.isNew\n              ? this.translate.instant('Cloud credential added.')\n              : this.translate.instant('Cloud credential updated.'),\n          );\n          this.chainedRef.close({ response, error: null });\n          this.cdr.markForCheck();\n        },\n        error: (error: unknown) => {\n          // TODO: Errors for nested provider form will be shown in a modal. Can be improved.\n          this.isLoading = false;\n          this.formErrorHandler.handleWsFormError(error, this.commonForm);\n          this.cdr.markForCheck();\n        },\n      });\n\n    return false;\n  }\n\n  onVerify(): void {\n    this.isLoading = true;\n\n    this.providerForm.beforeSubmit()\n      .pipe(\n        switchMap(() => {\n          const { name, ...payload } = this.preparePayload();\n\n          return this.ws.call('cloudsync.credentials.verify', [payload]);\n        }),\n        untilDestroyed(this),\n      )\n      .subscribe({\n        next: (response) => {\n          if (response.valid) {\n            this.snackbarService.success(this.translate.instant('The credentials are valid.'));\n          } else {\n            this.dialogService.error({\n              title: this.translate.instant('Error'),\n              message: response.excerpt,\n              backtrace: response.error,\n            });\n          }\n\n          this.isLoading = false;\n          this.cdr.markForCheck();\n        },\n        error: (error: unknown) => {\n          this.isLoading = false;\n          this.formErrorHandler.handleWsFormError(error, this.commonForm);\n          this.cdr.markForCheck();\n        },\n      });\n  }\n\n  private preparePayload(): CloudSyncCredentialUpdate {\n    const commonValues = this.commonForm.value;\n    return {\n      name: commonValues.name,\n      provider: commonValues.provider,\n      attributes: this.providerForm.getSubmitAttributes(),\n    };\n  }\n\n  private loadProviders(): void {\n    this.isLoading = true;\n    combineLatest([\n      this.cloudCredentialService.getProviders(),\n      this.cloudCredentialService.getCloudSyncCredentials(),\n    ])\n      .pipe(untilDestroyed(this))\n      .subscribe({\n        next: ([providers, credentials]) => {\n          if (this.limitProviders?.length) {\n            providers = providers.filter((provider) => this.limitProviders.includes(provider.name));\n          }\n          this.providers = providers;\n          this.providerOptions = of(\n            providers.map((provider) => ({\n              label: provider.title,\n              value: provider.name,\n            })),\n          );\n          this.credentials = credentials;\n          this.setNamesInUseValidator(credentials);\n          this.renderProviderForm();\n          if (this.existingCredential) {\n            this.providerForm.getFormSetter$().next(this.existingCredential.attributes);\n          }\n          this.isLoading = false;\n          this.cdr.markForCheck();\n        },\n        error: (error: unknown) => {\n          this.isLoading = false;\n          this.cdr.markForCheck();\n          this.dialogService.error(this.errorHandler.parseError(error));\n        },\n      });\n  }\n\n  private setFormEvents(): void {\n    this.commonForm.controls.provider.valueChanges\n      .pipe(untilDestroyed(this))\n      .subscribe(() => {\n        this.renderProviderForm();\n\n        this.setDefaultName();\n      });\n  }\n\n  private setNamesInUseValidator(credentials: CloudSyncCredential[]): void {\n    this.forbiddenNames = credentials.map((credential) => credential.name);\n    this.commonForm.controls.name.addValidators(forbiddenValues(this.forbiddenNames));\n  }\n\n  private setDefaultName(): void {\n    if (!this.isNew || this.commonForm.controls.name.touched) {\n      return;\n    }\n\n    this.commonForm.controls.name.setValue(getName(this.selectedProvider.title, this.forbiddenNames));\n  }\n\n  private renderProviderForm(): void {\n    this.providerFormContainer?.clear();\n    if (!this.selectedProvider) {\n      return;\n    }\n\n    const formClass = getProviderFormClass(this.selectedProvider.name);\n    const formRef = this.providerFormContainer.createComponent(formClass);\n    formRef.instance.provider = this.selectedProvider;\n    this.providerForm = formRef.instance;\n  }\n}\n"],"version":3}