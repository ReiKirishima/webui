00be06713ba6d64744d7ae0b101bbdf0
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskService = void 0;
const core_1 = require("@angular/core");
const core_2 = require("@ngx-translate/core");
const cronParser = __importStar(require("cron-parser"));
const i18n_1 = __importDefault(require("cronstrue/i18n"));
const invalid_date_1 = require("app/constants/invalid-date");
const format_distance_to_now_shortened_1 = require("app/helpers/format-distance-to-now-shortened");
const locale_service_1 = require("app/services/locale.service");
const language_service_1 = require("./language.service");
let TaskService = class TaskService {
    constructor(language, localeService, translate) {
        this.language = language;
        this.localeService = localeService;
        this.translate = translate;
        this.timeOptions = [
            { label: '00:00:00', value: '00:00' },
            { label: '00:15:00', value: '00:15' },
            { label: '00:30:00', value: '00:30' },
            { label: '00:45:00', value: '00:45' },
            { label: '01:00:00', value: '01:00' },
            { label: '01:15:00', value: '01:15' },
            { label: '01:30:00', value: '01:30' },
            { label: '01:45:00', value: '01:45' },
            { label: '02:00:00', value: '02:00' },
            { label: '02:15:00', value: '02:15' },
            { label: '02:30:00', value: '02:30' },
            { label: '02:45:00', value: '02:45' },
            { label: '03:00:00', value: '03:00' },
            { label: '03:15:00', value: '03:15' },
            { label: '03:30:00', value: '03:30' },
            { label: '03:45:00', value: '03:45' },
            { label: '04:00:00', value: '04:00' },
            { label: '04:15:00', value: '04:15' },
            { label: '04:30:00', value: '04:30' },
            { label: '04:45:00', value: '04:45' },
            { label: '05:00:00', value: '05:00' },
            { label: '05:15:00', value: '05:15' },
            { label: '05:30:00', value: '05:30' },
            { label: '05:45:00', value: '05:45' },
            { label: '06:00:00', value: '06:00' },
            { label: '06:15:00', value: '06:15' },
            { label: '06:30:00', value: '06:30' },
            { label: '06:45:00', value: '06:45' },
            { label: '07:00:00', value: '07:00' },
            { label: '07:15:00', value: '07:15' },
            { label: '07:30:00', value: '07:30' },
            { label: '07:45:00', value: '07:45' },
            { label: '08:00:00', value: '08:00' },
            { label: '08:15:00', value: '08:15' },
            { label: '08:30:00', value: '08:30' },
            { label: '08:45:00', value: '08:45' },
            { label: '09:00:00', value: '09:00' },
            { label: '09:15:00', value: '09:15' },
            { label: '09:30:00', value: '09:30' },
            { label: '09:45:00', value: '09:45' },
            { label: '10:00:00', value: '10:00' },
            { label: '10:15:00', value: '10:15' },
            { label: '10:30:00', value: '10:30' },
            { label: '10:45:00', value: '10:45' },
            { label: '11:00:00', value: '11:00' },
            { label: '11:15:00', value: '11:15' },
            { label: '11:30:00', value: '11:30' },
            { label: '11:45:00', value: '11:45' },
            { label: '12:00:00', value: '12:00' },
            { label: '12:15:00', value: '12:15' },
            { label: '12:30:00', value: '12:30' },
            { label: '12:45:00', value: '12:45' },
            { label: '13:00:00', value: '13:00' },
            { label: '13:15:00', value: '13:15' },
            { label: '13:30:00', value: '13:30' },
            { label: '13:45:00', value: '13:45' },
            { label: '14:00:00', value: '14:00' },
            { label: '14:15:00', value: '14:15' },
            { label: '14:30:00', value: '14:30' },
            { label: '14:45:00', value: '14:45' },
            { label: '15:00:00', value: '15:00' },
            { label: '15:15:00', value: '15:15' },
            { label: '15:30:00', value: '15:30' },
            { label: '15:45:00', value: '15:45' },
            { label: '16:00:00', value: '16:00' },
            { label: '16:15:00', value: '16:15' },
            { label: '16:30:00', value: '16:30' },
            { label: '16:45:00', value: '16:45' },
            { label: '17:00:00', value: '17:00' },
            { label: '17:15:00', value: '17:15' },
            { label: '17:30:00', value: '17:30' },
            { label: '17:45:00', value: '17:45' },
            { label: '18:00:00', value: '18:00' },
            { label: '18:15:00', value: '18:15' },
            { label: '18:30:00', value: '18:30' },
            { label: '18:45:00', value: '18:45' },
            { label: '19:00:00', value: '19:00' },
            { label: '19:15:00', value: '19:15' },
            { label: '19:30:00', value: '19:30' },
            { label: '19:45:00', value: '19:45' },
            { label: '20:00:00', value: '20:00' },
            { label: '20:15:00', value: '20:15' },
            { label: '20:30:00', value: '20:30' },
            { label: '20:45:00', value: '20:45' },
            { label: '21:00:00', value: '21:00' },
            { label: '21:15:00', value: '21:15' },
            { label: '21:30:00', value: '21:30' },
            { label: '21:45:00', value: '21:45' },
            { label: '22:00:00', value: '22:00' },
            { label: '22:15:00', value: '22:15' },
            { label: '22:30:00', value: '22:30' },
            { label: '22:45:00', value: '22:45' },
            { label: '23:00:00', value: '23:00' },
            { label: '23:15:00', value: '23:15' },
            { label: '23:30:00', value: '23:30' },
            { label: '23:45:00', value: '23:45' },
            { label: '23:59:00', value: '23:59' },
        ];
        this.cronOptions = {
            verbose: true,
            locale: this.language.currentLanguage,
        };
    }
    getTimeOptions() {
        return this.timeOptions;
    }
    getTaskNextRun(scheduleExpression) {
        var _a, _b;
        try {
            const schedule = cronParser.parseExpression(scheduleExpression, {
                iterator: true,
                tz: this.localeService.timezone,
            });
            const date = (_b = (_a = schedule === null || schedule === void 0 ? void 0 : schedule.next()) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.toDate();
            if (!date) {
                return this.translate.instant('N/A');
            }
            return (0, format_distance_to_now_shortened_1.formatDistanceToNowShortened)(date);
        }
        catch (_c) {
            return this.translate.instant(invalid_date_1.invalidDate);
        }
    }
    getTaskNextTime(scheduleExpression) {
        try {
            const schedule = cronParser.parseExpression(scheduleExpression, {
                iterator: true,
                tz: this.localeService.timezone,
            });
            return schedule.next().value.toDate();
        }
        catch (_a) {
            return this.translate.instant(invalid_date_1.invalidDate);
        }
    }
    /**
     * @deprecated Use crontabDescription pipe.
     */
    getTaskCronDescription(scheduleExpression, options = this.cronOptions) {
        options.use24HourTimeFormat = this.localeService.getPreferredTimeFormat() === 'HH:mm:ss';
        return i18n_1.default.toString(scheduleExpression, options);
    }
};
exports.TaskService = TaskService;
TaskService.ctorParameters = () => [
    { type: language_service_1.LanguageService },
    { type: locale_service_1.LocaleService },
    { type: core_2.TranslateService }
];
exports.TaskService = TaskService = __decorate([
    (0, core_1.Injectable)({ providedIn: 'root' })
], TaskService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,