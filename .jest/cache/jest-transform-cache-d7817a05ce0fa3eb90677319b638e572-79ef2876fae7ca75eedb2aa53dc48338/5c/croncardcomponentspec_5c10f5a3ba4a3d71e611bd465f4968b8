dae676f977bfb126044cbe172d0cb459
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const dialog_1 = require("@angular/material/dialog");
const jest_1 = require("@ngneat/spectator/jest");
const testing_1 = require("@ngrx/store/testing");
const rxjs_1 = require("rxjs");
const invalid_date_1 = require("app/constants/invalid-date");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const chained_component_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref");
const ix_icon_harness_1 = require("app/modules/ix-icon/ix-icon.harness");
const ix_table_harness_1 = require("app/modules/ix-table/components/ix-table/ix-table.harness");
const advanced_settings_service_1 = require("app/pages/system/advanced/advanced-settings.service");
const cron_card_component_1 = require("app/pages/system/advanced/cron/cron-card/cron-card.component");
const cron_delete_dialog_component_1 = require("app/pages/system/advanced/cron/cron-delete-dialog/cron-delete-dialog.component");
const cron_form_component_1 = require("app/pages/system/advanced/cron/cron-form/cron-form.component");
const ix_chained_slide_in_service_1 = require("app/services/ix-chained-slide-in.service");
const locale_service_1 = require("app/services/locale.service");
const task_service_1 = require("app/services/task.service");
const ws_service_1 = require("app/services/ws.service");
const system_config_selectors_1 = require("app/store/system-config/system-config.selectors");
describe('CronCardComponent', () => {
    let spectator;
    let loader;
    let table;
    const cronJobs = [
        {
            id: 1,
            user: 'root',
            command: "echo 'Hello World'",
            description: 'test',
            enabled: true,
            stdout: true,
            stderr: false,
            schedule: {
                minute: '0',
                hour: '0',
                dom: '*',
                month: '*',
                dow: '*',
            },
        },
    ];
    const createComponent = (0, jest_1.createComponentFactory)({
        component: cron_card_component_1.CronCardComponent,
        imports: [],
        providers: [
            (0, testing_1.provideMockStore)({
                selectors: [
                    {
                        selector: system_config_selectors_1.selectSystemConfigState,
                        value: {},
                    },
                ],
            }),
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockCall)('cronjob.query', cronJobs),
                (0, mock_websocket_utils_1.mockCall)('cronjob.run'),
            ]),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                confirm: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, jest_1.mockProvider)(ix_chained_slide_in_service_1.IxChainedSlideInService, {
                open: jest.fn(() => (0, rxjs_1.of)({ response: true, error: null })),
            }),
            (0, jest_1.mockProvider)(chained_component_ref_1.ChainedRef, { close: jest.fn(), getData: jest.fn(() => undefined) }),
            (0, jest_1.mockProvider)(dialog_1.MatDialog, {
                open: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)(true),
                })),
            }),
            (0, jest_1.mockProvider)(locale_service_1.LocaleService),
            (0, jest_1.mockProvider)(task_service_1.TaskService, {
                getTaskNextTime: jest.fn(() => invalid_date_1.invalidDate),
            }),
            (0, jest_1.mockProvider)(advanced_settings_service_1.AdvancedSettingsService, {
                showFirstTimeWarningIfNeeded: jest.fn(() => (0, rxjs_1.of)(true)),
            }),
            (0, mock_auth_utils_1.mockAuth)(),
        ],
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        table = yield loader.getHarness(ix_table_harness_1.IxTableHarness);
    }));
    it('should show table rows', () => __awaiter(void 0, void 0, void 0, function* () {
        const expectedRows = [
            ['Users', 'Command', 'Description', 'Schedule', 'Enabled', 'Next Run', ''],
            ['root', "echo 'Hello World'", 'test', '0 0 * * *', 'Yes', 'Invalid Date', ''],
        ];
        const cells = yield table.getCellTexts();
        expect(cells).toEqual(expectedRows);
    }));
    it('shows confirmation dialog when Run Now button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const runNowButton = yield table.getHarnessInRow(ix_icon_harness_1.IxIconHarness.with({ name: 'mdi-play-circle' }), 'root');
        yield runNowButton.click();
        expect(spectator.inject(dialog_service_1.DialogService).confirm).toHaveBeenCalledWith({
            title: 'Run Now',
            message: 'Run this job now?',
            hideCheckbox: true,
        });
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('cronjob.run', [1]);
    }));
    it('shows form to edit an existing cronjob when Edit button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const editButton = yield table.getHarnessInRow(ix_icon_harness_1.IxIconHarness.with({ name: 'edit' }), 'root');
        yield editButton.click();
        expect(spectator.inject(ix_chained_slide_in_service_1.IxChainedSlideInService).open).toHaveBeenCalledWith(cron_form_component_1.CronFormComponent, false, expect.objectContaining(cronJobs[0]));
    }));
    it('deletes a cronjob with confirmation when Delete button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const deleteIcon = yield table.getHarnessInRow(ix_icon_harness_1.IxIconHarness.with({ name: 'mdi-delete' }), 'root');
        yield deleteIcon.click();
        expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(cron_delete_dialog_component_1.CronDeleteDialogComponent, {
            data: expect.objectContaining({ id: 1 }),
        });
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,