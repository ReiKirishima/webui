{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/advanced/cron/cron-card/cron-card.component.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/system/advanced/cron/cron-card/cron-card.component.spec.ts"],"sourcesContent":["import { HarnessLoader } from '@angular/cdk/testing';\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Spectator } from '@ngneat/spectator';\nimport { createComponentFactory, mockProvider } from '@ngneat/spectator/jest';\nimport { provideMockStore } from '@ngrx/store/testing';\nimport { of } from 'rxjs';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { mockWebSocket, mockCall } from 'app/core/testing/utils/mock-websocket.utils';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { ChainedRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/chained-component-ref';\nimport { IxIconHarness } from 'app/modules/ix-icon/ix-icon.harness';\nimport { IxTableHarness } from 'app/modules/ix-table/components/ix-table/ix-table.harness';\nimport { AdvancedSettingsService } from 'app/pages/system/advanced/advanced-settings.service';\nimport { CronCardComponent } from 'app/pages/system/advanced/cron/cron-card/cron-card.component';\nimport { CronDeleteDialogComponent } from 'app/pages/system/advanced/cron/cron-delete-dialog/cron-delete-dialog.component';\nimport { CronFormComponent } from 'app/pages/system/advanced/cron/cron-form/cron-form.component';\nimport { IxChainedSlideInService } from 'app/services/ix-chained-slide-in.service';\nimport { LocaleService } from 'app/services/locale.service';\nimport { TaskService } from 'app/services/task.service';\nimport { WebSocketService } from 'app/services/ws.service';\nimport { selectSystemConfigState } from 'app/store/system-config/system-config.selectors';\n\ndescribe('CronCardComponent', () => {\n  let spectator: Spectator<CronCardComponent>;\n  let loader: HarnessLoader;\n  let table: IxTableHarness;\n\n  const cronJobs = [\n    {\n      id: 1,\n      user: 'root',\n      command: \"echo 'Hello World'\",\n      description: 'test',\n      enabled: true,\n      stdout: true,\n      stderr: false,\n      schedule: {\n        minute: '0',\n        hour: '0',\n        dom: '*',\n        month: '*',\n        dow: '*',\n      },\n    },\n  ];\n\n  const createComponent = createComponentFactory({\n    component: CronCardComponent,\n    imports: [\n    ],\n    providers: [\n      provideMockStore({\n        selectors: [\n          {\n            selector: selectSystemConfigState,\n            value: {},\n          },\n        ],\n      }),\n      mockWebSocket([\n        mockCall('cronjob.query', cronJobs),\n        mockCall('cronjob.run'),\n      ]),\n      mockProvider(DialogService, {\n        confirm: jest.fn(() => of(true)),\n      }),\n      mockProvider(IxChainedSlideInService, {\n        open: jest.fn(() => of({ response: true, error: null })),\n      }),\n      mockProvider(ChainedRef, { close: jest.fn(), getData: jest.fn(() => undefined) }),\n      mockProvider(MatDialog, {\n        open: jest.fn(() => ({\n          afterClosed: () => of(true),\n        })),\n      }),\n      mockProvider(LocaleService),\n      mockProvider(TaskService, {\n        getTaskNextTime: jest.fn(() => new Date('Some Invalid Date')),\n      }),\n      mockProvider(AdvancedSettingsService, {\n        showFirstTimeWarningIfNeeded: jest.fn(() => of(true)),\n      }),\n      mockAuth(),\n    ],\n  });\n\n  beforeEach(async () => {\n    spectator = createComponent();\n    loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n    table = await loader.getHarness(IxTableHarness);\n  });\n\n  it('should show table rows', async () => {\n    const expectedRows = [\n      ['Users', 'Command', 'Description', 'Schedule', 'Enabled', 'Next Run', ''],\n      ['root', \"echo 'Hello World'\", 'test', '0 0 * * *', 'Yes', 'Invalid Date', ''],\n    ];\n\n    const cells = await table.getCellTexts();\n    expect(cells).toEqual(expectedRows);\n  });\n\n  it('shows confirmation dialog when Run Now button is pressed', async () => {\n    const runNowButton = await table.getHarnessInRow(IxIconHarness.with({ name: 'mdi-play-circle' }), 'root');\n    await runNowButton.click();\n\n    expect(spectator.inject(DialogService).confirm).toHaveBeenCalledWith({\n      title: 'Run Now',\n      message: 'Run this job now?',\n      hideCheckbox: true,\n    });\n\n    expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith('cronjob.run', [1]);\n  });\n\n  it('shows form to edit an existing cronjob when Edit button is pressed', async () => {\n    const editButton = await table.getHarnessInRow(IxIconHarness.with({ name: 'edit' }), 'root');\n    await editButton.click();\n\n    expect(spectator.inject(IxChainedSlideInService).open).toHaveBeenCalledWith(\n      CronFormComponent,\n      false,\n      expect.objectContaining(cronJobs[0]),\n    );\n  });\n\n  it('deletes a cronjob with confirmation when Delete button is pressed', async () => {\n    const deleteIcon = await table.getHarnessInRow(IxIconHarness.with({ name: 'mdi-delete' }), 'root');\n    await deleteIcon.click();\n\n    expect(spectator.inject(MatDialog).open).toHaveBeenCalledWith(CronDeleteDialogComponent, {\n      data: expect.objectContaining({ id: 1 }),\n    });\n  });\n});\n"],"version":3}