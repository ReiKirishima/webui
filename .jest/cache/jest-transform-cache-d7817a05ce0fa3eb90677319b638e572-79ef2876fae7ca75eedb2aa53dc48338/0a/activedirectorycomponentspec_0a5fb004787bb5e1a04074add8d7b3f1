b4f77cd7dffd4243b9b939cbb925259e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const dialog_1 = require("@angular/material/dialog");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const mock_websocket_service_1 = require("app/core/testing/classes/mock-websocket.service");
const fake_job_utils_1 = require("app/core/testing/utils/fake-job.utils");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const directory_service_state_enum_1 = require("app/enums/directory-service-state.enum");
const active_directory_1 = require("app/helptext/directory-service/active-directory");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const active_directory_component_1 = require("app/pages/directory-service/components/active-directory/active-directory.component");
const leave_domain_dialog_component_1 = require("app/pages/directory-service/components/leave-domain-dialog/leave-domain-dialog.component");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
describe('ActiveDirectoryComponent', () => {
    let spectator;
    let loader;
    let form;
    const existingConfig = {
        id: 1,
        allow_dns_updates: true,
        allow_trusted_doms: false,
        bindname: 'Administrator',
        bindpw: '',
        createcomputer: 'Computers/Servers/NAS',
        disable_freenas_cache: false,
        dns_timeout: 10,
        domainname: 'AD.IXSYSTEMS.NET',
        enable: false,
        kerberos_principal: '',
        kerberos_realm: 2,
        netbiosalias: ['alias1', 'alias2'],
        netbiosname: 'truenas',
        nss_info: 'SFU20',
        restrict_pam: false,
        site: 'site-name',
        timeout: 60,
        use_default_domain: false,
        verbose_logging: true,
    };
    const createComponent = (0, jest_1.createComponentFactory)({
        component: active_directory_component_1.ActiveDirectoryComponent,
        imports: [
            forms_1.ReactiveFormsModule,
            leave_domain_dialog_component_1.LeaveDomainDialogComponent,
        ],
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockJob)('activedirectory.update', (0, fake_job_utils_1.fakeSuccessfulJob)()),
                (0, mock_websocket_utils_1.mockCall)('directoryservices.get_state', {
                    activedirectory: directory_service_state_enum_1.DirectoryServiceState.Disabled,
                }),
                (0, mock_websocket_utils_1.mockCall)('activedirectory.config', existingConfig),
                (0, mock_websocket_utils_1.mockCall)('kerberos.realm.query', [
                    { id: 1, realm: 'ad.ixsystems.net' },
                    { id: 2, realm: 'directory.ixsystems.net' },
                ]),
                (0, mock_websocket_utils_1.mockCall)('kerberos.keytab.kerberos_principal_choices', [
                    'TRUENAS$@AD.IXSYSTEMS.NET',
                    'TRUENAS2$@AD.IXSYSTEMS.NET',
                ]),
                (0, mock_websocket_utils_1.mockCall)('activedirectory.nss_info_choices', ['SFU', 'SFU20']),
            ]),
            (0, jest_1.mockProvider)(system_general_service_1.SystemGeneralService, {
                refreshDirServicesCache: jest.fn(() => (0, rxjs_1.of)(null)),
            }),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                jobDialog: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)({}),
                })),
            }),
            (0, jest_1.mockProvider)(snackbar_service_1.SnackbarService),
            (0, jest_1.mockProvider)(ix_slide_in_service_1.IxSlideInService),
            (0, jest_1.mockProvider)(ix_slide_in_ref_1.IxSlideInRef),
            (0, mock_auth_utils_1.mockAuth)(),
            { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: undefined },
        ],
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
    }));
    it('loads and shows active directory config', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('directoryservices.get_state');
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('activedirectory.config');
        const values = yield form.getValues();
        expect(values).toEqual({
            'Domain Account Name': 'Administrator',
            'Domain Account Password': '',
            'Domain Name': 'AD.IXSYSTEMS.NET',
            'Enable (requires password or Kerberos principal)': false,
            'NetBIOS Name': 'truenas',
        });
    }));
    it('does not show Account Name and Password when Kerberos principal is set', () => __awaiter(void 0, void 0, void 0, function* () {
        spectator.inject(mock_websocket_service_1.MockWebSocketService).mockCall('activedirectory.config', Object.assign(Object.assign({}, existingConfig), { kerberos_principal: 'TRUENAS$@AD.IXSYSTEMS.NET' }));
        spectator.component.ngOnInit();
        const values = yield form.getValues();
        expect(values).toEqual({
            'Domain Name': 'AD.IXSYSTEMS.NET',
            'Enable (requires password or Kerberos principal)': false,
        });
    }));
    it('shows advanced fields when Advanced Options button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const advancedButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Advanced Options' }));
        yield advancedButton.click();
        const values = yield form.getValues();
        expect(values).toEqual({
            'Domain Name': 'AD.IXSYSTEMS.NET',
            'Domain Account Name': 'Administrator',
            'Domain Account Password': '',
            'Enable (requires password or Kerberos principal)': false,
            'Verbose Logging': true,
            'Allow Trusted Domains': false,
            'Use Default Domain': false,
            'Allow DNS Updates': true,
            'Disable AD User / Group Cache': false,
            'Restrict PAM': false,
            'Site Name': 'site-name',
            'Kerberos Realm': 'directory.ixsystems.net',
            'Kerberos Principal': '',
            'Computer Account OU': 'Computers/Servers/NAS',
            'AD Timeout': '60',
            'DNS Timeout': '10',
            'Winbind NSS Info': 'SFU20',
            'NetBIOS Name': 'truenas',
            'NetBIOS Alias': ['alias1', 'alias2'],
        });
    }));
    it('rebuilds directory service cache when Rebuild Cache is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const rebuildButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Rebuild Directory Service Cache' }));
        yield rebuildButton.click();
        expect(spectator.inject(system_general_service_1.SystemGeneralService).refreshDirServicesCache).toHaveBeenCalled();
        expect(spectator.inject(snackbar_service_1.SnackbarService).success).toHaveBeenCalledWith(active_directory_1.helptextActiveDirectory.activedirectory_custactions_clearcache_dialog_message);
    }));
    it('saves active directory settings when form is submitted', () => __awaiter(void 0, void 0, void 0, function* () {
        yield form.fillForm({
            'Domain Name': 'ad.truenas.com',
            'Domain Account Name': 'Administrator',
            'Domain Account Password': '12345678',
            'Enable (requires password or Kerberos principal)': true,
        });
        const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
        yield saveButton.click();
        expect(spectator.inject(dialog_service_1.DialogService).jobDialog).toHaveBeenCalled();
        expect(spectator.inject(ws_service_1.WebSocketService).job).toHaveBeenCalledWith('activedirectory.update', [{
                domainname: 'ad.truenas.com',
                bindname: 'Administrator',
                bindpw: '12345678',
                enable: true,
                verbose_logging: true,
                allow_trusted_doms: false,
                use_default_domain: false,
                allow_dns_updates: true,
                disable_freenas_cache: false,
                restrict_pam: false,
                site: 'site-name',
                kerberos_realm: 2,
                kerberos_principal: '',
                createcomputer: 'Computers/Servers/NAS',
                timeout: 60,
                dns_timeout: 10,
                nss_info: 'SFU20',
                netbiosname: 'truenas',
                netbiosalias: ['alias1', 'alias2'],
            }]);
        expect(spectator.inject(ix_slide_in_ref_1.IxSlideInRef).close).toHaveBeenCalled();
    }));
    describe('leave domain button', () => {
        beforeEach(() => {
            spectator.inject(mock_websocket_service_1.MockWebSocketService).mockCall('directoryservices.get_state', {
                activedirectory: directory_service_state_enum_1.DirectoryServiceState.Healthy,
            });
            spectator.component.ngOnInit();
        });
        it('shows Leave Domain button when Active Directory is setup', () => __awaiter(void 0, void 0, void 0, function* () {
            const leaveDomainButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Leave Domain' }));
            expect(leaveDomainButton).toBeTruthy();
        }));
        it('opens LeaveDomainDialogComponent component when Leave Domain button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(spectator.inject(dialog_1.MatDialog), 'open');
            const leaveDomainButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Leave Domain' }));
            yield leaveDomainButton.click();
            expect(spectator.inject(dialog_1.MatDialog).open).toHaveBeenCalledWith(leave_domain_dialog_component_1.LeaveDomainDialogComponent);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,