{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/directory-service/components/active-directory/active-directory.component.spec.ts","mappings":"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","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/directory-service/components/active-directory/active-directory.component.spec.ts"],"sourcesContent":["import { HarnessLoader } from '@angular/cdk/testing';\nimport { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonHarness } from '@angular/material/button/testing';\nimport { MatDialog } from '@angular/material/dialog';\nimport { createComponentFactory, mockProvider, Spectator } from '@ngneat/spectator/jest';\nimport { of } from 'rxjs';\nimport { MockWebSocketService } from 'app/core/testing/classes/mock-websocket.service';\nimport { fakeSuccessfulJob } from 'app/core/testing/utils/fake-job.utils';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { mockCall, mockJob, mockWebSocket } from 'app/core/testing/utils/mock-websocket.utils';\nimport { DirectoryServiceState } from 'app/enums/directory-service-state.enum';\nimport { helptextActiveDirectory } from 'app/helptext/directory-service/active-directory';\nimport { ActiveDirectoryConfig } from 'app/interfaces/active-directory-config.interface';\nimport { DirectoryServicesState } from 'app/interfaces/directory-services-state.interface';\nimport { KerberosRealm } from 'app/interfaces/kerberos-realm.interface';\nimport { DialogService } from 'app/modules/dialog/dialog.service';\nimport { IxSlideInRef } from 'app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref';\nimport { SLIDE_IN_DATA } from 'app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token';\nimport { IxFormHarness } from 'app/modules/forms/ix-forms/testing/ix-form.harness';\nimport { SnackbarService } from 'app/modules/snackbar/services/snackbar.service';\nimport {\n  ActiveDirectoryComponent,\n} from 'app/pages/directory-service/components/active-directory/active-directory.component';\nimport {\n  LeaveDomainDialogComponent,\n} from 'app/pages/directory-service/components/leave-domain-dialog/leave-domain-dialog.component';\nimport { IxSlideInService } from 'app/services/ix-slide-in.service';\nimport { SystemGeneralService } from 'app/services/system-general.service';\nimport { WebSocketService } from 'app/services/ws.service';\n\ndescribe('ActiveDirectoryComponent', () => {\n  let spectator: Spectator<ActiveDirectoryComponent>;\n  let loader: HarnessLoader;\n  let form: IxFormHarness;\n  const existingConfig = {\n    id: 1,\n    allow_dns_updates: true,\n    allow_trusted_doms: false,\n    bindname: 'Administrator',\n    bindpw: '',\n    createcomputer: 'Computers/Servers/NAS',\n    disable_freenas_cache: false,\n    dns_timeout: 10,\n    domainname: 'AD.IXSYSTEMS.NET',\n    enable: false,\n    kerberos_principal: '',\n    kerberos_realm: 2,\n    netbiosalias: ['alias1', 'alias2'],\n    netbiosname: 'truenas',\n    nss_info: 'SFU20',\n    restrict_pam: false,\n    site: 'site-name',\n    timeout: 60,\n    use_default_domain: false,\n    verbose_logging: true,\n  } as ActiveDirectoryConfig;\n  const createComponent = createComponentFactory({\n    component: ActiveDirectoryComponent,\n    imports: [\n      ReactiveFormsModule,\n      LeaveDomainDialogComponent,\n    ],\n    providers: [\n      mockWebSocket([\n        mockJob('activedirectory.update', fakeSuccessfulJob()),\n        mockCall('directoryservices.get_state', {\n          activedirectory: DirectoryServiceState.Disabled,\n        } as DirectoryServicesState),\n        mockCall('activedirectory.config', existingConfig),\n        mockCall('kerberos.realm.query', [\n          { id: 1, realm: 'ad.ixsystems.net' },\n          { id: 2, realm: 'directory.ixsystems.net' },\n        ] as KerberosRealm[]),\n        mockCall('kerberos.keytab.kerberos_principal_choices', [\n          'TRUENAS$@AD.IXSYSTEMS.NET',\n          'TRUENAS2$@AD.IXSYSTEMS.NET',\n        ]),\n        mockCall('activedirectory.nss_info_choices', ['SFU', 'SFU20']),\n      ]),\n      mockProvider(SystemGeneralService, {\n        refreshDirServicesCache: jest.fn(() => of(null)),\n      }),\n      mockProvider(DialogService, {\n        jobDialog: jest.fn(() => ({\n          afterClosed: () => of({}),\n        })),\n      }),\n      mockProvider(SnackbarService),\n      mockProvider(IxSlideInService),\n      mockProvider(IxSlideInRef),\n      mockAuth(),\n      { provide: SLIDE_IN_DATA, useValue: undefined },\n    ],\n  });\n\n  beforeEach(async () => {\n    spectator = createComponent();\n    loader = TestbedHarnessEnvironment.loader(spectator.fixture);\n    form = await loader.getHarness(IxFormHarness);\n  });\n\n  it('loads and shows active directory config', async () => {\n    expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith('directoryservices.get_state');\n    expect(spectator.inject(WebSocketService).call).toHaveBeenCalledWith('activedirectory.config');\n\n    const values = await form.getValues();\n    expect(values).toEqual({\n      'Domain Account Name': 'Administrator',\n      'Domain Account Password': '',\n      'Domain Name': 'AD.IXSYSTEMS.NET',\n      'Enable (requires password or Kerberos principal)': false,\n      'NetBIOS Name': 'truenas',\n    });\n  });\n\n  it('does not show Account Name and Password when Kerberos principal is set', async () => {\n    spectator.inject(MockWebSocketService).mockCall('activedirectory.config', {\n      ...existingConfig,\n      kerberos_principal: 'TRUENAS$@AD.IXSYSTEMS.NET',\n    });\n    spectator.component.ngOnInit();\n\n    const values = await form.getValues();\n    expect(values).toEqual({\n      'Domain Name': 'AD.IXSYSTEMS.NET',\n      'Enable (requires password or Kerberos principal)': false,\n    });\n  });\n\n  it('shows advanced fields when Advanced Options button is pressed', async () => {\n    const advancedButton = await loader.getHarness(MatButtonHarness.with({ text: 'Advanced Options' }));\n    await advancedButton.click();\n\n    const values = await form.getValues();\n    expect(values).toEqual({\n      'Domain Name': 'AD.IXSYSTEMS.NET',\n      'Domain Account Name': 'Administrator',\n      'Domain Account Password': '',\n      'Enable (requires password or Kerberos principal)': false,\n      'Verbose Logging': true,\n      'Allow Trusted Domains': false,\n      'Use Default Domain': false,\n      'Allow DNS Updates': true,\n      'Disable AD User / Group Cache': false,\n      'Restrict PAM': false,\n\n      'Site Name': 'site-name',\n      'Kerberos Realm': 'directory.ixsystems.net',\n      'Kerberos Principal': '',\n      'Computer Account OU': 'Computers/Servers/NAS',\n      'AD Timeout': '60',\n      'DNS Timeout': '10',\n      'Winbind NSS Info': 'SFU20',\n      'NetBIOS Name': 'truenas',\n      'NetBIOS Alias': ['alias1', 'alias2'],\n    });\n  });\n\n  it('rebuilds directory service cache when Rebuild Cache is pressed', async () => {\n    const rebuildButton = await loader.getHarness(MatButtonHarness.with({ text: 'Rebuild Directory Service Cache' }));\n    await rebuildButton.click();\n\n    expect(spectator.inject(SystemGeneralService).refreshDirServicesCache).toHaveBeenCalled();\n    expect(spectator.inject(SnackbarService).success).toHaveBeenCalledWith(\n      helptextActiveDirectory.activedirectory_custactions_clearcache_dialog_message,\n    );\n  });\n\n  it('saves active directory settings when form is submitted', async () => {\n    await form.fillForm({\n      'Domain Name': 'ad.truenas.com',\n      'Domain Account Name': 'Administrator',\n      'Domain Account Password': '12345678',\n      'Enable (requires password or Kerberos principal)': true,\n    });\n\n    const saveButton = await loader.getHarness(MatButtonHarness.with({ text: 'Save' }));\n    await saveButton.click();\n\n    expect(spectator.inject(DialogService).jobDialog).toHaveBeenCalled();\n    expect(spectator.inject(WebSocketService).job).toHaveBeenCalledWith(\n      'activedirectory.update',\n      [{\n        domainname: 'ad.truenas.com',\n        bindname: 'Administrator',\n        bindpw: '12345678',\n        enable: true,\n        verbose_logging: true,\n        allow_trusted_doms: false,\n        use_default_domain: false,\n        allow_dns_updates: true,\n        disable_freenas_cache: false,\n        restrict_pam: false,\n        site: 'site-name',\n        kerberos_realm: 2,\n        kerberos_principal: '',\n        createcomputer: 'Computers/Servers/NAS',\n        timeout: 60,\n        dns_timeout: 10,\n        nss_info: 'SFU20',\n        netbiosname: 'truenas',\n        netbiosalias: ['alias1', 'alias2'],\n      }],\n    );\n    expect(spectator.inject(IxSlideInRef).close).toHaveBeenCalled();\n  });\n\n  describe('leave domain button', () => {\n    beforeEach(() => {\n      spectator.inject(MockWebSocketService).mockCall('directoryservices.get_state', {\n        activedirectory: DirectoryServiceState.Healthy,\n      } as DirectoryServicesState);\n      spectator.component.ngOnInit();\n    });\n\n    it('shows Leave Domain button when Active Directory is setup', async () => {\n      const leaveDomainButton = await loader.getHarness(MatButtonHarness.with({ text: 'Leave Domain' }));\n      expect(leaveDomainButton).toBeTruthy();\n    });\n\n    it('opens LeaveDomainDialogComponent component when Leave Domain button is pressed', async () => {\n      jest.spyOn(spectator.inject(MatDialog), 'open');\n\n      const leaveDomainButton = await loader.getHarness(MatButtonHarness.with({ text: 'Leave Domain' }));\n      await leaveDomainButton.click();\n\n      expect(spectator.inject(MatDialog).open).toHaveBeenCalledWith(LeaveDomainDialogComponent);\n    });\n  });\n});\n"],"version":3}