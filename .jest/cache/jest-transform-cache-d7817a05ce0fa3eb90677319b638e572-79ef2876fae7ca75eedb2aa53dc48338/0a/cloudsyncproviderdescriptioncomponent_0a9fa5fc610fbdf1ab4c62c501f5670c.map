{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/data-protection/cloudsync/cloudsync-provider-description/cloudsync-provider-description.component.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wCAEuB;AACvB,uDAAqD;AACrD,uEAAsE;AACtE,+EAAoG;AACpG,sJAAoJ;;AAU7I,IAAM,qCAAqC,GAA3C,MAAM,qCAAqC;IAA3C;wBACe,YAAK,CAAC,QAAQ,EAAyB;QAElD,qBAAgB,GAAG,uCAAmB,CAAC;QAE7B,UAAK,GAAG,IAAA,eAAQ,EAAC,GAAG,EAAE;YACvC,OAAO,4BAA4B,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEgB,SAAI,GAAG,IAAA,eAAQ,EAAC,GAAG,EAAE;YACtC,OAAO,kDAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEgB,gBAAW,GAAG,IAAA,eAAQ,EAAC,GAAG,EAAE;YAC7C,OAAO,gEAA+B,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;KACJ;;AAhBY,sFAAqC;;;;gDAArC,qCAAqC;IARjD,IAAA,gBAAS,EAAC;QACT,QAAQ,EAAE,mCAAmC;QAC7C,oEAA8D;QAE9D,eAAe,EAAE,8BAAuB,CAAC,MAAM;QAC/C,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,CAAC,oCAAiB,CAAC;KAC7B,CAAC;GACW,qCAAqC,CAgBjD","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/data-protection/cloudsync/cloudsync-provider-description/cloudsync-provider-description.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy, Component, computed, input,\n} from '@angular/core';\nimport { ImgFallbackModule } from 'ngx-img-fallback';\nimport { appImagePlaceholder } from 'app/constants/catalog.constants';\nimport { CloudSyncProviderName, cloudSyncProviderNameMap } from 'app/enums/cloudsync-provider.enum';\nimport { cloudsyncProviderDescriptionMap } from 'app/pages/data-protection/cloudsync/cloudsync-provider-description/cloudsync-provider-description';\n\n@Component({\n  selector: 'ix-cloudsync-provider-description',\n  templateUrl: './cloudsync-provider-description.component.html',\n  styleUrls: ['./cloudsync-provider-description.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [ImgFallbackModule],\n})\nexport class CloudSyncProviderDescriptionComponent {\n  readonly provider = input.required<CloudSyncProviderName>();\n\n  readonly imagePlaceholder = appImagePlaceholder;\n\n  protected readonly image = computed(() => {\n    return `/assets/images/cloudsync/${this.provider()}.png`;\n  });\n\n  protected readonly name = computed(() => {\n    return cloudSyncProviderNameMap.get(this.provider());\n  });\n\n  protected readonly description = computed(() => {\n    return cloudsyncProviderDescriptionMap.get(this.provider());\n  });\n}\n"],"version":3}