62b2c1dd5fed33b67805ed6e713e8808
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testbed_1 = require("@angular/cdk/testing/testbed");
const forms_1 = require("@angular/forms");
const testing_1 = require("@angular/material/button/testing");
const jest_1 = require("@ngneat/spectator/jest");
const rxjs_1 = require("rxjs");
const fake_job_utils_1 = require("app/core/testing/utils/fake-job.utils");
const mock_auth_utils_1 = require("app/core/testing/utils/mock-auth.utils");
const mock_websocket_utils_1 = require("app/core/testing/utils/mock-websocket.utils");
const ldap_1 = require("app/helptext/directory-service/ldap");
const dialog_service_1 = require("app/modules/dialog/dialog.service");
const ix_slide_in_ref_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in-ref");
const ix_slide_in_token_1 = require("app/modules/forms/ix-forms/components/ix-slide-in/ix-slide-in.token");
const with_manage_certificates_link_component_1 = require("app/modules/forms/ix-forms/components/with-manage-certificates-link/with-manage-certificates-link.component");
const ix_form_harness_1 = require("app/modules/forms/ix-forms/testing/ix-form.harness");
const snackbar_service_1 = require("app/modules/snackbar/services/snackbar.service");
const ldap_component_1 = require("app/pages/directory-service/components/ldap/ldap.component");
const ix_slide_in_service_1 = require("app/services/ix-slide-in.service");
const system_general_service_1 = require("app/services/system-general.service");
const ws_service_1 = require("app/services/ws.service");
describe('LdapComponent', () => {
    let spectator;
    let loader;
    let form;
    const existingLdapConfig = {
        hostname: ['ldap.truenas.com', 'ldap.freenas.org'],
        basedn: 'dc=test,dc=org',
        binddn: 'cn=Manager,dc=test',
        bindpw: '12345678',
        enable: true,
        anonbind: false,
        ssl: 'START_TLS',
        certificate: 1,
        validate_certificates: true,
        disable_freenas_cache: true,
        kerberos_realm: 1,
        kerberos_principal: 'principal1',
        timeout: 10,
        dns_timeout: 15,
        auxiliary_parameters: 'param=25',
        schema: 'RFC2307',
    };
    const createComponent = (0, jest_1.createComponentFactory)({
        component: ldap_component_1.LdapComponent,
        imports: [
            forms_1.ReactiveFormsModule,
            with_manage_certificates_link_component_1.WithManageCertificatesLinkComponent,
        ],
        providers: [
            (0, mock_websocket_utils_1.mockWebSocket)([
                (0, mock_websocket_utils_1.mockJob)('ldap.update', (0, fake_job_utils_1.fakeSuccessfulJob)()),
                (0, mock_websocket_utils_1.mockCall)('ldap.config', existingLdapConfig),
                (0, mock_websocket_utils_1.mockCall)('kerberos.keytab.kerberos_principal_choices', [
                    'principal1', 'principal2',
                ]),
                (0, mock_websocket_utils_1.mockCall)('ldap.ssl_choices', ['OFF', 'START_TLS']),
                (0, mock_websocket_utils_1.mockCall)('ldap.schema_choices', ['RFC2307', 'RFC2307BIS']),
                (0, mock_websocket_utils_1.mockCall)('kerberos.realm.query', [
                    { id: 1, realm: 'Realm 1' },
                    { id: 2, realm: 'Realm 2' },
                ]),
            ]),
            (0, jest_1.mockProvider)(ix_slide_in_service_1.IxSlideInService),
            (0, jest_1.mockProvider)(system_general_service_1.SystemGeneralService, {
                refreshDirServicesCache: jest.fn(() => (0, rxjs_1.of)(null)),
                getCertificates: () => (0, rxjs_1.of)([
                    { id: 1, name: 'certificate1' },
                    { id: 2, name: 'certificate2' },
                ]),
            }),
            (0, jest_1.mockProvider)(dialog_service_1.DialogService, {
                jobDialog: jest.fn(() => ({
                    afterClosed: () => (0, rxjs_1.of)(null),
                })),
            }),
            (0, jest_1.mockProvider)(snackbar_service_1.SnackbarService),
            (0, jest_1.mockProvider)(ix_slide_in_ref_1.IxSlideInRef),
            (0, mock_auth_utils_1.mockAuth)(),
            { provide: ix_slide_in_token_1.SLIDE_IN_DATA, useValue: undefined },
        ],
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        spectator = createComponent();
        loader = testbed_1.TestbedHarnessEnvironment.loader(spectator.fixture);
        form = yield loader.getHarness(ix_form_harness_1.IxFormHarness);
    }));
    it('loads LDAP config and shows it', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(spectator.inject(ws_service_1.WebSocketService).call).toHaveBeenCalledWith('ldap.config');
        const values = yield form.getValues();
        expect(values).toEqual({
            Hostname: ['ldap.truenas.com', 'ldap.freenas.org'],
            'Base DN': 'dc=test,dc=org',
            'Bind DN': 'cn=Manager,dc=test',
            'Bind Password': '12345678',
            Enable: true,
        });
    }));
    it('shows advanced LDAP when Advanced Mode is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const advancedModeButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Advanced Options' }));
        yield advancedModeButton.click();
        const values = yield form.getValues();
        expect(values).toEqual({
            Hostname: ['ldap.truenas.com', 'ldap.freenas.org'],
            'Base DN': 'dc=test,dc=org',
            'Bind DN': 'cn=Manager,dc=test',
            'Bind Password': '12345678',
            Enable: true,
            'Allow Anonymous Binding': false,
            'Encryption Mode': 'START_TLS',
            Certificate: 'certificate1',
            'Validate Certificates': true,
            'Disable LDAP User/Group Cache': true,
            'Kerberos Realm': 'Realm 1',
            'Kerberos Principal': 'principal1',
            'LDAP Timeout': '10',
            'DNS Timeout': '15',
            'Auxiliary Parameters': 'param=25',
            Schema: 'RFC2307',
        });
    }));
    it('rebuilds cache when Rebuild Cache button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        const rebuildCacheButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Rebuild Directory Service Cache' }));
        yield rebuildCacheButton.click();
        expect(spectator.inject(system_general_service_1.SystemGeneralService).refreshDirServicesCache).toHaveBeenCalled();
        expect(spectator.inject(snackbar_service_1.SnackbarService).success).toHaveBeenCalledWith(ldap_1.helptextLdap.ldap_custactions_clearcache_dialog_message);
    }));
    it('saves LDAP config when form is submitted', () => __awaiter(void 0, void 0, void 0, function* () {
        const advancedModeButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Advanced Options' }));
        yield advancedModeButton.click();
        yield form.fillForm({
            'Bind Password': 'adminadmin',
            'Allow Anonymous Binding': true,
            'Kerberos Principal': 'principal2',
        });
        const saveButton = yield loader.getHarness(testing_1.MatButtonHarness.with({ text: 'Save' }));
        yield saveButton.click();
        expect(spectator.inject(ws_service_1.WebSocketService).job).toHaveBeenCalledWith('ldap.update', [Object.assign(Object.assign({}, existingLdapConfig), { bindpw: 'adminadmin', anonbind: true, kerberos_principal: 'principal2' })]);
        expect(spectator.inject(dialog_service_1.DialogService).jobDialog).toHaveBeenCalled();
        expect(spectator.inject(ix_slide_in_ref_1.IxSlideInRef).close).toHaveBeenCalled();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,