{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/utils/schedule-to-crontab.utils.ts","mappings":";;AAEA,8CAMC;AAED,gEA+BC;AAvCD,SAAgB,iBAAiB,CAAC,QAAkB;IAClD,IAAI,QAAQ,IAAI,QAAQ,EAAE,CAAC;QACzB,OAAO,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,GAAG,EAAE,CAAC;IACjG,CAAC;IAED,OAAO,KAAK,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,GAAG,EAAE,CAAC;AAChF,CAAC;AAED,SAAgB,0BAA0B,CAAC,OAAe;IACxD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;IAE/B,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,MAAc,EAAU,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;IAEnH,IAAI,CAAC,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,GAAG,IAAI,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC;QAC/E,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;IAC1C,CAAC;IAED,MAAM,YAAY,GAAG,CAAC,KAAe,EAAE,MAAc,EAAkC,EAAE;QACvF,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,OAAO,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;QACpF,CAAC;QACD,OAAO,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;IACpF,CAAC,CAAC;IAEF,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACxB,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,OAAO,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACxB,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO;YACL,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;YACvC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC;SACxD,CAAC;IACJ,CAAC;IAED,OAAO,YAAY,CAAC,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/modules/scheduler/utils/schedule-to-crontab.utils.ts"],"sourcesContent":["import { Schedule } from 'app/interfaces/schedule.interface';\n\nexport function scheduleToCrontab(schedule: Schedule): string {\n  if ('minute' in schedule) {\n    return `${schedule.minute} ${schedule.hour} ${schedule.dom} ${schedule.month} ${schedule.dow}`;\n  }\n\n  return `0 ${schedule.hour} ${schedule.dom} ${schedule.month} ${schedule.dow}`;\n}\n\nexport function extractActiveHoursFromCron(crontab: string): { start: string; end: string } {\n  const parts = crontab.split(' ');\n  const [minutes, hours] = parts;\n\n  const formatTime = (hour: string, minute: string): string => `${hour.padStart(2, '0')}:${minute.padStart(2, '0')}`;\n\n  if ((hours === '0' || hours === '00') && (minutes === '0' || minutes === '00')) {\n    return { start: '00:00', end: '23:59' };\n  }\n\n  const processRange = (range: string[], minute: string): { start: string; end: string } => {\n    if (range.length === 2) {\n      return { start: formatTime(range[0], minute), end: formatTime(range[1], minute) };\n    }\n    return { start: formatTime(range[0], minute), end: formatTime(range[0], minute) };\n  };\n\n  if (hours.includes('-')) {\n    const hourRange = hours.split('-');\n    return processRange(hourRange, minutes);\n  }\n\n  if (hours.includes(',')) {\n    const hourList = hours.split(',');\n    return {\n      start: formatTime(hourList[0], minutes),\n      end: formatTime(hourList[hourList.length - 1], minutes),\n    };\n  }\n\n  return processRange([hours], minutes);\n}\n"],"version":3}