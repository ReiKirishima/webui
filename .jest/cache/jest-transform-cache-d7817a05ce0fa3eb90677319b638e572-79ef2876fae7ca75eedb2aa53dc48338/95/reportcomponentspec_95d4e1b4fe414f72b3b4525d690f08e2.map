{"file":"/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/reports-dashboard/components/report/report.component.spec.ts","mappings":";;AAAA,iDAAyF;AACzF,iDAAuD;AACvD,iDAAqC;AACrC,6CAAqC;AACrC,+BAA0B;AAC1B,4EAAkE;AAElE,kGAA6F;AAC7F,qGAAiG;AAEjG,iFAA6E;AAC7E,uFAA6F;AAC7F,6FAAiF;AAEjF,MAAM,cAAc,GAAG;IACrB,OAAO,EAAE,4BAA4B;IACrC,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE;CAC+B,CAAC;AAE/C,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,SAAqC,CAAC;IAE1C,MAAM,eAAe,GAAG,IAAA,6BAAsB,EAAC;QAC7C,SAAS,EAAE,kCAAe;QAC1B,SAAS,EAAE;YACT,IAAA,mBAAY,EAAC,yCAAkB,EAAE;gBAC/B,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC1B,OAAO,IAAA,oBAAM,EAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAqB,EAAE,qBAAqB,CAAC,CAAC;gBAC5G,CAAC,CAAC;aACH,CAAC;YACF,IAAA,mBAAY,EAAC,gCAAc,EAAE;gBAC3B,sBAAsB,EAAE,IAAA,SAAE,EAAC,cAAc,CAAC;aAC3C,CAAC;YACF,IAAA,0BAAgB,EAAC;gBACf,SAAS,EAAE;oBACT;wBACE,QAAQ,EAAE,yCAAiB;wBAC3B,KAAK,EAAE;4BACL,kBAAkB,EAAE,KAAK;yBACX;qBACjB;oBACD;wBACE,QAAQ,EAAE,wCAAc;wBACxB,KAAK,EAAE,kBAAkB;qBAC1B;oBACD;wBACE,QAAQ,EAAE,mCAAW;wBACrB,KAAK,EAAE,SAAS;qBACjB;iBACF;aACF,CAAC;YACF,IAAA,0BAAQ,GAAE;SACX;KACF,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,IAAI,CAAC,KAAK,CAAC,oBAAI,EAAE,MAAM,CAAC,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;QACjE,SAAS,GAAG,eAAe,EAAE,CAAC;QAC9B,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,UAAU,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,IAAI,CAAC,KAAK,CAAC,oBAAI,EAAE,MAAM,CAAC,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;QAChE,SAAS,GAAG,eAAe,EAAE,CAAC;QAC9B,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,SAAS,EAAE,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/macbook/karpov-work/TrueNAS/webui/src/app/pages/reports-dashboard/components/report/report.component.spec.ts"],"sourcesContent":["import { Spectator, createComponentFactory, mockProvider } from '@ngneat/spectator/jest';\nimport { provideMockStore } from '@ngrx/store/testing';\nimport { UUID } from 'angular2-uuid';\nimport { format } from 'date-fns-tz';\nimport { of } from 'rxjs';\nimport { mockAuth } from 'app/core/testing/utils/mock-auth.utils';\nimport { Preferences } from 'app/interfaces/preferences.interface';\nimport { FormatDateTimePipe } from 'app/modules/pipes/format-date-time/format-datetime.pipe';\nimport { ReportComponent } from 'app/pages/reports-dashboard/components/report/report.component';\nimport { LegendDataWithStackedTotalHtml } from 'app/pages/reports-dashboard/interfaces/report.interface';\nimport { ReportsService } from 'app/pages/reports-dashboard/reports.service';\nimport { selectPreferences, selectTheme } from 'app/store/preferences/preferences.selectors';\nimport { selectTimezone } from 'app/store/system-config/system-config.selectors';\n\nconst fakeLegendData = {\n  chartId: 'chart-uuid-selected-report',\n  x: Date.now(),\n} as unknown as LegendDataWithStackedTotalHtml;\n\ndescribe('ReportComponent', () => {\n  let spectator: Spectator<ReportComponent>;\n\n  const createComponent = createComponentFactory({\n    component: ReportComponent,\n    providers: [\n      mockProvider(FormatDateTimePipe, {\n        transform: jest.fn((date) => {\n          return format(typeof date === 'string' ? Date.parse(date) : date as number | Date, 'yyyy-MM-dd HH:mm:ss');\n        }),\n      }),\n      mockProvider(ReportsService, {\n        legendEventEmitterObs$: of(fakeLegendData),\n      }),\n      provideMockStore({\n        selectors: [\n          {\n            selector: selectPreferences,\n            value: {\n              autoRefreshReports: false,\n            } as Preferences,\n          },\n          {\n            selector: selectTimezone,\n            value: 'America/New_York',\n          },\n          {\n            selector: selectTheme,\n            value: 'ix-dark',\n          },\n        ],\n      }),\n      mockAuth(),\n    ],\n  });\n\n  it('shows legend values only for the target report', () => {\n    jest.spyOn(UUID, 'UUID').mockReturnValue('uuid-selected-report');\n    spectator = createComponent();\n    expect(spectator.component.shouldShowLegendValue).toBeTruthy();\n  });\n\n  it('hides legend values for other reports', () => {\n    jest.spyOn(UUID, 'UUID').mockReturnValue('uuid-another-report');\n    spectator = createComponent();\n    expect(spectator.component.shouldShowLegendValue).toBeFalsy();\n  });\n});\n"],"version":3}