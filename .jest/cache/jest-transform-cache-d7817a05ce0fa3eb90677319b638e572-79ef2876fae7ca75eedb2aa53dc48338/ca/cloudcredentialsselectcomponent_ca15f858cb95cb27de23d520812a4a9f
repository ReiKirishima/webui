f8c4db58327fdc5f2a5a6df1cb5677e1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudCredentialsSelectComponent = void 0;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const rxjs_1 = require("rxjs");
const cloudsync_provider_enum_1 = require("app/enums/cloudsync-provider.enum");
const ix_select_with_new_option_directive_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select-with-new-option.directive");
const ix_select_component_1 = require("app/modules/forms/ix-forms/components/ix-select/ix-select.component");
const cloud_credentials_form_component_1 = require("app/pages/credentials/backup-credentials/cloud-credentials-form/cloud-credentials-form.component");
const cloud_credential_service_1 = require("app/services/cloud-credential.service");
let CloudCredentialsSelectComponent = class CloudCredentialsSelectComponent extends ix_select_with_new_option_directive_1.IxSelectWithNewOption {
    constructor() {
        super(...arguments);
        this.cloudCredentialService = (0, core_1.inject)(cloud_credential_service_1.CloudCredentialService);
    }
    fetchOptions() {
        return this.cloudCredentialService.getCloudSyncCredentials().pipe((0, rxjs_1.map)((options) => {
            if (this.filterByProviders) {
                options = options.filter((option) => this.filterByProviders.includes(option.provider));
            }
            return options.map((option) => {
                return { label: `${option.name} (${cloudsync_provider_enum_1.cloudSyncProviderNameMap.get(option.provider)})`, value: option.id };
            });
        }));
    }
    getValueFromChainedResponse(result) {
        return result.response.id;
    }
    getFormComponentType() {
        return cloud_credentials_form_component_1.CloudCredentialsFormComponent;
    }
    getFormInputData() {
        var _a;
        return ((_a = this.filterByProviders) === null || _a === void 0 ? void 0 : _a.length) ? { providers: this.filterByProviders } : undefined;
    }
};
exports.CloudCredentialsSelectComponent = CloudCredentialsSelectComponent;
CloudCredentialsSelectComponent.propDecorators = {
    label: [{ type: core_1.Input }],
    tooltip: [{ type: core_1.Input }],
    required: [{ type: core_1.Input }],
    filterByProviders: [{ type: core_1.Input }]
};
exports.CloudCredentialsSelectComponent = CloudCredentialsSelectComponent = __decorate([
    (0, core_1.Component)({
        selector: 'ix-cloud-credentials-select',
        template: require("./cloud-credentials-select.component.html"),
        providers: [
            {
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: (0, core_1.forwardRef)(() => CloudCredentialsSelectComponent),
                multi: true,
            },
        ],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        standalone: true,
        imports: [ix_select_component_1.IxSelectComponent],
    })
], CloudCredentialsSelectComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvY3VzdG9tLXNlbGVjdHMvY2xvdWQtY3JlZGVudGlhbHMtc2VsZWN0L2Nsb3VkLWNyZWRlbnRpYWxzLXNlbGVjdC5jb21wb25lbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0Esd0NBRXVCO0FBQ3ZCLDBDQUFtRDtBQUNuRCwrQkFBdUM7QUFDdkMsK0VBQW9HO0FBR3BHLDZJQUE0SDtBQUM1SCw2R0FBdUg7QUFDdkgsdUpBQWlKO0FBQ2pKLG9GQUErRTtBQWlCeEUsSUFBTSwrQkFBK0IsR0FBckMsTUFBTSwrQkFBZ0MsU0FBUSwyREFBcUI7SUFBbkU7O1FBTUcsMkJBQXNCLEdBQUcsSUFBQSxhQUFNLEVBQUMsaURBQXNCLENBQUMsQ0FBQztJQTBCbEUsQ0FBQztJQXhCQyxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxJQUFJLENBQy9ELElBQUEsVUFBRyxFQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUMzQixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN6RixDQUFDO1lBQ0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzVCLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxLQUFLLGtEQUF3QixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzFHLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCwyQkFBMkIsQ0FBQyxNQUFpRDtRQUMzRSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsT0FBTyxnRUFBNkIsQ0FBQztJQUN2QyxDQUFDO0lBRVEsZ0JBQWdCOztRQUN2QixPQUFPLENBQUEsTUFBQSxJQUFJLENBQUMsaUJBQWlCLDBDQUFFLE1BQU0sRUFBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM1RixDQUFDOztBQS9CVSwwRUFBK0I7O29CQUN6QyxZQUFLO3NCQUNMLFlBQUs7dUJBQ0wsWUFBSztnQ0FDTCxZQUFLOzswQ0FKSywrQkFBK0I7SUFkM0MsSUFBQSxnQkFBUyxFQUFDO1FBQ1QsUUFBUSxFQUFFLDZCQUE2QjtRQUN2Qyw4REFBd0Q7UUFDeEQsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLHlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLElBQUEsaUJBQVUsRUFBQyxHQUFHLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQztnQkFDOUQsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO1FBQ0QsZUFBZSxFQUFFLDhCQUF1QixDQUFDLE1BQU07UUFDL0MsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFLENBQUMsdUNBQWlCLENBQUM7S0FDN0IsQ0FBQztHQUNXLCtCQUErQixDQWdDM0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21hY2Jvb2sva2FycG92LXdvcmsvVHJ1ZU5BUy93ZWJ1aS9zcmMvYXBwL21vZHVsZXMvZm9ybXMvY3VzdG9tLXNlbGVjdHMvY2xvdWQtY3JlZGVudGlhbHMtc2VsZWN0L2Nsb3VkLWNyZWRlbnRpYWxzLXNlbGVjdC5jb21wb25lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LCBJbnB1dCwgZm9yd2FyZFJlZiwgaW5qZWN0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG1hcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2xvdWRTeW5jUHJvdmlkZXJOYW1lLCBjbG91ZFN5bmNQcm92aWRlck5hbWVNYXAgfSBmcm9tICdhcHAvZW51bXMvY2xvdWRzeW5jLXByb3ZpZGVyLmVudW0nO1xuaW1wb3J0IHsgQ2xvdWRDcmVkZW50aWFsIH0gZnJvbSAnYXBwL2ludGVyZmFjZXMvY2xvdWQtc3luYy10YXNrLmludGVyZmFjZSc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdhcHAvaW50ZXJmYWNlcy9vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IEl4U2VsZWN0V2l0aE5ld09wdGlvbiB9IGZyb20gJ2FwcC9tb2R1bGVzL2Zvcm1zL2l4LWZvcm1zL2NvbXBvbmVudHMvaXgtc2VsZWN0L2l4LXNlbGVjdC13aXRoLW5ldy1vcHRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IEl4U2VsZWN0Q29tcG9uZW50LCBJeFNlbGVjdFZhbHVlIH0gZnJvbSAnYXBwL21vZHVsZXMvZm9ybXMvaXgtZm9ybXMvY29tcG9uZW50cy9peC1zZWxlY3QvaXgtc2VsZWN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDbG91ZENyZWRlbnRpYWxzRm9ybUNvbXBvbmVudCB9IGZyb20gJ2FwcC9wYWdlcy9jcmVkZW50aWFscy9iYWNrdXAtY3JlZGVudGlhbHMvY2xvdWQtY3JlZGVudGlhbHMtZm9ybS9jbG91ZC1jcmVkZW50aWFscy1mb3JtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDbG91ZENyZWRlbnRpYWxTZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2VzL2Nsb3VkLWNyZWRlbnRpYWwuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFpbmVkQ29tcG9uZW50UmVzcG9uc2UgfSBmcm9tICdhcHAvc2VydmljZXMvaXgtY2hhaW5lZC1zbGlkZS1pbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXgtY2xvdWQtY3JlZGVudGlhbHMtc2VsZWN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nsb3VkLWNyZWRlbnRpYWxzLXNlbGVjdC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ2xvdWRDcmVkZW50aWFsc1NlbGVjdENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0l4U2VsZWN0Q29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xvdWRDcmVkZW50aWFsc1NlbGVjdENvbXBvbmVudCBleHRlbmRzIEl4U2VsZWN0V2l0aE5ld09wdGlvbiB7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHRvb2x0aXA6IHN0cmluZztcbiAgQElucHV0KCkgcmVxdWlyZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGZpbHRlckJ5UHJvdmlkZXJzOiBDbG91ZFN5bmNQcm92aWRlck5hbWVbXTtcblxuICBwcml2YXRlIGNsb3VkQ3JlZGVudGlhbFNlcnZpY2UgPSBpbmplY3QoQ2xvdWRDcmVkZW50aWFsU2VydmljZSk7XG5cbiAgZmV0Y2hPcHRpb25zKCk6IE9ic2VydmFibGU8T3B0aW9uW10+IHtcbiAgICByZXR1cm4gdGhpcy5jbG91ZENyZWRlbnRpYWxTZXJ2aWNlLmdldENsb3VkU3luY0NyZWRlbnRpYWxzKCkucGlwZShcbiAgICAgIG1hcCgob3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAodGhpcy5maWx0ZXJCeVByb3ZpZGVycykge1xuICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiB0aGlzLmZpbHRlckJ5UHJvdmlkZXJzLmluY2x1ZGVzKG9wdGlvbi5wcm92aWRlcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHsgbGFiZWw6IGAke29wdGlvbi5uYW1lfSAoJHtjbG91ZFN5bmNQcm92aWRlck5hbWVNYXAuZ2V0KG9wdGlvbi5wcm92aWRlcil9KWAsIHZhbHVlOiBvcHRpb24uaWQgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgZ2V0VmFsdWVGcm9tQ2hhaW5lZFJlc3BvbnNlKHJlc3VsdDogQ2hhaW5lZENvbXBvbmVudFJlc3BvbnNlPENsb3VkQ3JlZGVudGlhbD4pOiBJeFNlbGVjdFZhbHVlIHtcbiAgICByZXR1cm4gcmVzdWx0LnJlc3BvbnNlLmlkO1xuICB9XG5cbiAgZ2V0Rm9ybUNvbXBvbmVudFR5cGUoKTogQ29tcG9uZW50VHlwZTxDbG91ZENyZWRlbnRpYWxzRm9ybUNvbXBvbmVudD4ge1xuICAgIHJldHVybiBDbG91ZENyZWRlbnRpYWxzRm9ybUNvbXBvbmVudDtcbiAgfVxuXG4gIG92ZXJyaWRlIGdldEZvcm1JbnB1dERhdGEoKTogeyBwcm92aWRlcnM6IENsb3VkU3luY1Byb3ZpZGVyTmFtZVtdIH0ge1xuICAgIHJldHVybiB0aGlzLmZpbHRlckJ5UHJvdmlkZXJzPy5sZW5ndGggPyB7IHByb3ZpZGVyczogdGhpcy5maWx0ZXJCeVByb3ZpZGVycyB9IDogdW5kZWZpbmVkO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=